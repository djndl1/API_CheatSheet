* File I/O
:PROPERTIES:
:CUSTOM_ID: file-io
:END:

Regular files are viewed as a linear array (a byte stream) without further
organization and structure like /records/.

** Five basic IO functions
:PROPERTIES:
:CUSTOM_ID: five-basic-io-functions
:END:
Most file I/O on a UNIX system can be performed using only five
functions: =open=, =read=, =write=, =lseek=, =close=.

=read= and =write= are unbuffered.

** File Descriptors
:PROPERTIES:
:CUSTOM_ID: file-descriptors
:END:
To the kernel, all open files of a process are referred to by /file
descriptors/. The actual data structure of a *file description* maintains the
current operational state of the process on the file, such as the current
offset, file status flags.

File descriptors range from 0
through =OPEN_MAX-1= (as of Linux 4.19, ranging from 1024 to 32768)
Three special file descriptors are defined:

#+begin_src C
STDIN_FILENO // 0
STDOUT_FILENO // 1
STDERR_FILENO // 2
#+end_src

*** File Descriptor Duplication

A file description may be indexed by multiple file descriptors (=dup=, =dup2=,
=dup3=, =fcntl(fd, F_DUPFD, XXX)=, =open("/dev/fd/X", ...)=). only if the last
file descriptor to the file description is closed, that file description is freed.

Two file descriptors may refer to the same file description but with different
file descriptor flags (i.e. =FD_CLOEXEC=).

=dup2= is atomic by combining =close= the new file descriptor and duplicating
the old one onto it: a perfect tool for standard I/O redirection.

*** =fcntl= function
:PROPERTIES:
:CUSTOM_ID: fcntl-function
:END:
The =fcntl= function can change or get the properties of a file that is already
open, including the file descriptor and its file description:

- Duplicate an existing descriptor

- Get/set file descriptor flags

- Get/set file status flags

- Get/set asynchronous I/O ownership

- Get/set record locks

Note that the five modes =O_RDONY=, =O_WRONLY=, =O_RDWR=, =O_EXEC=,
=O_SEARCH= are mutually exclusive and the returned file mode must be OR-ed with
=O_ACCMODE= to obtain the actual mode.

Modifying existing flags involves first getting the flags, modifying it and then
setting with =fcntl=. Otherwise, existing flags might be turned off.

** File Data Structure
:PROPERTIES:
:CUSTOM_ID: file-sharing
:END:

Thre kernel uses three data structures to represent an openfile.

- Every process entry has a
  table of open /file descriptors/ and its related flags (*close-on-exec*) and a
  pointer to a /file table entry/.

- The kernel maintains a /file table/ for all open files, containing the
  file status flags (read/write/append...), offset, and a pointer to the
  /v-node/ table entry for the file.

- Each open file has a /v-node/ (virtual filesystem) structure that contains information about
  the type of file and pointers to functions that operate on the file.
  For most files, the v-node also contains the *i-node* for the file. This
  information is read from disk when the file is opened. (Linux has a
  generic filesystem-independent i-node instead of a v-node).

#+begin_example
process table entry                             +-----------+
+----|-----+                               +--->-v-node info|
| fd |     |       file table entry        |    |  v-data+----+
| 0  |   +-------+  +--------------------+ |    +-----------+ |
+----------+     |  |file status flags   | |                  |
| fd |     |     +-->current file offset | |                  |
| 1  |   +----+     | v-node pointer+------+    +-----------+ |
+----------+  |     +--------------------+      |i-node info| |
|    |     |  |                                 |file size  <-+
|    |     |  |                                 |           |
|    |     |  |                                 |i-node     |
|    |     |  |     +--------------------+      +-----------+
|    |     |  |     | file status flags  |
|    |     |  +-----> current file offset|
|    |     |  +     | v-node pointer+------+     +----------+
+----|-----+        +--------------------+ |     +v-node info
                                           +---->+   v-data+-----+
                                                 +----------+    |
                                                                 |
                                                +-----------+    |
                                                |i-node info|    |
                                                |file size  <----<
                                                |           |
                                                | i-node    |
                                                +-----------+
#+end_example

Normally, each process that opens the same file gets its own file table entry
(which indicates the status of a file opening). Every process has its
own file table entry (*file description*) with its own current file offset.
The v-node is shared.
The offset changes as the process write. When the offset goes beyond the file size,
the i-node entry is set to the current file offset thus and the file is
extended.

It is possible for more than one file desciptor entry to point to the
same file table entry:

- =dup()= and =dup2()= duplicate an existing file
descriptor. These duplicated file descriptors share the same file table
entry.

- the =fcntl= function.

- Opening or creating =/dev/fd/n= is identical to duplicate the
corresponding file descriptor. The main use of =/dev/fd/n= is from the
shell to allow programs that use pathname arguments to handle standard
input and standard output in the same manner as other pathnames.

  #+begin_src sh
filter file2 | cat file1 /dev/fd/0 file3 | lpr # sometimes a better choice for `-` and pipeline
  #+end_src

- after a =fork=

To summarize, a file table entry (maintained by the kernel) is
associated with a file descriptor of a certain process. The v-nodes are
shared, maintained by the kernel.


** File Operations

*** Open a file

The kernel maps the file name to the actual inode and loads the inode metadata into the memory, prepares the inode for any further operations

These two functions seem simple in their signatures but they offers a variety of operations
on files and are not meant to be underestimated.

- =open=

- =openat=: use relative pathnames to open files in directories other than the
  current working directory.
  + The key feature of this function is not simply opening a file relative to a
    specified path, but a certain opened directory file descriptor.
  + it provides a way to avoid time-of-check-to-time-of-use errors: the
    reference directory cannot be deleted and its filesystem cannot be unmounted
    due to a reference to the directory and the reference point is always the
    specified directory, not afected by the current working directory change.
    Even if the reference directory is deleted, it would fail instead of opening
    a file in a substitute new directory with the same path.

A few flags are defined

- file access flags (required): read-only, write-only, exec-only, read-write,

- file creation flags (append, create, truncate, creation fails on an existing file): only affect the =open= operation
  + Note that =O_CREAT= only creates a file when the file does not exist. To
    restrict the function to create-only, add =O_EXCL= to return an error if the
    file already exists. This check-creation-error operation is atomic.
  + the permissions placed on a newly-created file depends on the mode flags,
    the process =umask= and the optionally present default ACL of the parent
    directory by ANDing the =mode= argument with the complement of the process's =umask=.
  + to avoid following a symlink, especially in a privileged program to avoid
    security issues, use =O_NOFOLLOW=.

- file status flags: subsequent other operations

Note that the append mode is not a replacement for =lseek= before each wrwite,
rather, it implies a atomic combination of seeking to the end and writing.
Every write is sure to append.

The file descriptor returned by =open= and =openat=
is guaranteed to be the lowest-numbered unused descriptor.

*** Create a File

Aside from =open=, a new file can also be created by calling the =creat=
function. It's equivalent to =open(path, O_WRONLY | O_CREAT | O_TRUNC, mode)=. This
syscall is somewhat redundant. One deficiency with =creat= is that the
file is opened only for writing.

*** Close a File

After finish file operations on a file, it should be closed. An open file is closed by calling the =close= function.

Closing a file also releases any record locks that the process may have on the
file. A deleted file is not deleted until all its file descriptors are closed.

When a process terminates, all of its open files are closed
automatically by the kernel.

=close= does not guarantee a flush to the underlying hardware. Use =fsync= for that.

=close='s result may report any error condition not reported by previous
operations due to deferred writes.

*** Seeking within a File

Compared to a head reading a tape,
Every open file has an associated 'current file offset', an integer relative to
the beginning or the end of the file, at which byte the next read and write operations
normally start. On Linux 5.1 64-bit, =off_t= is by default 64-bit long. The
first byte of the file is at offset 0.

By default, this offset is initialized to 0
when a file is opened, unless the =O_APPEND= option is specified. A open
file's offset can be set explicitly by calling =lseek=. We can seek zero
bytes from the current position to determine the current offset, or to
determine if a file is capable of seeking.
File writes cannot go before the beginning of the file.

Not every file is seekable. Pipes, FIFOs, sockets are not. The standard input is
seekable. For regular files, the returned offset must be
non-negative.

**** Hole

The file's offset can be greater than the file's current
size, in which case the next =write= will extend the file, creating a
hole in the file and is allowed. The hole are read back as 0 (=\0=). The hole
may or may not have storage on disk which doesn't allocate disk.

Not every filesystem supports file holes: VFAT does not. For these filesystems,
disk space is allocated and explicit null bytes are written to the file.

*** Read a File

Data is read from an open file with the =read= function. The number of
bytes actually read might be less than the amount requested depending on the
actual device type, number of data available in the file or the underlying
buffer:

a file may reach its EOF; a socket has buffers; a terminal device  may be
line-oriented; a pipe or FIFO may have fewer bytes available; a device may be
record-oriented; the read may be interrupted by a signal. There is a difference
between "no data available" and "end of data". In the case of "no data
available", the call blocks until there is data.


The current offset is incremented by the number of actual read bytes before a
successful return.

The reason why =ssize_t= is introduced is that they can either represent a byte
count or a negative error condition.

*** Write a File

Data is writen to an open file with =write= funciton. A common cause for a
partial write
error is either filling up a disk or the buffer is full (for a socket).

The kernel caches read/write and may reorder write requests to the underlying
hardware as it sees fit for performance' reason during *writebacks*, which would
normally not be a problem unless the system crashes.
Only databases care about the ordering and data consistency on the disk.
Deferred writes also defers or even prevents the reporting of write errors and
that is why synchronized I/O exists.

The delay time can be configured via =/proc/sys/vm/dirty_expire_centisecs=.

*** =ioctl= function
:PROPERTIES:
:CUSTOM_ID: ioctl-function
:END:
The =ioctl= function has always been the catchall for I/O operations.
The system provides generic =ioctl= commands for different classes of
devices. Any functionalities not provided by the five basic functions are
usually provided here.


** Nonblocking I/O

Yes, AIO is non-blocking but here by non-blocking we are talking about
=O_NONBLOCK=. In the kernel or at the hardware level, there are still blocking
or non-blocking abstraction or mechanism (DMA, even blocking ops at the ISA level while reading I/O registers),
though they are outside the scope of the note.

POSIX nonblocking I/O simply means the call would not block if the I/O is not ready.
It has nothing to do with asynchronous I/O, where an I/O request is always sent and
the thread goes on with other work. Nonblocking I/O simply tells the caller
that I/O operations are currently not ready and thus not permitted and that you
should try again later.
Blocking mode refers to "waiting until a file descriptor can be written to or
read from". It means different things for different kinds of files:

- for sockets: the receive buffer has data or the send buffer is not full. The
  exact condition depends on the underlying protocol.

- for pipes/FIFOs/terminals: there is some data to read (write) or the other side is trying
  to write (read)

- *regular files are always readable and writable* and that is why =O_NONBLOCK=
  on regular files result in error because they never truly block for data: just
  some time is needed to read them from the filesystem and the time is always
  required to spend on the thread unless one can request the data while doing
  other work, which is called asynchronous I/O. If a read/write requires some
  time to finish even if there is data available, the thread will wait on the
  syscall to return. Nonblocking I/O does not deal with the difference between
  data that are immediately available and data that requires some effort. POSIX
  AIO comes in to solve the lack of nonblocking file I/O.

If no data is available, =EAGAIN= or =EWOULDBLOCK= (for sockets) is set as the
error number. Various manpages says about =EAGAIN=

#+begin_quote
and the thread would be delayed in the read operation.
#+end_quote

What it actually means "it would normally block without the nonblocking flag". =EAGAIN=
actually "resource temporarily unavailable, try again".

The point of nonblocking I/O is to catch the =EAGAIN= and do other useful work.

** I/O efficiency
:PROPERTIES:
:CUSTOM_ID: io-efficiency
:END:

Most file systems support some kind of read-ahead to improve
performance. When sequential reads are detected, the system tries to
read in more data than an application requests, assuming that the
application will read it shortly.

Beware when trying to measure the performance of programs that read and
write files. The operating system will try to cache the file incore (in
main memory), so if you measure the performance of the program
repeatedly, the successive timings will likely be better than the first.

The buffer size of a simple program of copying data should be around 8K to 16K as of Linux 4.19 on a Aarch64 machine.

** Atomic I/O Operation
:PROPERTIES:
:CUSTOM_ID: atomic-operation
:END:

Atomicity here means for IO, the syscall either succeeds or does nothing
at all.

*** Concurrent Appending

If two processes/threads are appending the same file, an =lseek= followed by a
=write= may write to a region already written by another process/thread.

The positioning to the current end of file and the write should be an
atomic operation with regard to other processes. The UNIX system
provides an atomic way to do this if we set the =O_APPEND= when a file
is opened.

*** Atomic Check and Create

=open= a file with =O_CREAT= and =O_EXCL=. If no file is found, it is created
otherwise an error is raised. This atomic operation avoids overwriting a newly
created file immdiately after the check.

*** General Atomic Seek-Read/Write

The SUS includes two functions that allow applications to
seek and perform I/O atomically (simply because they are not affected by the
current file offset): =pread= and =pwrite=.

The =pread()= and =pwrite()= system calls are especially useful in
multi-threaded applications. They allow multiple threads to perform I/O
on the same file descriptor without being affected by changes to the
file offset by other threads. Neither changes the current file offset.
(Linux bugs) =pwrite= is affected by =O_APPEND= on Linux.

*** Close-On-Exec

An =O_CLOEXEC= in =open= prevents race conditions where one thread is forking and exec-ing
before another thread =fcntl= a file descriptor to close-on-exec.

*** Atomicity of read/write

By [[https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_09_07][Threaded Interactions with Regular File Operations]], reads and writes on
regular files are atomic and do not interfere with each other in a multithreaded
process.

Between processes, the guarantee is weaker:

#+begin_quote
Writes can be serialized with respect to other reads and writes. If a read() of
file data can be proven (by any means) to occur after a write() of the data, it
must reflect that write(), even if the calls are made by different processes. A
similar requirement applies to multiple write operations to the same file
position. This is needed to guarantee the propagation of data from write() calls
to subsequent read() calls. This requirement is particularly significant for
networked file systems, where some caching schemes violate these semantics.
#+end_quote


** Cache, delayed write
:PROPERTIES:
:CUSTOM_ID: cache-delayed-write
:END:
Traditional implementations of the UNIX System have a buffer cache or
page cache in the kernel through which most disk I/O passes. When
writing data to a file, the data is normally copied by the kernel into
one of its buffers and queued for writing to disk at some later time.

The =sync=, =fsync= and =fdatasync= (in case for optimization) are provided to ensure consistency
of the file system on disk with the contents of the buffer cache.

The function =sync= is normally called periodically (usually every 30
seconds) from a system daemon.

* Standard I/O
:PROPERTIES:
:CUSTOM_ID: standard-io
:END:
The standard I/O library handles details such as buffer allocation and
performing I/O in optimal-sized chunks. The standard I/O centers on
streams.

A stream is associated with a file. Standard I/O file streams can be
used with both single-byte and multibyte character sets. A stream's
/orientation/ determines whether the character that are read and written
are single byte or multibyte. Initially, a created stream has no
orientation. The =fwide= function sets a stream's orientation. A stream
is represented by a =FILE= object.

** Buffering
:PROPERTIES:
:CUSTOM_ID: buffering
:END:
Three types of buffering are provided:

- Fully buffered: Files on disk are normally fully buffered by the
  standard I/O library, usually through =malloc=. /Flush/ describes the
  writing of a standard I/O buffer.

- Line buffered: performs I/O when a newline character is encountered on
  input or output. A terminal is usually line buffered. A line might be
  longer than the buffer and thus I/O might take place before writing a
  newline. whenever input is requested through the standard I/O library
  from either an unbuffered stream or a line-buffered stream (that
  requires data to be requested from the kernel), all line-buffered
  output streams are flushed.

- Unbuffered: =stderr= so that error messages can be displayed as
  quickly as possible.

On most implementations, =stderr= is always unbuffered. All other
streams are line buffered if they refer to a terminal device, otherwise
they are fully buffered. =setbuf= and =setvbuf= can change the buffering
of a certain stream. In general, we should let the system choose the
buffer size and automatically allocate the buffer.

=fflush()= force a stream to be flushed.

** Open a stream
:PROPERTIES:
:CUSTOM_ID: open-a-stream
:END:
The =fopen=, =freopen=, =fdopen= functions open a standard I/O streams.
=fdopen= takes an existing file descriptor, obtained from =open=, =dup=,
=dup2=, =fcntl=, =pipe=, =socket=, =socketpair= or =accept= and
associate a standard I/O stream with the descriptor, often used with
descriptors returned by the functions that create pipes and network
communication channels. =b= mode has no effect on any POSIX OSes. When
in read/write mode, output cannot be directly followed by input without
an intervening =fflush()=, =fseek=, =fsetpos= or =rewind=; input cannot
be directly followed by output without an intervening =fseek=,
=fsetpos=, =rewind= or an input operation that encounters an end of
file. POSIX.1 requires implementation to create the file with the
=S_IRUSR | S_IWUSR | S_IRGRP |  S_IWGRP |  S_IROTH | S_IWOTH=. However,
we can restrict permissions by adjusting =umask= value.

An open stream is closed by =fclose=. Any buffered output data is
flushed before the file is closed. Any input data that may be buffered
is discarded. When a process terminates normally, all standard I/O
streams with unwritten buffered data are flushed and all open standard
I/O streams are closed.

** Reading and Writing a Stream
:PROPERTIES:
:CUSTOM_ID: reading-and-writing-a-stream
:END:
- Character-at-a-time: =getc()=, =fgetc()=, =getchar()=; to distinguish
  the error they return, use =ferror()= and =feof()=; =clearerr()=
  clears these errors. After reading from a stream, we can push back
  characters by calling =ungetc()=. =putc()=, =fputc()=, =putchar()=
  output characters.

- Line-at-a-time: input: =fgets()=, =gets()= (never use it). output:
  =fputs()=, =puts= (not unsafe, but should be avoided).

- Direct I/O (binary): common use: read or write a binary array; read or
  write a structure

#+begin_src C
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);

size_t fwrite(const void *ptr, size_t size, size_t nmem
b, FILE *stream);
#+end_src

A fundamental problem with binary I/O is that it can be used to read
only data that has been written on the same system since they have
different byte order and memory alignment.

** Positioning a Stream
:PROPERTIES:
:CUSTOM_ID: positioning-a-stream
:END:
- =ftell=/=fseek=/=rewind= (ISO C): =long= file position;

- =ftello=/=fseeko=: =off_t= (larger than 32 bits);

- =fgetpos=/=fsetpos= (ISO C): =fpos_t=, as big as necessary to record a
  file's position.

** Formatted I/O
:PROPERTIES:
:CUSTOM_ID: formatted-io
:END:
#+begin_src C
       #include <stdio.h>

       int printf(const char *format, ...);
       int fprintf(FILE *stream, const char *format, ...);
       int dprintf(int fd, const char *format, ...);
       int sprintf(char *str, const char *format, ...);
       int snprintf(char *str, size_t size, const char *format, ...);
#+end_src

#+begin_src C
       int vprintf(const char *format, va_list ap);
       int vfprintf(FILE *stream, const char *format, va_list ap);
       int vdprintf(int fd, const char *format, va_list ap);
       int vsprintf(char *str, const char *format, va_list ap);
       int vsnprintf(char *str, size_t size, const char *format, va_list ap);
#+end_src

#+begin_src C
       #include <stdio.h>

       int scanf(const char *format, ...);
       int fscanf(FILE *stream, const char *format, ...);
       int sscanf(const char *str, const char *format, ...);

       #include <stdarg.h>

       int vscanf(const char *format, va_list ap);
       int vsscanf(const char *str, const char *format, va_list ap);
       int vfscanf(FILE *stream, const char *format, va_list ap);
#+end_src

** Implementatin Details
:PROPERTIES:
:CUSTOM_ID: implementatin-details
:END:
=fileno()= obtains the descriptor for a stream. We need this function if
we want to call the =dup= or =fcntl= functions.

** Temporary Files
:PROPERTIES:
:CUSTOM_ID: temporary-files
:END:
#+begin_src C
       char *tmpnam(char *s); // generates a tmp file name
       FILE *tmpfile(void); // create such a file
#+end_src

The standard technique often used by the tmpfile function is to create a
unique pathname by calling tmpnam, then create the file, and immediately
unlink it.

#+begin_src C
char *mkdtemp(char *template);
int mkstemp(char *template);
int mkostemp(char *template, int flags);
int mkstemps(char *template, int suffixlen);
int mkostemps(char *template, int suffixlen, int flags);
#+end_src

Use of tmpnam and tempnam does have at least one drawback: a window
exists between the time that the unique pathname is returned and the
time that an application creates a file with that name. During this
timing window, another process can create a file of the same name. The
=tmpfile= and =mkstemp= functions should be used instead, as they don't
suffer from this problem.

** Memory Streams
:PROPERTIES:
:CUSTOM_ID: memory-streams
:END:
The SUS adds support for memory streams, standard I/O streams for which
there are no underlying files. All I/O is done by transferring bytes to
and from buffers in main memory.

#+begin_src C
       FILE *fmemopen(void *buf, size_t size, const char *mode);

       #include <stdio.h>

       FILE *open_memstream(char **ptr, size_t *sizeloc);

       #include <wchar.h>

       FILE *open_wmemstream(wchar_t **ptr, size_t *sizeloc);
#+end_src

If buf is specified as NULL, then =fmemopen()= allocates a buffer of
size bytes. This is useful for an application that wants to write data
to a temporary buffer and then read it back again. The initial position
is set to the start of the buffer. The buffer is automatically freed
when the stream is closed.

Memory streams are well suited for creating strings, because they
prevent buffer overflows. They can also provide a performance boost for
functions that take standard I/O stream arguments used for temporary
files, because memory streams access only main memory instead of a file
stored on disk.
