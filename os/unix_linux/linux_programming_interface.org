* Fundamental Concepts

kernel; kernel mode and user mode; The kernel mediates all critical actions.

Users, groups, superuser.

PID, PPID; privilege; identifiers; capabilities; init; daemons; environment list; resource limits (set by ~setrlimit()~)

memory mappings ~mmap()~; file mapping, anonymous mapping;

static libraries; shared libraries

* System Programming Concepts

- system call: a system call is a controlled entry point into the kernel, allowing a process to request that the kernel perform some action on the process's behalf. A syscall changes the processor state from user mode to kernel mode so that the CPU can access protected kernel memory. Each syscall is identified by a unique number. 

The application program makes a syscall by invoking a wrapper function in the C library. The wrapper accepts arguments and puts them in specific registers. The wrapper function puts the system call number into a specific CPU register. The wrapper executes a trap/sysentr/syscall machine instruction. The kernel invokes its =system_call()= routine to handle the trap. It saves arguments from registers onto the kernel stack, checks the validity of the syscall number and invokes the appropriate syscall service routine. After the service routine returns, the return value is then placed on the stack. Returns to the wrapper. Any error value is set on the global variable =errno=.

- library function: a library function is simply one of the multitude of functions that constitutes the standard C library. Many library functions don't make any use of system calls. Often, library functions are designed to provide a more caller-friendly interface than the underlying system call.

Almost every system call and library function returns some type of status value indicating whether the call succeeded or failed.  This status value should always be checked to see whether the call succeeded

** Error Handling

Almost every syscall and library function returns some type of status value indicating the call succeeded or failed. This status should always be checked to see whether the call succeeded. A few syscalls like =getpid()= or =_exit()= never fail. Successuful syscalls and library functions never reset =errno= to 0. However, a successful funcall is allowed to set =errno= to a nonzero. The guideline is to always check if the function return value indicates an error and only then examine =errno= to determine the cause of the error. A funcion might not set =errno= itself but its callees do.

#+BEGIN_SRC c
  void perror(const char *s); 
  char *strerror(int errnum);
#+END_SRC

** Portability

1. feature test macros in glibc are not for feature testing but to expose the feature.
2. When printing system data type values, always use =long= except for =off_t=, which is =long long=.

* The Universal I/O Model
  
Four key syscalls: =open()=, =read()=, =write()=, =close()=

- =open()=: a file can be opened using a particular file descriptor by some tricks.

File holes are allowed on native UNIX file systems and might save disk space.

=ioctl= is a general-purpose mechanism for performing file and device operations that fall outside the universal I/O model.

* Processes

/process/: an instance of an executing program, defined by the kernel, to which system resources are allocated in order to execute the program. A process contains program code and variables used by the code and a range of kernel data structures that maintain information about the state of the process.

/program/: a file containing a range of information that describes how to construct a process at runtime.
    + binary format identification: COFF, ELF
    + machine instructions
    + Data
    + symbol and relocation tables
    + shared-library and dynamic-linking information
    + other information

** PID
   
Process ID =pid_t=

=getpid()= and =getppid()=. =pstree= show the process family tree. =/proc/PID/status=

** Memory layout of a process
   
section/segment: text segment; initialized data segment; uninitialized data segment; stack; heap (the top end of the heap is called the /program break/).

On most UNIX systems, three symbols =etext=, =edata= and =end= are available for obtaining the addresses of the next byte past of the program text, initialized data segment and the end of the uninitialized data segment.

#+BEGIN_SRC C
 extern char etext, edata, end; 
#+END_SRC

** Virtual Memory

Most programs demonstrates spatial and temporal locality, which makes it possible to execute a program while maintaining only part of its address space in RAM. This isolates processes from one another and from the kernel, provides a way to share memory to save memory and for interprocess communication, faster loading and a memory security mechanism.

Kernel stack is a per-process memory regiion maintained in kernel memory that is used as the stack for execution of the functions called internally during the execution of a syscall.

** =argc=, =argv=

=argv[argc]= is =NULL=; =argv[0]= is different when invoking through different links even if the underlying program is the same.

** Environment List

/environment list/: an associated array of strings that can hold arbitrary information. =printenv=

A child process inherits its parent's environment, which can be a primitive form of IPC. 
 
Within a C program, a global =environ= variable points to a NULL-terminated list of pointers to null-terminated strings.

#+BEGIN_SRC C
  char *getenv(const char *name);
  int putenv(char *string); // string shouldn't be automatically allocated
  int setenv(const char *name, const char *value, int overwrite); // allocate memory
  int unsetenv(const char *name);
  int clearenv(void); // erase the entire environment, it doesn't knonw the buffer provided to putenv
#+END_SRC
 
** Nonlocal goto using =setjmp()= and =longjmp()=
   
Avoid SJLJ where possible!
 
Useful for bailing out of an error.

Calling =setjmp()= establishes a target for a later jump performed by =longjmp()=. By using different return values, we can distinguish jumps to the same target from different points in the program. The return value is forced not to be zero even if specified so. The =env= jump buffer supplies the glue enabling the jump. The =setjmp()= call saves various information about the current process environment into =env=. The =longjmp()= call must specify the same =env= variable. Thus, =env= is declared globally or less commonly as a function argument.

=env= buffer stores the program stack pointer of the function where =setjmp()= resides (to unwind the stack) and the program counter to continue execution from the location of the initial =setjmp()= call.

Using =setjmp()= inside a complex expression is problematic since it does not have the info to save all registers and temporary stack locations used in an enclosing expression.

Long jump to a returned function is a serious mistake since the original stack frame might be gone.

* Memory Allocation
  
A process may grow and shrink the /program break/ (the current limit of the heap) to allocate memory.

#+BEGIN_SRC C
       int brk(void *addr);
       void *sbrk(intptr_t increment);
#+END_SRC

In general, C uses the =malloc= family of functions to allocate and deallocate memory on the heap. They are standardized, thread safe (mutexes are used internally to protect the memory management data structures). The block of memory returned by =malloc()= is always aligned on a byte boundary suitable for any type of C data structure. =free()= doesn't lower the program break (which is actually impossible if the block is in the middle of the heap) but instead adds the block of memory to a list of free blocks that are recycled by future calls to =malloc()=.

The memory allocated is managed by maintaining a doubly linked list of headers at the beginning of each memory block that contains the length of the block, the two pointers.

The following program depicts the behavior the memory manager of =malloc()= and =free()=.

#+BEGIN_SRC C
  #include <stdlib.h>
  #include <stdio.h>
  #include <unistd.h>
  #include <assert.h>

  #include <errno.h>

  #define MAX_ALLOCS 100000

  int main(int argc, char *argv[])
  {
          char *memptr[MAX_ALLOCS];

          if (argc < 3) {
                  fprintf(stderr, "%s num-allocs block-size [step [min [max]]]\n", argv[0]);
                  return 0;
          }
          int num_allocs = atoi(argv[1]);
          int block_size = atoi(argv[2]);

          int free_step = (argc > 3) ? atoi(argv[3]) : 1;
          int free_min = (argc > 4) ? atoi(argv[4]) : 1;
          int free_max = (argc > 5) ? atoi(argv[5]) : num_allocs;
          if (free_max > num_allocs) 
                free_max = num_allocs;

          void *init_brk = sbrk(0);
          printf("Initial program break %10p\n", init_brk);
          printf("Allocating %d*%d bytes\n", num_allocs, block_size);

          for (int j = 0; j < num_allocs; j++) {
                  memptr[j] = malloc(block_size);
                  if (memptr[j] == NULL) {
                          fprintf(stderr, "Failed on malloc()\n");
                          return ENOMEM;
                  }
          }

          void *malloc_brk = sbrk(0);
          printf("Current program break %10p, %ld KB grown\n", malloc_brk, (malloc_brk - init_brk) / 1024);

          for (int j = free_min; j < free_max; j += free_step)
                  free(memptr[j]);

          void *free_brk = sbrk(0);
          printf("After freeing program break %10p, %ld KB shrinked\n", free_brk, (malloc_brk - free_brk) / 1024);

          return EXIT_SUCCESS;
  }

#+END_SRC


glibc provides some tools to debug memory issues.
1. =mtrace()=, =muntrace()=: turn tracing of memory allocation calls on and off. Calls to =mtrace()= are ignored by set-user-ID and set-group-ID programs.
2. =-lmcheck=, =mcheck()=, =mprobe()=: perform consistency checks on block of allocated memory.
3. =MALLOC_CHECK= envvar controls how a program responds to memory allocation.

Other tools include /Electric Fence/, /dmalloc/, /Valgrind/, and /Insure++/.

=mallopt()= and =mallinfo()= are glibc functions for controlling and monitoring =malloc()=

=posix_memalign()=, =aligned_alloc()=,m =memalign()= are for aligned memory allocation.

=alloca()= allocates memory on the stack, present on most UNIX implementations. =alloca()= can be fast since it allocates memory on the stack, which only requires the stack pointer to move a bit. Using =alloca()= might be useful with SJLJ.

* Users and Groups
  
#+BEGIN_SRC C
struct passwd *getpwent(void);
void setpwent(void);
void endpwent(void);
#+END_SRC

  
** =/etc/passwd=
   
1. Login name (username): it is possible to one UID to have multiple login names that associated with different sets of groups.
2. Encrypted password (shadowed by shadow passwords)
3. UID
4. GID: primary group
5. comment
6. home directory
7. login shell

Within a system like NIS (Network Information System) or LDAP (Lightweight Directory Access Protocol), part or all of this information is stored on a remote system.

#+BEGIN_SRC C
struct passwd *getpwnam(const char *name);
struct passwd *getpwuid(uid_t uid);
#+END_SRC


** =/etc/shadow=
   
Contains encrypted passwords and is readable only the privileged programs.

#+BEGIN_SRC C
struct spwd *getspnam(const char *name);
struct spwd *getspent(void);
void setspent(void);
void endspent(void);
#+END_SRC
 

** =/etc/group=

- group name
- encrypted password (not actually useful nowadays)
- GID
- user list

#+BEGIN_SRC C
struct group *getgrnam(const char *name);
struct group *getgrgid(gid_t gid);
#+END_SRC

** Authenticating a User
   
#+BEGIN_SRC C
char *crypt(const char *key, const char *salt);
char *getpass(const char *prompt);
#+END_SRC

#+BEGIN_SRC C
 #define _XOPEN_SOURCE

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <pwd.h>
#include <shadow.h>
#include <sys/types.h>
#include <unistd.h>

#include <errno.h>

int main(int argc, char *argv[])
{
        long login_name_max = sysconf(_SC_LOGIN_NAME_MAX);

        char *username = malloc(login_name_max + 1);
        if (username == NULL)
                return -1;

        printf("Enter User Name:");
        char *un = fgets(username, login_name_max, stdin);
        if (un == NULL)
                goto cleanup;

        size_t name_len = strlen(username);
        if (username[name_len-1] == '\n')
                username[name_len-1] = '\0';

        char *passwd_clear = getpass("Enter Password:");
        if (passwd_clear == NULL)
                goto cleanup;

        struct spwd *pwd =  getspnam(username);
        if (pwd == NULL)
                goto cleanup;

        char *crypted_passwd = crypt(passwd_clear, pwd->sp_pwdp);
        if (strcmp(crypted_passwd, pwd->sp_pwdp) == 0) {
                printf("You've logged in but you just can't do anything\n");
        } else {
                printf("You are rejected!\n");
        }

        return 0;

        cleanup:
                free(username);
        return -2;


}
 
#+END_SRC

* Process Credentials
  
=/etc/PID/status= for real, effective, saved, and filesystem IDs of a process.

#+BEGIN_SRC C
    // for setting effective IDs
    int setuid(uid_t uid); // may change real and saved IDs, there are some subtle rules behind this
    int setgid(gid_t gid);

    int setreuid(uid_t ruid, uid_t euid);
    int setregid(gid_t rgid, gid_t egid);
    // nonstandard
  
    #define _GNU_SOURCE         /* See feature_test_macros(7) */

    int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
    int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
    int setresuid(uid_t ruid, uid_t euid, uid_t suid);
    int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
#+END_SRC


** Real User ID and Real Group ID
   
Identify the User and Group to Which the Process Belongs

#+BEGIN_SRC C
uid_t getuid(void);
gid_t getgid(void);
#+END_SRC

   
** Effective User ID and Effective Group ID
   
Used to determine the permissions granted to a process when it tries to perform various operations: a process whose effective user ID is 0 has all of the privileges of the superuser. Normally, the effective user ID and group ID have the same values as the corresponding real ID. To assume different values, 
  1. use some syscalls
  2. execute set-user-ID and set-group-ID programs
 
#+BEGIN_SRC C
  uid_t geteuid(void);
  gid_t getegid(void);

  int seteuid(uid_t euid); // perferred for set-UID-root programs to temporarily drop root privilege
  int setegid(gid_t egid);
#+END_SRC


** Set-User-ID and Set-Group-ID Programs
   
A set-user-ID program allows a process to gain privileges by setting the process's effective user ID to the same value as the user ID (owner) of the executable file.

** Saved Set-UID and Saved Set-GID
   
Various syscalls calls allow a set-UID program to switch its effective user ID between the values of the real user ID and the saved set-user-ID. A program can temporarily drop and regain whatever privileges are associated with the user (group) ID of the =exec=-ed file. It is a secure programming practice for set-UID and set-GID programs to operate under the unprivileged ID whenever the program doesn't actually need to perform any operations associated with the privileged ID.

** Filesystem UID and Filesystem GID (Mainly for historic reason)
   
On Linux, it is the filesystem user and group IDs in conjunction with the supplementary group IDs that are used to determine permissions when performing filesystem operations.

Normally, they are of the same values as the effective IDs. Unless these two syscalls are used.

#+BEGIN_SRC C
  int setfsuid(uid_t fsuid);
  int setfsgid(uid_t fsgid);
#+END_SRC
 
** Supplementary GID
   
A new process inherits these IDs from its parent.

#+BEGIN_SRC C
  int getgroups(int size, gid_t list[]);
  int setgroups(size_t size, const gid_t *list);
  int initgroups(const char *user, gid_t group);

#+END_SRC
