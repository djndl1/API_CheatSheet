#+title: Security

* Users and Groups

#+begin_quote
The primary purpose of user and group IDs is to determine ownership of various
system resources and to control the permissions granted to processes accessing
those resources.
#+end_quote

** Users

User information are stored in =/etc/passwd=, with passwords in =/etc/shadow=.
However, some or even all information may be stored in
remote systems (Network Information System or Lightweight Directory Access Protocol).

The [[man:passwd(5)][passwd]] file typically contains one line or each user account (the same
user may have different login names and thus multiple lines).

- =/etc/passwd=
  - *login name* (username)
  - *Optional encrypted password* (shadowed by shadow passwords)
  - *User ID*
  - *Group ID*: primary group
  - *comment*
  - *home directory*: used by [[man:login(1)][login]] to set =$HOME=
  - *optional login shell*: =$SHELL=

- =/etc/shadow=: the [[man:shadow(5)][shadow]] file
  - *login name*
  - *optional encrypted passwd*
  - *date of last password change*
  - *minimum password age*
  - *maximum password age*: time period before expiration
  - *password warning period*: warning time period before expiration
  - *password inactivity period*: buffer time period after expiration before login is forbidden
  - *account expiration date*: the user shall not be allowed to login, with any pasword.

- =getpwnam*=, =getpwuid*=


#+BEGIN_SRC C
struct passwd *getpwent(void);
void setpwent(void);
void endpwent(void);
#+END_SRC


** =/etc/shadow=

Contains encrypted passwords and is readable only the privileged programs.

#+BEGIN_SRC C
struct spwd *getspnam(const char *name);
struct spwd *getspent(void);
void setspent(void);
void endspent(void);
#+END_SRC


** =/etc/group=

- group name
- encrypted password (not actually useful nowadays)
- GID
- user list

#+BEGIN_SRC C
struct group *getgrnam(const char *name);
struct group *getgrgid(gid_t gid);
#+END_SRC

** Authenticating a User

#+BEGIN_SRC C
char *crypt(const char *key, const char *salt);
char *getpass(const char *prompt);
#+END_SRC

#+BEGIN_SRC C
 #define _XOPEN_SOURCE

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <pwd.h>
#include <shadow.h>
#include <sys/types.h>
#include <unistd.h>

#include <errno.h>

int main(int argc, char *argv[])
{
        long login_name_max = sysconf(_SC_LOGIN_NAME_MAX);

        char *username = malloc(login_name_max + 1);
        if (username == NULL)
                return -1;

        printf("Enter User Name:");
        char *un = fgets(username, login_name_max, stdin);
        if (un == NULL)
                goto cleanup;

        size_t name_len = strlen(username);
        if (username[name_len-1] == '\n')
                username[name_len-1] = '\0';

        char *passwd_clear = getpass("Enter Password:");
        if (passwd_clear == NULL)
                goto cleanup;

        struct spwd *pwd =  getspnam(username);
        if (pwd == NULL)
                goto cleanup;

        char *crypted_passwd = crypt(passwd_clear, pwd->sp_pwdp);
        if (strcmp(crypted_passwd, pwd->sp_pwdp) == 0) {
                printf("You've logged in but you just can't do anything\n");
        } else {
                printf("You are rejected!\n");
        }

        return 0;

        cleanup:
                free(username);
        return -2;


}

#+END_SRC
