#+title: Dll


Save memory, save disk space, no need to rebuild and dynamic resolution

1. Library functions are linked at program load time or at run time.

2. DLLs are used to create shared libraries.

3. easy to update

The entire Windows API is supported by a DLL that invokes the Windows
kernel for additional services. Since DLLs might be used by multiple
processes, it should be thread-safe.

* Implicit Linking (Load Time)
   :PROPERTIES:
   :CUSTOM_ID: implicit-linking
   :END:

A =.LIB= (stubs for calling the real subroutines) when building the
calling program; =DLL= for functions when executing the calling program;
A DLL file that contains the executable image, placed in the same
directory as the application.

An exported function in DLL must be annotated with =__declspec(dllexport)=
during building (typically used in the form the =MYLIBRARYNAME_EXPORTS= macro)
and =__declspec(dllimport)= for client code.

A =.DEF= file may be used instead.
CMake is able to generate such a =.def= file without explicitly annotating each
visible function.

The search path is

- =.=: the application directory

- the system directory (=GetSystemDirectory=), typically
  =C:\Windows\System32=

- The Windows Directory =GetWindowsDirectory=

- the current directory

- =%PATH%=

** Symbol Visibility

Not every non-static function should be exported from a shared library.
Also import annotations provide some optimization hint so that
trampolines are not generated.

For MINGW, no =.def= or import/export annotation is required as long as the
symbols are exported in the DLL. Also =gendef= is
included in MINGW to generate a definition file for use with other toolsets.
=dlltool= in MINGW can generate an import library from a def file or directly by GCC.

MSVC cannot directly link with an DLL and requires an import library.
Typically MSVC generates an import library for an DLL's exported symbols.
Export annotations or a def file is mandatory for MSVC to export any symbol.
Import annotations are optional for function declarations, but mandatory to
access data symbols and objects for MSVC as well but
[[https://learn.microsoft.com/en-us/cpp/build/importing-into-an-application-using-declspec-dllimport?view=msvc-170][including them produces more efficient code]].

Static libraries are simply archived combined object files.
Symbols in static libraries on Windows have different names for the client code
to use than those in DLLs. So the client code should not use =dllimport=.

* Explicit Linking (Dynamic loading)
   :PROPERTIES:
   :CUSTOM_ID: explicit-linking-dynamic-loading
   :END:

=LoadLibrary=, =LoadLibraryEx=; =GetModuleFileName=, =GetModuleHandle=.

The system maintains a reference count to each DLL loaded. If the DLL is
implicitly linked other DLLs that cannot be located, the loading fails.

The address of any entry point can be queried by =GetProcAddress=.

=FreeLibrary= after using it.

* The DLL Entry Point
   :PROPERTIES:
   :CUSTOM_ID: the-dll-entry-point
   :END:

The entry point (typically =DllMain=) is invoked automatically every time a
process attaches or detaches the DLL or a new thread is created or
terminated, specified by users. The entry point is supposed to manage resources
and thread-local storage in thread-safe DLL (during thread initialization/termination).

* Versioning
   :PROPERTIES:
   :CUSTOM_ID: versioning
   :END:

1. DLL version number as part of the file names, typically used by UNIX
   applications.

2. side-by-side DLLs or assemblies and components. An XML manifest is
   added to the applications to define the DLL requirements.

=DllGetVerion=

** Side-By-Side Assembly (Since Windows XP)

Multiple versions of a DLL are stored in =%SYSTEMROOT%\WinSxS= (called Windows
Component Store) and loaded on demand. Side-by-side assembly can be used to
develop applications that safely share OS assemblies and reduce DLL versioning conflicts.

- *Code assembly* :: a fundamental unit for naming, binding, versioning, deploying or
  configuring a block of programming code.
  + side-by-side assemblies are code assemblies described by *manifests* and
    authored so that multiple versions may run at the same time without
    conflicting with each other.

*** Windows Component Store

The Windows Component Store initially only supported side-by-side assembly,
later enhanced (since Vista) to track and
service al of the components that make up the OS such as files, directories,
registry keys and services. Updates, rollback, disabled features are also
managed by the component store. The WCS is more like an index rather than an actual
directory of various files. It uses hard links to track the usage of components,
making it seem larger than it actually is.

To determine the actual size of the component store:

#+begin_src shell
Dism.exe /Online /Cleanup-Image /AnalyzeComponentStore
#+end_src

WinSxS is also managed by internal processes to reduce the size, such as
removing obsolete components after a period time (by Task scheduler's
=StartComponentCleanup= task). Use =Dism.exe= manually to reduce the size

#+begin_src shell
Dism.exe /online /Cleanup-Image /StartComponentCleanup [/ResetBase]
#+end_src
