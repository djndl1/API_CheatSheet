* Features & Mechanism Overview

** Permissions Can Be Applied to All Shareable Resources
   :PROPERTIES:
   :CUSTOM_ID: nearly-all-sharable-objects-can-be-protected.
   :END:

Nearly any object created with a =CreateXYZ= function has a security
attributes parameter =SECURITY_ATTRIBUTES=, including files, processes,
threads, events, semaphores, named pipes and so on.

An individual process is identified by its /access token/, which
specifies the owning user and group membership. The kernel decides
whether the processs can access an object by combining the token and the
information from the security descriptor of the object.

** Encrypted File System

TODO

** Native Kerberos Authentication

TODO

** Public Key Infrastructure For Digital Certificates

TODO

** Builtin Crypto-APIs

* Components

** Local Security Authority (LSA, user mode)

- =Lsass.exe= user-mode process that implements policies (password, logon),
  authentication, and sending audit records to the security event log.

- =HKLM:\SECURITY=: LSASS policy datbase.

*** SAM Service

- =System32\Samsrv.dll=: a set of subroutines responsible for managing the
  database that contains usernames and groups on the local machine.

- SAM database =HKLM\SAM=: defined local users and groups, passwords and other attributes.

*** Active Directory

A directory service (=System32\Ntdsa.dll= runs in the Lsass process)
with a database that stored information about objects in a domain.

- *domain* :: a collection of computers and their associated security groups
  managed as a single entity.

*** Authentication Packages

DLLs that run in the Lsass process and implement windows authentication policys.

- *LanMan*: =System32\Msvc1_0.dll=

- *Kerberos*: =System32\Kerberos.dll=

- Negotiate: uses either of above depending on which is appropriate

*** NetLogon (For legacy)

A Windows service (=System32\Netlogon=) that runs inside Lsass and responds to
Microsoft LAN Manager 2 Windows NT (pre-Windows 2000) network logon requests.

Authentication is handled as local logons are by sending them to Lsass for verification.

*** Logon Process (Winlogon)

A user-mode process =Winlogon.exe= responsible for responding to *Secure
Attention Sequence* and for managing interactive user sessions.

*** Graphical Identification & Authentication (GINA)

A user-mode DLL =System32\Msgina.dll= in the Winlogon process, used to obtain a
user's name and password or smart card PIN.

** Security Reference Monitor (SRM, kernel mode)

As group of functions in =Ntoskrnl.exe=

Access to an object is gated by SRM.

- Access Validation: check who is requesting the access (token), what it wants
  to do (desired access) and what it is allowed to do(security descriptor)
  + performed upon opening an object
  + all *desired access* must be specified and checked
  + security *token* (which identifies the user (user SID, group SIDs) and its privilege) is checked
  + Object's *Security Descriptor* contains a DACL that describes the types of
    allowed access to the object users
  + A resource handle is returned to the requesting process after access
    validation.

-  privilege manipulation;

- audit messages
    + An administrator can enable it with =secpol.msc= and then view it in
      the event log viewer.

LSA communicates with SRM via ALPC.

* Access Control Lists
  :PROPERTIES:
  :CUSTOM_ID: access-control-lists
  :END:

Requested desired access is checked against preconfigured permission settings of
an object (ACLs).
An object has its *security descriptor* to describe its status in the security
system. The security descriptor includes ACLs: A set of access control entries
for access *allowed* and for access *denied*.

- *Access Control Entry (ACE)*
  +  /SID/
  + /access mask/: specifies rights to be granted or denied to the user or group
    specified by the SID. e.g. =Deny/Allow-SID-Read/Write/All/Full Control/Execute=

- *Desired access*: a list of requested access, not a single one, e.g. read,
  write ,execute, full control

- Access validation process: desired access is checked against each entry with matching SIDs.
  ACEs in the DACL are examined in order. For each *desired access*, The first
  entry that specifically grants or denies the requested service is decisive. For
  a desired access, if no entry mention has mentioned it, it is denied.

- Entry order: Low-level APIs may arrange ACEs in any order. All security editors interfaces
  and higher-level APIs order ACEs with denies before allows, that is, denies
  override allows.

- Exceptions:
  + the owner can always read and modify the ACL.
  + An account with "take ownership" privilege can claim ownership of any object.
  + An account with backup privilege can read any file.
  + An account with restore privilege can write any file.

requests access to the object when it asks for a handle. The handle
requested contains the desired access.

Inheritance is controllable. Directly applied ACEs take precedence over
inherited ACEs.

** The Security Descriptor

Associated with objects.
A security descriptor contains:

1. the owner's security identifier (SID)

2. the primary group SID

3. Discretionary access control list (DACL): a list of entries
   explicitly granting and denying access rights.

4. System ACL

** Creating the Security Descriptor
   :PROPERTIES:
   :CUSTOM_ID: creting-the-security-descriptor
   :END:

#+BEGIN_SRC C
  BOOL InitializeSecurityDescriptor();
#+END_SRC

** Security Identifiers (SIDs)
   :PROPERTIES:
   :CUSTOM_ID: security-identifiers-sids
   :END:

Windows uses SIDs to identify users, groups, computers, domains, similar to
Unix's UID and GID.

SIDs consist of a revision level, an identity-authority value and one or more
subauthority values, long enough to be globally unique. SIDs of local users and
groups are rooted with the computer SID with a *Relative Identifier* (RID) at
the end. A few local users and groups have predefined SIDs and RIDs.

#+BEGIN_SRC C++
BOOL LookupAccountNameW();
BOOL LookupAccountSidW();
BOOL GetUserNameW();
#+END_SRC

Once the SIDs are known, they can be used to fill in the security
descriptor structure.

#+BEGIN_SRC C++
BOOL SetSecurityDescriptorOwner();
BOOL SetSecurityDescriptorGroup();
#+END_SRC

** Managing ACLs
   :PROPERTIES:
   :CUSTOM_ID: managing-acls
   :END:

*** Create an ACL
    :PROPERTIES:
    :CUSTOM_ID: create-an-acl
    :END:

The program must provide a buffer to serve as the ACL. 1KB is more than
adequate for most purposes.

#+BEGIN_SRC C++
  BOOL InitializeAcl(
    PACL  pAcl,
    DWORD nAclLength,
    DWORD dwAclRevision
  );
#+END_SRC

*** Adding ACEs
    :PROPERTIES:
    :CUSTOM_ID: adding-aces
    :END:

The predefined mask values will vary by the object type.

#+BEGIN_SRC C++
  BOOL AddAccessAllowedAce(
    PACL  pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID  pSid
  );

  BOOL AddAccessDeniedAce(
    PACL  pAcl,
    DWORD dwAceRevision,
    DWORD AccessMask,
    PSID  pSid
  );
#+END_SRC

*** Adding an ACL to a security descriptor
    :PROPERTIES:
    :CUSTOM_ID: adding-an-acl-to-a-security-descriptor
    :END:

#+BEGIN_SRC C++
  BOOL SetSecurityDescriptorDacl(
    PSECURITY_DESCRIPTOR pSecurityDescriptor,
    BOOL                 bDaclPresent,
    PACL                 pDacl,
    BOOL                 bDaclDefaulted
  );
#+END_SRC

** Reading and Changing Security Descriptors
  :PROPERTIES:
  :CUSTOM_ID: reading-and-changing-security-descriptors
  :END:

=GetFileSecurity()=, =SetFileSecurity()=,
=GetSecurityDescriptorOwner()=, =GetSecurityDescrptorGroup()=

#+BEGIN_SRC C++
  BOOL GetSecurityDescriptorDacl();
#+END_SRC

To interpret an ACL

#+BEGIN_SRC C++
  BOOL GetAclInformation();
  BOOL GetAce();
#+END_SRC

* Kernel and Private Object Security
  :PROPERTIES:
  :CUSTOM_ID: kernel-and-private-object-security
  :END:

Object such as processes, threads, and mutexes are kernel objects.
=GetKernelObjectSecurity()=, =SetKernelObjectSecurity()= with
appropriate privileges.

* Additional Security Features
  :PROPERTIES:
  :CUSTOM_ID: additional-security-features
  :END:

1. =DeleteAce()=

2. absolute and self-relative security descriptors

3. System ACLs: specify which object accesses should be logged.

** Impersonation

An application adopts the security profile of another user, implemented at thread level, typically used by
server applications.

** Privileges

Specify which system actions a process or a thread can perform, associate with
groups and user accounts

- *debug*: open any process to inject code, modify code, read sensitive data

- *take ownership*: access any object on the system, replace system files,
  change security.

- *restore*: can replace any file

- *load driver*: bypass all security

- *create token*: can spoof any user locally

- *Trusted Computer Base* (Act as part of the OS)
  + can create a new logon session with arbitrary SIDs in the token

* Kerberos

TODO
