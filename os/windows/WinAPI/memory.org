* Memory Management Overview
  :PROPERTIES:
  :CUSTOM_ID: memory-management-overview
  :END:

#+BEGIN_EXAMPLE
  +-----------------------------------------------------+
  |                                                     |
  |          Windows Program     C Library              |
  |                                                     |
  +-----------------------------------------------------+
   +----------------------------------------------------+
   |                         ||                         |
   |  Heap API: HeapCreate.. ||                         |
   |                         ||   MMF API:              |
   +--------------------------|     CreateFileMapping   |
   +--------------------------|     CreateViewOfFile    |
   |                         ||                         |
   |  Virtula Memory API     ||                         |
   |                         ||                         |
   +----------------------------------------------------+
   +----------------------------------------------------+
   |              Windows Kernel with                   |
   |              Virutal memory manager                |
   |                                                    |
   +--------|---------------------------------^---------+
            ^                                 |
            |                                 |
            |                                 |
   +--------v-----------+            +--------v---------+
   |                    |            |                  |
   |  Physical memory   |            | Disk & filesystem|
   |                    |            |                  |
   +--------------------+            +------------------+
#+END_EXAMPLE

#+BEGIN_SRC C
  VOID GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
#+END_SRC

* Heap
  :PROPERTIES:
  :CUSTOM_ID: heap
  :END:

Heaps are Windows objects (non-kernel objects): they have handles but not
managed by common handle functions. Heap separation has several benefits:

- multi-threading performance: each thread can have its own heap

- allocation efficiency and low fragmentation, simplifies
  synchronization

- deallocation efficiency: an entire heap can be freed with a single
  function call

- locality of reference efficiency, reducing page faults

Heaps are not kernel objects so they have no security attributes.
Do not destroy the process heap. Destroying a heap eliminates the need to write
the data structure traversal code and deallocate each individual code.

Use C library to allocate heap memory if one heap (process heap
=GetProcessHeap()=) is sufficient.
=LocalXXX= and =GlobalXXX= families of memory functions are not recommended
unless explicitly required by certain Windows APIs.

* Memory Mapped Files
  :PROPERTIES:
  :CUSTOM_ID: memory-mapped-files
  :END:

Convenient and efficient in-memory algorithms can process file data even
though the file may be much larger than available physical memory. File
processing is frequently much faster than using File I/O. No need to
manage buffers. Multiple processes can share memory by mapping.

The OS itself uses memory mapping to implement DLLs and to laod and
execute executables.

Create a file mapping object with =CreateFileMapping=. Get a file
mapping handle with=OpenFileMapping=. Map a file with =MapViewOfFile()=
after getting the mapping handle. Close the mapping with
=UnmapViewOfFile()=. Flush the dirty pages with =FlushViewOfFile()=.

