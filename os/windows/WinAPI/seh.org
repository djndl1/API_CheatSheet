A builtin mechanism that respond to unexpected asynchronous events, typically
in C.
C++ under Windows may or may not build its exception mechanism on SEH.
Normally, an exception indicate a fatal error
with no recovery. SEH is supported through a combination of Windows
functions, compiler-supported language extension and run-time support.
The runtime support unwinds the stack to find the exception handler and
then gives control to the handler.

Exceptions are asynchronous. It is not possible or practical to test for
an exception. Exception handlers provide a convenient mechanism for
exiting from inner blocks or functions under program control without
resorting to a =goto=, SJLJ or some other control.

When an exception is thrown, the process's debugger, if any, is notified. If the
process has no debugger attached, the system attempts to find a frame-based
exception handler. If none, the system tries again to notify the debugger. If
still no debugger is found, the default handling (mostly =ExitProcess=) is taken.

#+BEGIN_SRC C
// __try may be used with any block, even after if or while, unlike C++'s try,
  __try {
      /* Block of monitored code */
  }
// usually a literal constant, a call to filter function or a conditional expression
  __except (filter_expression) {
      /* Exception handling block */
  }
#+END_SRC

The filter expression should return one of the following:
1. =EXCEPTION_EXECUTE_HANDLER=: (like C++'s normal situation)
   it executes the except block
2. =EXCEPTION_CONTINUE_SEARCH=: (rethrow) ignores the exception handler and
   searches for an exception handler in the enclosing block until it
   finds one.
3. =EXCEPTION_CONTINUE_EXECUTION=: immediately returns control to the
   point at which the exception occurred. Not always possible and
   inadvisable.

An exception has a code, flags that indicate whether it may be ignored and a list
of arguments that describe the exception further (see =EXCEPTION_RECORD=).
Microsoft does not mandate the exact structure of exception codes, but the 28th
bit is reserved for the system. Better use something like COM error codes.

To catch the exact exception, =GetExceptionCode()=, =GetExceptionInformation=
(only inside the filter
expression but not in the filter function's stack frame). The user may throw
their =RaiseException()=.

Unlike Unix's signals, SEHs cannot be raised in another process except by
console control handlers.

#+begin_src c
__try {

} __finally {

}

// Chaining __try, __catch and __finally is not allowed,
// embedding one in another somehow is possible.

// nested with __except
__try {
    __try {

    } __except {

    }
} __finally
#+end_src

The termination handler is executed when falling through, =return=,
=break=, =goto=, =longjmp=, =continue=, =__leave= (directly go to the
termination handler without causing abnormal termination) or an exception is raised. =AbnormalTermination(void)=
determines how the block terminates.

Termination handlers do not execute if a process or thread terminates
itself by using =ExitProcess=, =ExitThread=, =exit=, return from the main function,
or the termination is caused externally by =TerminateProcess= or =TerminateThread=.

SEH is not encouraged to use with C++. A Windows exception or
termination handler will not call destructors to destroy C++ object
instances.

* Console Control Handlers
  :PROPERTIES:
  :CUSTOM_ID: console-control-handlers
  :END:

=SetConsoleCtrlHandler= allows one or more specified functions to be
executed on receipt of a Ctrl-C, Ctrl-break or one othree other
console-related signals.

#+BEGIN_SRC C
  BOOL WINAPI SetConsoleCtrlHandler(
    _In_opt_ PHANDLER_ROUTINE HandlerRoutine,
    _In_     BOOL             Add
  );
#+END_SRC


* [[https://docs.microsoft.com/en-us/archive/msdn-magazine/2001/september/under-the-hood-new-vectored-exception-handling-in-windows-xp][Vectored Exception Handling]]
  :PROPERTIES:
  :CUSTOM_ID: vectored-exception-handling
  :END:

Unlike frame-based SEH, VEH is process-wide. The behavior is similar to
POSIX signals.

When an exception occurs, the VEHs are called first, before the system
unwinds the stack to look for structured exception handlers.

#+BEGIN_SRC C
  PVOID AddVectoredExceptionHandler(
    ULONG                       First,
    PVECTORED_EXCEPTION_HANDLER Handler
  );
#+END_SRC

The returned value is a handle to the exception handler and used to
remove the handler with =RemoveVectoredExceptionHandler=.
