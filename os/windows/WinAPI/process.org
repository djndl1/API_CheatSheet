* Process Creation
  :PROPERTIES:
  :CUSTOM_ID: process-creation
  :END:

#+BEGIN_SRC C
  BOOL CreateProcessW(
    LPCWSTR               lpApplicationName,
    LPWSTR                lpCommandLine,        // non-constant
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL                  bInheritHandles,
    DWORD                 dwCreationFlags,
    LPVOID                lpEnvironment,
    LPCWSTR               lpCurrentDirectory,
    LPSTARTUPINFOW        lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
  );
#+END_SRC

#+INCLUDE: "win32/src/processes.cpp" src cpp

A proess handle is more than just an identifier: it also contains security access rights. It is a channel through which a process is manipulated.

** Specifying the Executable and the Command Line
   :PROPERTIES:
   :CUSTOM_ID: specifying-the-executable-and-the-command-line
   :END:

non-null =lpApplicationName= specifies the executable path, if =NULL=,
the first token in =lpCommandLine= is the program name.

** Inheritable Handles
   :PROPERTIES:
   :CUSTOM_ID: inheritable-handles
   :END:

1. =bInheritHandles=: A master switch applying to all handles.

2. To make an individual handle inheritable, use a =SECURITY_ATTRIBUTES=
   structure at creation time of the handle or duplicate an existing
   handle.

3. The two security attributes passed in are used to configure the two handles returned.

#+BEGIN_SRC C
// handle duplication creates a different way to access the same object.
  BOOL DuplicateHandle(
    HANDLE   hSourceProcessHandle,
    HANDLE   hSourceHandle,
    HANDLE   hTargetProcessHandle,
    LPHANDLE lpTargetHandle,
    DWORD    dwDesiredAccess,
    BOOL     bInheritHandle,
    DWORD    dwOptions
  );
#+END_SRC

The handle values are communicated to the child using an IPC mechanism
or assigning the handle to stdio in the =STARTUPINFO= structure (which
is the preferred way to use I/O redirection). Non-file handles and
handles that are not used to redirect stdio can be converted to text and
placed in a command line argument or in an environment variable.

The inherited handles are distinct copies (but with the same value), a parent and child might be
accessing the same file using different file pointers.

** Process Information
   :PROPERTIES:
   :CUSTOM_ID: process-information
   :END:

#+BEGIN_SRC C
  HANDLE GetCurrentProcess(); // a constant (-1) pseudo handle that is not valid for other processes
  DWORD GetCurrentProcessId();
#+END_SRC

To get a real process handle, get the PID and =OpenProcess= it or duplicate the current pseudohandle.

#+BEGIN_SRC C
  HANDLE OpenProcess(DWORD dwDesiredAccess, BOOL  bInheritHandle, DWORD dwProcessId);
#+END_SRC

A running process can determine the full pathnames of the exe used to
run it with =NULL= as the module handle of these functions.

#+BEGIN_SRC C
  DWORD GetModuleFileNameW(HMODULE hModule, LPWSTR  lpFilename, DWORD   nSize);
  DWORD GetModuleFileNameExW(HANDLE  hProcess, HMODULE hModule, LPWSTR  lpFilename, DWORD   nSize);
#+END_SRC

#+INCLUDE: "win32/src/processes.cpp" src cpp

* Process Termination
  :PROPERTIES:
  :CUSTOM_ID: process-termination
  :END:

#+BEGIN_SRC C
  void ExitProcess(UINT uExitCode); // DLL detach calls are made, termination handlers are not executed
  BOOL GetExitCodeProcess(HANDLE  hProcess, LPDWORD lpExitCode);
  BOOL TerminateProcess(HANDLE hProcess, UINT   uExitCode); // not even DllMain
#+END_SRC

* Process Sync
  :PROPERTIES:
  :CUSTOM_ID: process-sync
  :END:

The simplest method to synchronize with another process is to wait for
that process to complete. There are two general-purpose wait functions
for synchronization objects to become signaled

#+BEGIN_SRC C
  DWORD WaitForSingleObject(HANDLE hHandle, DWORD  dwMilliseconds);
  DWORD WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds);
#+END_SRC

* Environment Blocks and Strings
  :PROPERTIES:
  :CUSTOM_ID: environment-blocks-and-strings
  :END:

#+BEGIN_SRC C
  DWORD GetEnvironmentVariable(LPCTSTR lpName, LPTSTR  lpBuffer, DWORD   nSize);
  BOOL SetEnvironmentVariable(LPCTSTR lpName, LPCTSTR lpValue);
#+END_SRC

* Process Security
  :PROPERTIES:
  :CUSTOM_ID: process-security
  :END:

By default, =CreateProcess= gives =PROCESS_ALL_ACCESS= rights. Several
other specific rights are available.

* Process Execution Times
  :PROPERTIES:
  :CUSTOM_ID: process-execution-times
  :END:

#+BEGIN_SRC C
  BOOL GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, 
                       LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
#+END_SRC

* Job Objects
  :PROPERTIES:
  :CUSTOM_ID: job-objects
  :END:

Job objects represent a set of processes that are controlled together.
Resource limits can be specified for all the job member processes and
accounting information is maintained.

The typical way is:

1. Create a job (=CreateJobObject=) or open a named object
   (=OpenJobObject=) to get a job handle;

2. add a process to that job (=AssignProcessToJobObject=);

3. Control limits are specified =SetInformationJobObject=; This can be
   queried through =QueryJobInformationObject=

By default, a new child process created by a process in the job will
also belong to the job unless some certain flag is specified when
creating the process.
