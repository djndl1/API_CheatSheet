#+bibliography: COM.bib
#+cite_export: csl

* The Basic Idea Behind COM

COM emphasizes *interface inheritance*, which provides support for polymorphism,
rather than *implementation inheritance*, simply a mechanism for reusing an
existing implementation that increases coupling between different components
(especially from different vendors) and causes information leak of the base
class.

Implementation inheritance should be restricted within
a component. COM provides *black-box binary reuse* suitable for the component marketplace.

The core concepts of COM are *interfaces*, *classes*, *apartments*, *security*.

* How C++ Library Can Be Binary Reusable
  :PROPERTIES:
  :CUSTOM_ID: the-problem-of-c
  :END:

C++, built on UNIX for monolithic applications using the compiler and
linker technology. Libraries does not always seem to be reusable and
sometimes requires the client user to understand the source code.

** Software Distribution: Not Used to Binary Reuse

Traditionally, C++ libraries have been distributed in source code form
and are expected to be linked into the executable code. The users may choose to
statistically link the code or even compile the code along with the client code.

*Use dynamic linking*!

** Dynamic Linking and Portability: No Standard Binary Reuse

Dynamic linking for C++ lacks standardization at binary level, making it hard to
distribute C++ libraries as dynamic shared libraries:

- *Different name mangling* schemes between compiler vendors prevent
   dynamic linking using different compilers for client code and
   libraries. (Might be worked around using aliases)

- Different compiler vendors implement *language features* in their own
   ways. e.g. exceptions.

** Encapsulation: Binary Reuse Failure Due to Implementation Leaking

C++ has no notion of *binary encapsulation*, only *syntactic encapsulation*.
Object layouts are exposed to the client code.

The compilation of C++ requires the client's compiler to have access to all the
information w.r.t. object layout in order to *instantiate an instance* of a class (e.g. the
change of size but the client code wouldn't know due to the use of
explicit/implicit =sizeof=)
or to *make nonvirtual method calls* (?), which includes info about the size and order
of the the object's private and protected data members.

Working around this with versioning on naming causes system bloat.

Simply exporting C++ class definitions from DLLs does not provide a reasonable
binary component architecture due to /lack of a /standard binary reuse convention/.

** Separating Interface From Implementation

One class as the interface and the other as the implementation. The interfaces
holds a pointer to the implementation (*Pimpl*). The interface class's layout
does not change.

- This approach has some performance implication.

- Pimpl may work for small classes, but may be error-prone in large projects due to the amount of
delegate functions.

- Pimpl does not solve the compiler/linker compatibility issue: non-virtual
  calls require symbol resolution.

To solve compiler incompatibilities (language feature implementation, name
mangling), we may use an *abstract class with pure virtual functions* as the
interface and let *the implementation inherit this interface*
The implementation is *created from a factory function*. An explicit special
*delete* function should be called manually instead of the compiler-dependent destructor.

Virtual calls are *immuned to name mangling* since they are called through
function pointers and the factory method is exposed as a C function.

Combined with dynamic loading, this creates a runtime polymorphism.

** Extensibility: Multiple Facades and Runtime Cast

Directly extending the interface by adding another virtual function breaks
compatibility because the newer client code may be using older library and cannot
find the newer functions.

The solution is to add an extension interface. =dynamic_cast<>()= should be
 prohibited here as it is dependent on
 compiler implemention, in favor of a semantically equivalent virtual
 function =Dynamic_Cast()=, which navigates the type hierarchy and
 =static_cast= the =this= pointer. An old implementation will return a =null= pointer for
 a new interface.

Note that casting to virtual base is another binary compatibility breaker.

** Resource Management: Use Refcount

With multiple multiple interface pointers (owners) to the same object, resource
management becomes error-prone.

Resource management can be done via explicit manual refcounting.
The client simply calls =DuplicatePointer=/=DestroyPointer=,
which can be easily wrapped into a smart pointer.


* COM Data Types
   :PROPERTIES:
   :CUSTOM_ID: data-types
   :END:

| IDL               | C++               | VB             |
|-------------------+-------------------+----------------|
| boolean           | unsigned char     | N/A            |
| byte              | unsigned char     | N/A            |
| small             | char              | N/A            |
| short             | short             | Integer        |
| long              | long              | Long           |
| hyper             | __int64           | N/A            |
| float             | float             | Single         |
| double            | double            | Double         |
| char              | unsigned char     | N/A            |
| wchar_t           | wchar_t           | Integer        |
| enum              | enum              | Enum           |
| Interface Pointer | Interface Pointer | Interface Ref. |
| VARIANT           | VARIANT           | Variant        |
| BSTR              | BSTR              | String         |
| VARIANT_BOOL      | short             | Boolean        |

- =OLECHAR= :: =wchar_t=
  + =[string]= is required to indicate that =OLECHAR*= is a null-terminated
    array of characters, not simply a pointer to =OLECHAR=.
  + =OLESTR(string_literal)=

- =BSTR= (automation type) :: length-prefixed (four bytes) null-terminated =OLECHAR= string
  + VB's =String= type.
  + it is legal to pass a =null= pointer as a =BSTR= to indicate an empty string.
  + =SysAllocString()=, =SysReAllocString()=, =SysFreeString()=,
    =SysStringLen()=, =SysStringByteLen()=

- structures ::
  + VB can access interfaces that use structures but cannot implement such interfaces.

- Union :: a value that may have any of several representations or formats
  within the same position in memory.
  + an integral discriminator is expected at the same logical level (e.g. in the same
    =struct=) so that the actual interpretation is unambiguous.

    #+begin_src idl
    // encapsulated
    struct UNUMBER {
        short t;
        [switch_is(t)] union VALUE {
            [case(1)] long i;
            [case(2)] float f;
        };
    };

    // nonencapsulated union
    union NUMBER {
        [case(1)] long i;
        [case(2)] float f;
    }

    HRESULT Add([in, switch_is(t)] union NUMBER *pn, [in] short t);
    #+end_src
  + =VARIANT= :: a common discriminated (tagged) union

- COM interface ::
  + type can be specified either statistically or dynamically with a =REFIID= aside
    #+begin_src idl
    HRESULT GetObject([in] REFIID riid, [out, iid_is(riid)] IUnknown/void **ppUnk);
    #+end_src
    Dynamic typed interface pointers are preferred since it reduces additional
    client object method calls.

* Intefaces
  :PROPERTIES:
  :CUSTOM_ID: intefaces
  :END:

** Interface Definition Language

An indepedent interface description language (IDL) that generates
*C/C++ headers* (type definitions), *type library for other languges*.

IDL defines the logical (methods and operations) and physical part (network,
memory, stack frames) of an interface.

#+begin_src idl
[
    object,    // object is required for COM interface
    uuid(4af2d676-23c1-11ee-91bd-8780e5365440) // uuid as a physical name for the interface
]
interface IThisInterface : IBaseInterface {
    typedef1;
    typedef2;
    ..
    method1;
    method2;
    ..
}
#+end_src

*** Syntax

The basic syntax is C-like with annotations, supporting structures, unions, arrays, enums and
typedefs.

*** MIDL/WIDL

*** Result

- =*.h= :: C/C++ type definitions

- =*_i.c= :: GUID defintions

- =*_p.c= :: interface marshaler defintions

- =dlldata.c= :: interface marshaler in-process server code

- =*.tlb= :: type library, for VBA, etc.

** Physical Name

Each interface (=IID_*=) and each class =CLSID_*= have a unique physical name,
annotated by =uuid()=.

- =CoCreateGuid()=, =GUIDGEN.EXE= in SDK are used to generate this GUID.
- COM provides constant reference aliases for each GUID types

  #+begin_src cpp
  #define REFGUID const CUID&
  #define REFIID const IID&
  #define REFCLSID const CLSID&
  #+end_src

- Equivalence functions and C++ equivalence operator overloading

  #+begin_src cpp
  BOOL IsEqualGUID(rguid1, rguid2);
  BOOL IsEqualCLSID(rclsid1, rclsid2);
  BOOL IsEqualIID(riid1, riid2);
  #+end_src

** Parameters

Method parameter directions must be annotated with attributes =[in]=, =[out]=,
=[in, out]=, =[out, retval]= (return value).

** =HRESULT=

Virtually all COM methods return an error number of type =HRESULT=
(32-bit signed integer), which is partitioned by bit into
*Severity-Reserved-Facility-Information*.

=HRESULT= return values are converted exceptions in certain langauges.

- =MAKE_HRESULT= :: define a custom =HRESULT=

- =SUCEEDED=, =FAILED= :: test marcros

#+begin_src
E_ACCESSDENIED  	Access denied.
E_UNEXPECTED        Method Not Implemented
E_FAIL 	      	Unspecified error.
E_INVALIDARG 	    Invalid parameter value.
E_OUTOFMEMORY 	    Out of memory.
E_POINTER 	        NULL was passed incorrectly for a pointer value.
E_UNEXPECTED 	    Unexpected condition.
S_OK 	            Success.
S_FALSE 	        Success. logical false.
#+end_src

** =IUnknown=

The base interface of all COM interfaces (=import "unknwn.idl"=). The implementation is required to
provide an =IUnknown= implementation.

*** Resource Management
   :PROPERTIES:
   :CUSTOM_ID: resource-management
   :END:

**** Basic Refcount Rules

- Call =AddRef= when a non-null interface pointer is copied.

- Call =Release= prior to overwriting memory location that contains a
   non-null interface pointer.

- Redundant calls to =AddRef= and =Release= can be optimized away if
   there is special knowledge about the relationship between two or even
   more memory locations.

**** Returned RefCount

The return refcount by =AddRef= and =Release= are not thread-safe (remote-safe), only
for debugging. =Release= does not nullify the pointer, so the object
might still be valid (due to other interface pointers), even if the interface pointer shouldn't be used.

A zero return from =Release= guarantees the object is invalid.

**** Interface RefCount

=QueryInterface= can only return pointers to the same COM object.
=AddRef= and =Release= are opertions on /an interface pointer/ so that
an object may elect to perform per-interface reference counting to allow
aggressive reclamation of resources.

=QueryInterface= has a type-unsafe =out= =void**=, use =IID_PPV_ARG(Type, Expr)= to
reduce type errors.

** Implementing =IUnknown=
   :PROPERTIES:
   :CUSTOM_ID: implementing-iunknown
   :END:

Use =STDMETHODIMP= and =STDMETHODIMP_(type)= to produce COM-compliant stack
frames for each methods.

- Use atomic operations for src_cpp{AddRef()} and src_cpp{Release()}.

  #+begin_src cpp
  STDMETHODIMP_(ULONG) Release(void)
  {
      LONG res = InterlockedDecrement(&refcount);
      if (res == 0) delete this; // equality not <= to avoid double free.
      return res;
  }
  #+end_src

  + A COM object may not be allocated on the heap. =delete this= is
    thus not advised for non-heap-based objects.

  #+begin_src cpp
  // for non-heap-based objects. Non resource management is required here
  STDMETHODIMP_(ULONG) GlobalVar: :AddRef(void) {
      return 2; // any non-zero value is legal
  }

  STDMETHODIMP_(ULONG) GlobalVar::Release(void) {
      return 1; // any non-zero value is legal
  }
  #+end_src

- =QueryInterface=: Traverse the type hierarchy of the object and use =static_cast<>= to return
  the correct pointer type for all supported interfaces.
  + cast =this= to =IUnknown*= may not compile as it forms a diamond.
  + =QueryInterface= can be implemented as table-driven, see Don Box's example[cite:@EssentialCOM].
  #+begin_src c++
  // a rigid implementation of QueryInterface
  if (riid == IID_A)
      ,*ppv = static_cast<IID_A*>(this);
  else if (riid == IID_B)
      ,*ppv = static_cast<IID_B*>(this);
  ...
  else {
      ,*ppv = nullptr;
      return E_NOIMTERFACE;
  }
  reinterpret_cast<IUnknown*>(*ppv)->AddRef();
  return S_OK;
  #+end_src

** Attributes and Properties
   :PROPERTIES:
   :CUSTOM_ID: attributes-and-properties
   :END:

Object properties can be defined with =[propget]= and =[progput]= on methods.

** Exceptions
   :PROPERTIES:
   :CUSTOM_ID: exceptions
   :END:

- =IErrorInfo=: contextual error.
  + The VB =Err= object.
  + =CreateErrorInfo()= provides a default error implementation.
  + =SetErrorInfo= throws it and =GetErrorInfo= catches and clears it.

The objects that throw COM exceptions must implement the
=ISupportErrorInfo= interface to indicate /which interfaces/ support
exceptions. The client code that receives an error return value
should =QueryInterface= the object to =ISupportErrorInfo= and see if the interface
supports exception or not to decide whether it is =SetErrorInfo= the exception returned by
=GetErrorInfo()=. In short, =IErrorInfo= is used alongside with =HRESULT=.

*Do not let pure C++ exception to be propagated beyond the method boundary*.

* Classes
  :PROPERTIES:
  :CUSTOM_ID: classes
  :END:

- /Interfaces/: abstract protocol for communicating with an concrete meaningful implementation. Not to
  replace objects themselves.

- /Classes/ are named (after =CLSID=) implementations that represent
  concrete instantiable types. =ProgID=​s are text-based aliases for
  =CLSID=, unique only by convention.

  #+BEGIN_SRC C
  HRESULT CLSIDFromProgID();
  HRESULT ProgIDFromCLSID();
  #+END_SRC

- /Component Category/: a semantic grouping of coclasses that implement a shared
  set of interfaces.

** IDL

IDL coclass always appear in the context of a library definition.

#+begin_src idl

import "MyLibInterfaces.idl"; // the resultant typelib contains these interface definitions

[
    uuid("f32c56e8-2c7a-11ee-b92a-3f4334b6d959"),
    version(1.0)
]
library MyLib // one per file
{
    importlib("stdole32.tlb"); // std defs

    [uuid(0db7eff4-2c7b-11ee-80ae-6fd9194be6fc)]
    coclass MyCoClass {
        // if default is not specified, the first interface is the default
        [default] interface IMyInterfaceA; // certain languages uses the default interface
        interface IMyInterfaceB;
    }
}
#+end_src

It is an error for an IDL that contains a library definition
to import another IDL file that also contains a library definition.
Remember to separate a library IDL and its interface IDL so that the client IDL may
not import unnecessary library definitions and causes multiple library definitions.
Otherwise, use =importlib= to import the resultant typelib.


** Class Object

All COM classes must have a *class object*, a per-class singleton that
implements the /instanceless functionality of the class/, the *metaclass* for a
given implementation and the methods it implements fill the role of
static member functions.

Since class objects are singletons, they are /well-known/ in th sense that their
CLSIDs refer to the objects.

Class objects are often used as brokers to /create new instances of a class/ (*factory*) or
find existing instances based on some well-known object name.

For uniformity, a class object should implement =IClassFactory=.

** Object Activation
   :PROPERTIES:
   :CUSTOM_ID: object-activation
   :END:

- *Object Activation* :: the process of bringing an object to life.

- *Activation Models* ::
  + binding to the class object of a given class (the ultimate primitive)
    - =CoGetClassObject()= creates a class object which can be used to create
      class instances, most likely through =IClassFactory=.
    - Class objects are exposed by DLLs via a private symbol =DllGetClassObject()=.
      =CoGetClassObject= finds the registered DLL and loads it into memory and
      then resolve =DllGetClassObject()=.
  + create new instances of a class based on CLSID
    - =CoCreateInstance(Ex)=
  + bring a persistent object to life based on the persistent state of the object.
    - =CoGetInstanceFromFile()=
  + The primitive way of object activation is to first =CoGetClassObject= and
    use that class object to =CreateInstance()= of the class and then
    =QueryInterface= to the appropriate interface. =CoCreateInstance(Ex)= merges
    the three steps together semantically and ensures that all operations are executed in the
    server process (if out-of-process) to reduce unnecessary round-trips.
    =CoCreateInstanceEx= does not actually internally call =CoGetClassObject=.
  + However, if a large amount of objects need to be created, caching a class
    object and =CreateInstance()= would be faster as it does not go through the
    COM SCM. In essence, COM does not really relies on the COM SCM. The
    centralized object activation mechanism is just a handy
    facility .One can even create a COM object through a pure C API without
    going through =CoGetClassObject=, =CoCreateInstanceEx= etc..

- *COM Service Control Manager* (in =RPCSS.EXE=) :: a central rendezvous point for all activation requests.
  + Object activation is done by sending requests to the COM SCM,
  + its interface API (*the COM library*) is implemented on WinNT as
    =OLE32.DLL=.
  + COM SCM only handles the activation.
  + COM SCM hides the details about where the activated object resides.

In-Process COM calls are mostly just virtual calls with compatible threading
requirements. Out-of-process COM calls are called upon /proxies/, which
translates between method invocations and RPC requests.

- *COM Server* :: a binary file that contains the code for one or more COM classes.
  + either a normal executable or a DLL
  + A DLL-based version can be loaded into the client's address space or in a
    surrogate process as an out-of-process server;
    An executable is started as a process in response to a request of
    out-of-process or off-host activation.
  + Lifetime: server DLLs must remain loaded at least as long as there are
    extant interface pointers to its objects. Most libraries simply uses a
    single lock count variable as an indicator.
     - =CoFreeUnusedLibraries(void)= is used by the client to
    garbage-collect its address space using =DllCanUnloadNow(void)=.

- *COM Class Store* :: the NT directory maintains COM class configuration
  information across machines.
  + a *local cache* (the *Windows Registry*) is queried before the NT directory.
    + =HKLM:\Software\Classes= (aliased as =HKEY_CLASSES_ROOT=) machine-wide and
      =HKCU:\Software\Classes= per-user configuration. =HKCR\MyCoClassProgID\CLSID= is
      required to support =CLSIDFromProgID()=.
    + =HKCR:\CLSID= and =HKCU:\Software\Classes\CLSID\= information about
      CLSIDs, its activation models and server paths, its ProgID to support
      =ProgIDFromCLSID()=
    + All well-implemented COM servers are required to support
      *self-registration*, that is, registering itself in the Registry on
      calling certain functions.
      - DLLs must implement and export =DllRegisterServer()= and =DllUnregisterServer()=.

** Moniker

A factory class creates an object of initial state while an =IMoniker= can
provide addition information.
Originally monikers are used in OLE as a marshalable reference (locator) to some
non-interchangeable object.
A compound document file can get a moniker to an Excel file and bind it =IMoniker:BindToObject= to the
spreadsheet it displays.
Later monikers became a general abstraction of an object creation algorithm that
allows a client to specify arbitrary initialization data. A new coclass object
is created without initialization since neither a coclass constructor nor its factory
class takes any parameter. Custom initialization is required and it is hardly
general or abstract. Monikers should hide the initialization algorithm or the
data requirement.

- /display name/ :: the textual representation of a moniker
  + =IMoniker::GetDisplayName()=
  + =MkParseDisplayName()= matches the display name's prefix to a registered
    ProgID of the designated moniker.
  + e.g. class moniker =clsid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx:=, builtin
    moniker type that can connect to a class object. =CreateClassMoniker=

*** Use Monikers

- =MkParseDisplayName()= and then =IMoniker::BindToObject()=
  + =CoGetObject()= in one step (remember =Activator.GetObject()= in .NET)
