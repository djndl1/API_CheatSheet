#+TITLE: Window Command Line

[[https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/][Windows Command-Line]]

#+begin_src
      Terminal                                             Computer
┌────────┬────────┬──────┐                  ┌─────────┬───────────┬───────────────┐
│        │ Input  │      │                  │         │           │               │
│     ◄──┼───◄────┼───   │◄──────┐ ┌────────►         │   Input   │               │
│ Output │ Buffer │      │       │ │        │    ─────┼──►Buffer──┼──►            │
│        │        │ IO   │       │ │        │ IO HW   │           │     App       │
│        ├────────┤ HW   │       │ │        │         ├───────────┤               │
│        │ Output │      │       │ │        │         │           │    Shell      │
│ Device │ Buffer │      │       └─┼────────┤◄────────┼─┐ Output  │               │
│        │   ▲────┼──►   ├─────────┘        │         │ │ Buffer◄─┼─              │
│        │   │    │      │                  │         │           │               │
│        │   │    │      │                  │         │           │               │
└────────┴───┼────┴──────┘                  └─────────┴───────────┴───────────────┘
             │
             │
         Input Device
#+end_src

Each stage of the system simply passes streams of character.

Modern computers employ high-speed in-memory Pseudo Teletype (PTY) as the terminal.

CMD, NT and PowerShell => The Unix Subsystems of NT => WSL and the new windows console

* Revonation of the Windows Console

The console was lacking many features such as the ability to parse and render ANSI/VT sequences for rendering rich, colorful text and text-based UI's.

1. Internal code was refactored and simplified in C++.

2. Comprehensive support for ANSI/VT sequnces to accurately render rich text output from unixes.

3. Support 24-bit colors.

* The Windows Console

1. Handle User Input: accept keyboard/mouse/touch/pen input, translates input into characters or ANSI/VT sequences and sends them to the connected app/shell.

2. Handle App Output: accepts text output from a connected app/shell, updates the disaply as required based on the app output.

* Inside the Windows Console

** In Windows 7
1. =conhost.exe=: User-mode windows consoel UX and CLI plumbing. Converts IOCTL messages into Win32 Console API calls and sends text records from Console to CLI apps. Parse VT sequences and generates equivalent API calls. Implements I/O Buffering.

2. =condrv.sys=: a Windows kernel driver providing communication infrastructure between conhost and one or more CLI shells/apps/tools. IOCTL messages are used between CLI apps and the Console.

Everything revolves around the Object concept and API calls. However, not only cross-platform interop becomes a problem, Remoting Windows CLI is difficult with the API-based approach. In constrast, character streams make it much easier.

On Unixes, users launch a terminal and the terminal launches a predefined shell and communicates with the shell/app via a Psuedo TTy. On Windows, users launch the CLI app and attach the app/shell to either the current Console and a new one. They sound similar but on Windows, =ConHost.exe= is mandated as THE Console app, and CLI apps connect to it via IOCTL messages through the driver, not via text streams. 3rd-party consoles have to launch a offscreen conhost just as an intermediate buffer(?) just to communicate with the CLI app.

** About Unicode Support

1. Not every Console APIs supports UTF-16.

2. Many newer Unicode features are not supported.

3. Using GDI, the Console can't draw many complex glyphs.

* Pseudo Teletype (PTY)

PCs were replacing hardware terminals in the 80s. A Pty comes between the terminal app and the cli app/shell. Data is always sent/received asynchronously. The slave pty on the CLI app side emulates the behavior of a physical terminal device and converts comamnd characters into POSIX signals.

However, Windows was lacking a PTY infrastructure.


** ConPTY: the Windows Pseudo Console

- /ConPTY API/: The new Win32 ConPTY API provides a mechanism that is similar to the POSIX PTY model, but in a Windows-relevant manner

- /VT Renderer/: correctly renders UTF-8 encoded output text/VT.

- /VT Interactivity/: receives and converts UTF-8 text/VT into input records.


** ConHost: How it worked and how it still should

1. the user input is converted into =KEY_EVENT_RECORD= and =MOUSE_EVENT_RECORD= and stored in the input buffer.

2. The input buffer is drained one record at a time and performs the requested input action.

3. The Console renders the output buffer's changed regions to the display.

  #+begin_quote
When a Command-Line app calls Windows Console APIs, the API calls are serialized into IOCTL messages and sent via the ConDrv driver. ConDrv then delivers the IOCTL messages to the attached Console, which decodes and executes the requested API call. Return/output values are serialized back into an IOCTL message and sent back to the app via ConDrv.
  #+end_quote

** The New Model

#+begin_src
┌──────────────────┐              ┌─────────────────────────────────────┬────────┬──────┐   ┌──────────┐
│                  │              │                       ConHost       │        │      │   │          │
│                  │        stdin │                                     │        │      │   │          │
│            stdout├──────────────►  VT Interactivity──►  Input Buffer  │        │      │   │          │
│                  │              │                                     │ Console│ API  │   │          │
│ ConPTY-Enabled   │    UTF-8     │                                     │        │      │   │ CLI Apps │
│    Console       │    Text/VT   │ ConPTY                              │   API  │      │   │          │
│                  │              │                                     │        │Server│   │          │
│            stdin ◄──────────────┤  VT Renderer ◄─────  Output Buffer  │        │      │   │          │
│                  │       stdout │                                     │        │      │   │          │
└──────────────────┘              └─────────────────────────────────────┴────────┘▲─────┘   └──────┬───┘
                                                                                  │                │
                                                                                  │                │
                                                                                  │ ┌────────┐     │
                                                                                  └─┤ ConDrv │◄────┘
                                                                                    └────────┘
#+end_src

Now Conhost can exposes itself as a PTY, outputs and receives UTF-8 text/VT. Mainly, the frontend was separated from the ConHost and the backend with CLI apps is still intact. With the ConPTY infrastructure, a SSHD easily communicates with the ConHost via ConPTY. Without ConPTY, a SSHD has to use a offscreen console as an intermediate.

* Tips

1. Currently, running as an elevated user when sshing into a Windows machine requires first sshing into itself and then remoting into itself.
