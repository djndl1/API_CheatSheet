#+title: System Mechanisms

Base mechanisms used by the kernel-mode code

* Trap Dispatching

- /Trap/: a processor's mechanism for capturing the executing thread when an exception or an interrupt occurs and tranferring control to a fixed location (/trap handler/) in the OS.

- /interrupt/: an asynchronous event that is unrelated to what the processor is executing.
  + sources: I/O devices; processor clocks; timers etc.
  + handled by /Interrupt Service Routines/

- /exception/: a synchronous condition that results from the execution of a particular instruction. Handled by the /Exception dispatcher/ and then various exception handlers.
  + sources: memory access violation; certain debugger instructions; divide-by-zero errors etc.
  + the kernel also regards system service callss as exceptions, handled by /System Services/
  + virtual address exceptions are handled by /Virtual memory manager's pager/.
  + Unexpected exceptions are handled typicall by /KeBugCheckEx/, which halts the computer.

Either hardware or software can generate exceptions and interrupts. The processor records machine state on the kernel stack of the thread that is interrupted for a return later. Windows switches to the thread's kernel stack if the thread is in user mode. Windows creates a /trap frame/ on the kernel stack of the interrupted thread. The frontend trap handling functions perform the general trap handling and then transferring control to other functions to field the trap.

** Interrup Dispatching

Interrupt-driven devices allow the OS to run asynchronously by overlapping central processing with I/O operations. The kernel can also initiate a software interrupt and break into the execution of a thread. The kernel can also disable interrupts especially when processing an interrupt or dispatching an excpetion.

Interrupt trap handlers transfer control to an external ISR (often provided by device drivers) or an internal kernel routine to handle the interrupt.

*** Hardware Interrupt Processing

External interrupts come into the /interrupt controller/ which in turn interrupts the processor. The processor queries the interrupt controller for the /interrupt request (IRQ)/ and translates the IRQ into an index in the /interrupt dispatch table/ (filled at boot time) to find the appropriate interrupt dispatch routine.

The interrupt dispatch table (IDT, an implementation of /Interrupt Vector Table/) is also used to configure trap handlers for exceptions. The number of supported IRQs is determined by the design of the interrupt controller.

**** X86 Interrupt Controller

- i8259A Programmable Interrupt Controller (PIC)
  + 15 interrupt lines
  + uniprocessor support

- i82489 Advanced Programmable Interrupt Controller (APIC)
  + 256 interrrupt lines
  + multiprocessor support
  + necessary for x64 version of Windows
  + An I/O APIC accepts device interrupts and routes the interrupt (the algorithm used is selected by the Windows HAL) to a APIC local to a certain processor

*** Software-Level Interrupt Request Levels

An interupt controller defines the hardware-level interrupt prioritization.
The OS kernel imposes another level of interrupt priority scheme (/Interrupt Request Levels/)

- 32 on i386 and 16 on AMD64

- an IRQL is an attribute of an interrupt source.

- Each processor has an IRQL setting that changes as the OS code executes and  it determines which interrupts the processor can receive.
  + All components of the system attempt to keep the IRQL at passive level to allow device drivers to respond to hardware interrupts in a timely manner.
  + the CPU's IRQL is always at passive level when a user-mode thread is executing. Only the kernel-mode code can set the IRQL.

#+begin_src
┌──────────────┐
│    High      │halting the system
├──────────────┤
│  Power Fail  │not actually used
├──────────────┤
│Interprocessor│request another processor to perform an action
├──────────────┤
│   Clock      │ for system clock to track time of day; measure/allot CPU time to threads
├──────────────┤
│    Profile   │RTC kernel profiling
├──────────────┤
│              │
│              │device interrupts
│ for devices  │
│              │
├──────────────┤
│ DPC/dispatch │
├──────────────┤ software interrupts
│     APC      │
├──────────────┤
│   Passive    │ normal thread execution, not for interrupts
└──────────────┘
#+end_src

**** Determining the  IRQL of An Interrupt

A bus driver determines what interrupts can be assigned to a device and the PnP manager decides the acceptable interrupt assignments after taking into account previous assignments for all other devices.

Windows doesn't prioritize device IRQs in any controllable way and user-level applications execute only when a processor's IRQL is at passive level, making Windows unsuitable for real-time tasks. User-mode apps must wait for ISRs and DPC code to finish, which is uncontrollable for designers.

*** Interrupt Objects =nt!_kinterrupt=

- A kernel control object that allows device drivers to register ISRs for their devices.
  + ISR address
  + IRQL at which the device interrupts
  + the associated entry in the IDT with the ISR

Interrupt objects abstract PIC details from device drivers, allowing the drivers to register ISRs without accessing the IDT (usually in assembly code), thus improves portability.

Also, interrupt objects allow to kernel to call more than one ISR for any interrupt level =KiChainedDispatch=. The chained call is broken when one of the ISR claims the interrupt.

**** The Control Flow of Interrupts

The interrupt dispatch table (by the hardwawre) transfers the control to the handler code that resides in an interrupt code, which passes a pointer to the interrupt object to either =KiInterruptDispatch= or =KiChainedDispatch= to raise the IRQL (in the interrupt table) and actually execute the ISR, whose address is also stored in the interrupt object.

** Software Interrupts

- The kernel also generates software interrupts:
  + initiating thread dispatching
  + non-time-critical interrupt processing
  + Handling timer expiration
  + Asynchronous procedure execution in the context of a particular thread
  + Asynchronous I/O operations

*** Dispatch/Deferred Procedure Call Interrupts (DPC)

- for thread dispatching: DPC/distach-level interrupt is issued to defer thread dispatching until conditions are right (when the kernel completes its current work and lower the IRQL).

- /Deferred Procedure Call/: a function that performs a system task that is less time-critical than the current one.
  + represented by a /DPC object/ visible only to device drivers and other system code, maintained in one queue per processor. The system requests a DPC by creating a DPC object and placing it in a queue.
  + the kernel processes each DPC in the queue of the processor before the processor's IRQL drops from an IRQL of DPC/dispatch level or higher to a level lower than the DPC/dispatch level.
  + primarily for device drivers, but also for the kernel: the system clock issues an interrrupt at clock IRQL at every tick, updating the system time and decrementing a counter of the current thread that indicates the remaining time the thread can run. When the counter reaches zero, a rescheduling DPC is queued and the processor's IRQL is lowered. Device interrupts are handled before the DPC is executed.

**** Delivery

The kernel may or may not generate a DPC/dispatch-level interrupt when =KeInsertQueueDpc= queuing a DPC, depending on the target processor and the importance of the DPC. If the target processor is not the current one and the DPC is imporant enough, an interprocessor interrupt is issued to dispatch the DPC and execute it there. The system idle thread on a processor also drains the DPC queue for the process.

**** Additional Reading

[[https://www.osr.com/nt-insider/2009-issue1/deferred-procedure-call-details/][Deferred Procedure Call Details]]

*** Asynchronous Procedure Call (APC) Interrupts

- APC has a few properties
  + APC routines always run in the context of a particular user thread (thus in a particular address space)
  + can cause pre-emption of the currently running thread
  + APC routines are subject to thread scheduling (preemptible) and can acquire resources, wait for object handles, incur page faults and call system services.

- Described by /APC objects/: waiting in a thread-specific
  kernel-managed APC queue. Each thread has two APC queues,
  kernel-mode and user-mode. The kernel queues an APC object to the
  thread and then, if permitted, requests a software interrupt at APC
  level.
  + Kernel mode APCs interrupt a thread and execute a procedure
    without the thread's intervention or consent.
  + A thread can disable kernel-mode APCs by raising the IRQL to
    =APC_LEVEL= or by calling =KeEnterGuardedRegion=
  + User mode APC interrupts require the thread be in an /alertable wait state/. The thread handles all APCs in a FIFO order.
  + an APC may or may not runs in the =APC_LEVEL= IRQL.

- Uses: APC functions are queued to be called in the future.
    + kernel mode: OS work that must be completed within the address
      space of a particular thread: directing a thread to stop an
      interruptible system service; recoding the results of an async
      I/O operation in a thread's address space; making a thread
      suspend or terminate itself or to get/set its user-mode
      execution context. A thread can resume its exeuction after an
      I/O operation through the use of APCs
    + user mode: The I/O completion is implemented by queuing an APC
      to the thread that issued the I/O. The callback is exeucted
      when the thread is in an /alertable wait state/, typically by
      calling =WaitForXXX= with an /alertable/ option or by calling
      =SleepEx=. Then the kernel interrupts the thread, calls the APC
      routine in the context of that thread and resume thread's
      execution when the APC routine completes. User-mode APCs
      execute at passive level.

**** Delivery

APCs are delivered by calling =KiDeliverApc= at well-defined points. More details in [[https://dennisbabkin.com/inside_nt_apc/][Inside NT's Asynchronous Procedure Call]].

User-mode APCs are delivered when the thread enters an alertable
wait state. The kernel transfers control to the APC routine and resumes thread's execution when the APC routine completes.

Kerel-mode APCs can be /regular/ or /special/. Special kernel-mode APCs run at the =APC_LEVEL=. Regular kernel-mode APCs are delivered when certain conditions are met while special APCs preempt user-mode execution.

From [[https://medium.com/tenable-techblog/api-series-setthreadcontext-d08c9f84458d][API Series: SetThreadContext]]

#+begin_quote
KiSwapThread is kernel function for dispatching threads to run and it ends with a call to KiDeliverApc, which checks if there are any pending APCs in the target thread and executes them.
#+end_quote

**** Additional Readings

[[https://weblogs.asp.net/kennykerr/parallel-programming-with-c-part-1-asynchronous-procedure-calls][Parallel Programming With C++: APC]]

[[https://dennisbabkin.com/inside_nt_apc/][Inside NT's Asynchronous Procedure Call]]

[[https://guishou.blog.csdn.net/article/details/104326170][APC机制详解]]

** Exception Dispatching

Conditions that result directly from the execution of the running program.

- Structured Exception Handling: the application can gain control when the exception occurs and fix the condition or declare to the system the exception is not recognized and the system should search for a handler that might process the exception.
  + All exceptions except those simple ones are serviced by a kernel module /exception dispatcher/. The kernel transparently handles some exceptions such as debug trap by calling a debugger.
  + User mode environment subsystem can establish /frame-based exception handlers/, that is, exception handlers associated with a certain stack frame. The kernel searches exception handlers down the stack to handle the exception. If none, the default handler will be called.
  + kernel-mode mechanism
    - an exception is raised, the CPU transfers control to the kernel trap handler and establishes a trap frame.
    - The trap frame creates an exception record that contains the reason and the exception handler tries to locate a frame-based exception handler. Otherwise it's a fatal OS error.
  + user-mode mechanism
    - the exception dispatch would first tries to find a debugger process attached.
    - if none, it switches to user mode and tries to find a proper frame-based exception handler there.
    - if none, it switches back to kernel mode and tries to call the debugger again.
    - if none, it notifies the exceptio nport of the environment subsystem and let it take control. CSRSS simply notifies the user and kills the process. The POSIX subsystem sends a POSIX signal to the thread.
    - if the exception is still not handled, the process is killed by the kernel.

*** Unhandled Exception

Each thread has an unhandled exception handler declared in or =start-of-process= or =start-of-thread= function and installed at the top of the stack. This function (=UnhandledExceptionFilter=) provides the system-defined behavior for unhandled exceptions, based on =HKLM\Software\Microsoft\Windows NT\CurrentVersion\AeDebug\=. By default, it is configured to automatically start the debugger =Dr Watson= (not really a debugger, but a crash dumper and logger) and ask the user what to do.

- /Error Reporting/: error-reporting mechanism introduced in Windows XP/2003.
