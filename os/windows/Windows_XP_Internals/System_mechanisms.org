#+title: System Mechanisms

Base mechanisms used by the kernel-mode code

* Trap Dispatching

- /Trap/: a processor's mechanism for capturing the executing thread when an exception or an interrupt occurs and tranferring control to a fixed location (/trap handler/) in the OS.

- /interrupt/: an asynchronous event that is unrelated to what the processor is executing.
  + sources: I/O devices; processor clocks; timers etc.
  + handled by /Interrupt Service Routines/

- /exception/: a synchronous condition that results from the execution of a particular instruction. Handled by the /Exception dispatcher/ and then various exception handlers.
  + sources: memory access violation; certain debugger instructions; divide-by-zero errors etc.
  + the kernel also regards system service callss as exceptions, handled by /System Services/
  + virtual address exceptions are handled by /Virtual memory manager's pager/.
  + Unexpected exceptions are handled typicall by /KeBugCheckEx/, which halts the computer.

Either hardware or software can generate exceptions and interrupts. The processor records machine state on the kernel stack of the thread that is interrupted for a return later. Windows switches to the thread's kernel stack if the thread is in user mode. Windows creates a /trap frame/ on the kernel stack of the interrupted thread. The frontend trap handling functions perform the general trap handling and then transferring control to other functions to field the trap.

** Interrup Dispatching

Interrupt-driven devices allow the OS to run asynchronously by overlapping central processing with I/O operations. The kernel can also initiate a software interrupt and break into the execution of a thread. The kernel can also disable interrupts especially when processing an interrupt or dispatching an excpetion.

Interrupt trap handlers transfer control to an external ISR (often provided by device drivers) or an internal kernel routine to handle the interrupt.

*** Hardware Interrupt Processing

External interrupts come into the /interrupt controller/ which in turn interrupts the processor. The processor queries the interrupt controller for the /interrupt request (IRQ)/ and translates the IRQ into an index in the /interrupt dispatch table/ (filled at boot time) to find the appropriate interrupt dispatch routine.

The interrupt dispatch table (IDT, an implementation of /Interrupt Vector Table/) is also used to configure trap handlers for exceptions. The number of supported IRQs is determined by the design of the interrupt controller.

**** X86 Interrupt Controller

- i8259A Programmable Interrupt Controller (PIC)
  + 15 interrupt lines
  + uniprocessor support

- i82489 Advanced Programmable Interrupt Controller (APIC)
  + 256 interrrupt lines
  + multiprocessor support
  + necessary for x64 version of Windows
  + An I/O APIC accepts device interrupts and routes the interrupt (the algorithm used is selected by the Windows HAL) to a APIC local to a certain processor

*** Software-Level Interrupt Request Levels

An interupt controller defines the hardware-level interrupt prioritization.
The OS kernel imposes another level of interrupt priority scheme (/Interrupt Request Levels/)

- 32 on i386 and 16 on AMD64

- an IRQL is an attribute of an interrupt source.

- Each processor has an IRQL setting that changes as the OS code executes and  it determines which interrupts the processor can receive.
  + All components of the system attempt to keep the IRQL at passive level to allow device drivers to respond to hardware interrupts in a timely manner.
  + the CPU's IRQL is always at passive level when a user-mode thread is executing. Only the kernel-mode code can set the IRQL.

#+begin_src
┌──────────────┐
│    High      │halting the system
├──────────────┤
│  Power Fail  │not actually used
├──────────────┤
│Interprocessor│request another processor to perform an action
├──────────────┤
│   Clock      │ for system clock to track time of day; measure/allot CPU time to threads
├──────────────┤
│    Profile   │RTC kernel profiling
├──────────────┤
│              │
│              │device interrupts
│ for devices  │
│              │
├──────────────┤
│ DPC/dispatch │
├──────────────┤ software interrupts
│     APC      │
├──────────────┤
│   Passive    │ normal thread execution, not for interrupts
└──────────────┘
#+end_src

**** Determining the  IRQL of An Interrupt

A bus driver determines what interrupts can be assigned to a device and the PnP manager decides the acceptable interrupt assignments after taking into account previous assignments for all other devices.

Windows doesn't prioritize device IRQs in any controllable way and user-level applications execute only when a processor's IRQL is at passive level, making Windows unsuitable for real-time tasks. User-mode apps must wait for ISRs and DPC code to finish, which is uncontrollable for designers.

*** Interrupt Objects =nt!_kinterrupt=

- A kernel control object that allows device drivers to register ISRs for their devices.
  + ISR address
  + IRQL at which the device interrupts
  + the associated entry in the IDT with the ISR

Interrupt objects abstract PIC details from device drivers, allowing the drivers to register ISRs without accessing the IDT (usually in assembly code), thus improves portability.

Also, interrupt objects allow to kernel to call more than one ISR for any interrupt level =KiChainedDispatch=. The chained call is broken when one of the ISR claims the interrupt.

**** The Control Flow of Interrupts

The interrupt dispatch table (by the hardwawre) transfers the control to the handler code that resides in an interrupt code, which passes a pointer to the interrupt object to either =KiInterruptDispatch= or =KiChainedDispatch= to raise the IRQL (in the interrupt table) and actually execute the ISR, whose address is also stored in the interrupt object.

** Software Interrupts

- The kernel also generates software interrupts:
  + initiating thread dispatching
  + non-time-critical interrupt processing
  + Handling timer expiration
  + Asynchronous procedure execution in the context of a particular thread
  + Asynchronous I/O operations

*** Dispatch/Deferred Procedure Call Interrupts (DPC)

- for thread dispatching: DPC/distach-level interrupt is issued to defer thread dispatching until conditions are right (when the kernel completes its current work and lower the IRQL).

- /Deferred Procedure Call/: a function that performs a system task that is less time-critical than the current one.
  + represented by a /DPC object/ visible only to device drivers and other system code, maintained in one queue per processor. The system requests a DPC by creating a DPC object and placing it in a queue.
  + the kernel processes each DPC in the queue of the processor before the processor's IRQL drops from an IRQL of DPC/dispatch level or higher to a level lower than the DPC/dispatch level.
  + primarily for device drivers, but also for the kernel: the system clock issues an interrrupt at clock IRQL at every tick, updating the system time and decrementing a counter of the current thread that indicates the remaining time the thread can run. When the counter reaches zero, a rescheduling DPC is queued and the processor's IRQL is lowered. Device interrupts are handled before the DPC is executed.

**** Delivery

The kernel may or may not generate a DPC/dispatch-level interrupt when =KeInsertQueueDpc= queuing a DPC, depending on the target processor and the importance of the DPC. If the target processor is not the current one and the DPC is imporant enough, an interprocessor interrupt is issued to dispatch the DPC and execute it there. The system idle thread on a processor also drains the DPC queue for the process.

**** Additional Reading

[[https://www.osr.com/nt-insider/2009-issue1/deferred-procedure-call-details/][Deferred Procedure Call Details]]

*** Asynchronous Procedure Call (APC) Interrupts

- APC has a few properties
  + APC routines always run in the context of a particular user thread (thus in a particular address space)
  + can cause pre-emption of the currently running thread
  + APC routines are subject to thread scheduling (preemptible) and can acquire resources, wait for object handles, incur page faults and call system services.

- Described by /APC objects/: waiting in a thread-specific
  kernel-managed APC queue. Each thread has two APC queues,
  kernel-mode and user-mode. The kernel queues an APC object to the
  thread and then, if permitted, requests a software interrupt at APC
  level.
  + Kernel mode APCs interrupt a thread and execute a procedure
    without the thread's intervention or consent.
  + A thread can disable kernel-mode APCs by raising the IRQL to
    =APC_LEVEL= or by calling =KeEnterGuardedRegion=
  + User mode APC interrupts require the thread be in an /alertable wait state/. The thread handles all APCs in a FIFO order.
  + an APC may or may not runs in the =APC_LEVEL= IRQL.

- Uses: APC functions are queued to be called in the future.
    + kernel mode: OS work that must be completed within the address
      space of a particular thread: directing a thread to stop an
      interruptible system service; recoding the results of an async
      I/O operation in a thread's address space; making a thread
      suspend or terminate itself or to get/set its user-mode
      execution context. A thread can resume its exeuction after an
      I/O operation through the use of APCs
    + user mode: The I/O completion is implemented by queuing an APC
      to the thread that issued the I/O. The callback is exeucted
      when the thread is in an /alertable wait state/, typically by
      calling =WaitForXXX= with an /alertable/ option or by calling
      =SleepEx=. Then the kernel interrupts the thread, calls the APC
      routine in the context of that thread and resume thread's
      execution when the APC routine completes. User-mode APCs
      execute at passive level.

**** Delivery

APCs are delivered by calling =KiDeliverApc= at well-defined points. More details in [[https://dennisbabkin.com/inside_nt_apc/][Inside NT's Asynchronous Procedure Call]].

User-mode APCs are delivered when the thread enters an alertable
wait state. The kernel transfers control to the APC routine and resumes thread's execution when the APC routine completes.

Kerel-mode APCs can be /regular/ or /special/. Special kernel-mode APCs run at the =APC_LEVEL=. Regular kernel-mode APCs are delivered when certain conditions are met while special APCs preempt user-mode execution.

From [[https://medium.com/tenable-techblog/api-series-setthreadcontext-d08c9f84458d][API Series: SetThreadContext]]

#+begin_quote
KiSwapThread is kernel function for dispatching threads to run and it ends with a call to KiDeliverApc, which checks if there are any pending APCs in the target thread and executes them.
#+end_quote

**** Additional Readings

[[https://weblogs.asp.net/kennykerr/parallel-programming-with-c-part-1-asynchronous-procedure-calls][Parallel Programming With C++: APC]]

[[https://dennisbabkin.com/inside_nt_apc/][Inside NT's Asynchronous Procedure Call]]

[[https://guishou.blog.csdn.net/article/details/104326170][APC机制详解]]

** Exception Dispatching

Conditions that result directly from the execution of the running program.

- Structured Exception Handling: the application can gain control when the exception occurs and fix the condition or declare to the system the exception is not recognized and the system should search for a handler that might process the exception.
  + All exceptions except those simple ones are serviced by a kernel module /exception dispatcher/. The kernel transparently handles some exceptions such as debug trap by calling a debugger.
  + User mode environment subsystem can establish /frame-based exception handlers/, that is, exception handlers associated with a certain stack frame. The kernel searches exception handlers down the stack to handle the exception. If none, the default handler will be called.
  + kernel-mode mechanism
    - an exception is raised, the CPU transfers control to the kernel trap handler and establishes a trap frame.
    - The trap frame creates an exception record that contains the reason and the exception handler tries to locate a frame-based exception handler. Otherwise it's a fatal OS error.
  + user-mode mechanism
    - the exception dispatch would first tries to find a debugger process attached.
    - if none, it switches to user mode and tries to find a proper frame-based exception handler there.
    - if none, it switches back to kernel mode and tries to call the debugger again.
    - if none, it notifies the exceptio nport of the environment subsystem and let it take control. CSRSS simply notifies the user and kills the process. The POSIX subsystem sends a POSIX signal to the thread.
    - if the exception is still not handled, the process is killed by the kernel.

*** Unhandled Exception

Each thread has an unhandled exception handler declared in or =start-of-process= or =start-of-thread= function and installed at the top of the stack. This function (=UnhandledExceptionFilter=) provides the system-defined behavior for unhandled exceptions, based on =HKLM\Software\Microsoft\Windows NT\CurrentVersion\AeDebug\=. By default, it is configured to automatically start the debugger =Dr Watson= (not really a debugger, but a crash dumper and logger) and ask the user what to do.

- /Error Reporting/: error-reporting mechanism introduced in Windows XP/2003.

** System Service Dispatching

Triggered as a result of executing an instruction assigned to system service dispatching.

*** 32-bit x86

- Prior to Pentium 2: =int 0x2e= with the syscall number in =eax= and =ebx= pointing to a list of parameters.

- Pentium 2 and higher =sysenter= with the syscall number in =eax= and =edx= pointing to a list of parameter. =sysexit= ends the syscall. K6 and higher 32-bit AMD processors have a =syscall= instruction that works similarly to =sysenter=.

Windows detects the type of processor in use and sets up the appropriate syscall code at boot time.

*** 64-bit x86

the =syscall= instruction.

*** Kernel-Mode System Service Dispatching

The syscall number is used to locate the system service inforamtion in the /system service dispatch table/ (by =KiSystemService=), with each entry containing a pointer to a system service. The syscall number is generated automatically as part of a kernel compile.

=KiSystemService= copies the arguments from the user-mode stack to the thread's kernel-mode and any memory buffer is checked first for accessibility before copying to the kernel mode.

Each thread has a pointer to its system service table. Two bits of the syscall number is used to locate the system service table by the dispatcher.
    + the core executive system services in =Ntoskrnl.exe= is in =KeServiceDescriptorTable=. USER and GDI services in =Win32k.sys= are in =KeServiceDescriptorTableShadow= (also contains the core services).

Documented System API call functions in =Ntdll.dll= to access system services except for USER and GDI functions, which directly perform syscalls.

* Object Manager: Executive Component Responsible for Creating, Deleting, Protecting and Tracking Objects

- A common uniform mechanism for using system resources

- isolate object protection to one location in the OS

- a mechanism to charge processes for their use of objects so that limits can be placed on the eusage of system resources

- an object-naming scheme that can incorporate existing objects such as devices, files and directories of a filesystem or other independent collections of objects.

** Two Kinds Of Objects

- /executive objects/: implemented by the components of the executive
  + primitives used to build the environment subsystems. The environment subsystem supplies to its applications with their own sets of objects, many of which correspond directly to executive objects.
  + some examples: symlink (not just file symlinks), process, thread, job, section (file mapping object), file, access token (the security profile of a process or a thread), event, semaphore, mutex (called mutant in the kernel), timer, IoCompletion, key (reistry key), WindowsStation, desktop

- /kernel objects/: more primitive set of objects omplemented by the Windows kernel.

** Object Structure

The object manager controls the object headers
and the owning executive components control the object bodies of the object types they create.

*** Object Header

Common to all objects

- /Object name/: used for identify and make visible to other processes for sharing.

- /Object directory/: a hierarchical structure in which store object names.

- /Security descriptor/

- /Quota charges/: charged against a process

- /Open handle count/ and /open handle list/

- /Object type/: points to a type object that contains attributes common to objects of this type

- /refcount/: the number of times a kernel-mode component has referenced the address of the object.

**** Type Objects

- Common to all objects of a particular type, created once when creating a new object type.

- An object Of its own type, a type object.

- A few type object attributes are visible to user mode
  + /Type name/: e.g. "process", "event", "port"
  + /Pool Type/: whether objects should be allocated from paged or nonpaged memory
  + /Default quota charges/
  + /Access Types/: the types of access a thread can request when opening a handle to an object of this type
  + /Generic access rights mapping/: how read/write/execute/all map to the type-specific access rights.
  + /Synchronization/: whether a thread casn wait for objects of this type to change from one state to another to synchronize its execution.
  + /Methods/

*** Object Methods

A new object type registers one or more methods with the object manager.

**** Common Object Methods

These methods do not map to user-mode APIs.
They are called by the object manager at well-defined points in the lifetime of objects of that type.

- /Open/: only for the WindowsStation to request for some memory from =Win32k.sys=.

- /Close/:

- /Delete/: for the object to clean up its internal resources.

- /Query name/, /Parse/: the object manager delegates control of finding an object to a secondary
  object manager if it finds an object that exists outside the object manager namespace
  (the others are filesystem namespace and the registry namespace). The object manager
  calls the /parse/ method of the node if any with the remained of the path.

- /Security/: security information of a file is stored in the file itself and therefore the I/O
  system must call this method to read/modify it.

*** Object Handles and The Process Handle Table

Referring to an objet by its handle is faster than using its name
because the object manager can skip the name lookup and find the object directly.
Also it provides a consistent interface to reference objects regardless of their type.

**** Handle Table

An object handle is an index into a process-specific /handle table/.
The handle table is a three-level table that stores pointers to objects,
some flags (embedded in the unused/constant part of the pointer integer) and access masks.
On WinXP, only one third level table is created at process startup and
it has =(PageSize)/(PointerSize)-1= entries; more tables are created if needed.

**** Kernel Handle Table

Kernel-mode code uses a different handle table =ObpKernelHandleTable=

*** Object Security

A process must specify a set of /desired access rights/ when opening a handle to an object.
The object manager passes this set of access rights to the /security reference monitor/
to check. The security reference monitor then returns a set of valid access rights to the object
manager that indicates the granted access rights to the process.

*** Object Retention

Objects may be /temporary/ (freed when not used) or /permanent/ (present until explicitly freed).

- temporary objects are refcounted by handle (user-mode) or by pointer (kernel-mode)

- when the pointer refcount reaches 0, the object manager deletes the object from memory.

*** Resoruce Accouting

The Windows object manager provides a central facility for resource accounting. Each object header contains an attribute /quota charges/ that records how much the object manager subtracts from a process's allocated paged or nonpaged pool quota. Each process points to a quota structure that records the limits and current values for /nonpaged pool/, /paged pool/ and /page file usage/. =HKLM\System\CurrentControlSet\Session Manager\Memory Management\=

*** Object Names

The object naming scheme is strctured as hierarchical and is used to distinguish one object from another and for finding/retrieving a particular object and for sharing among processes (placed in the global namespace).

Only =BaseNamedObjects= (mutexes, events, semaphores, waitable timers and section objects) and =\GLOBAL??= (MS-DOS device names, full of symlinks) are visible to user mode.

Object names are global to single computer but not visible across a network.

Symlinks (themselves objects) apply to objects and not just files. The most common use is to map the Windows internal devices to Win9x/DOS-style drive letters and serial ports.

**** Session Namespaces

The console session has access to the /global/ namespace. Additional sessions are given a session-private view of the namespace =\Session\sessionId\=
including

- =\DosDevices= (renamed to the session ID)

- =\Windows=

- =\BaseNamedObjects=

The object manager creates objects under the session-specific directory unless the =\Global\= prefix is explicitly specified. However, under WinXP/2003 =\Global\= is not necessary to find an object in the global directory since the object manager would automatically look in the global directory for the object if not found in the local directory.

* System Worker Threads

System worker threads perform work on behalf of other threads:
doing work for tasks running at higher IRQL; for use by device drivers.

A device driver or an executive component request a system worker thread's services by calling
=ExQueueWorkItem= or =IoQueueWorkItem=, which places a work item on a queue dispatcher object
where the worker threads look for work.

** Worker Threads

- /delayed worker threads/ (7 on XP/2003): at priority 12 for work items that are not time-critical

- /critical worker threads/ (5 on XP/2003): at priority 13 with their stacks in physical memory at all times.

- /the hypercritical worker thread/ (1 on XP/2003)

The system creates /dynamic worker threads/ for critical work items if necessary.

* Local Procedure Call (LPCs)

An interprocess communication facility for high-speed message passing. Used for
    - local RPC
    - a few Windows APIs that send messages to the Windows subsystem process.
    - communication between the security reference monitor and the LSASS process.

LPC can exchange messages by either copying the data from one address space to another or by directly operarting on a shared section.

The client first connects to the server's /connection port/
then a server communication port and a client communication port are established for the two parties.
which are used by the two for further communication.

* Windows Global Flags

the =NtGlobalFlag= structure, a set flags (not for customers)
that controls internal debugging, tracing and validation support in the OS,
initialized by =HKLM\System\CurrentControlSet\Control\Session Manager\GlobalFlag=.

Use =Gflags.exe= to view and change it.

* Kernel Event Tracing

For recording trace data of the operation of several components of the kernel and some device drivers for use in system troubleshooting.

A /controller/ starts/stops logging sessions and manage buffer pools.
A /provider/ provides event classes and accepts commands from a controller for starting/stopping traces of the event classes.
A /consumer/ selects one or more trace session for which it reads trace data.

A logging session /NT Kernel Logger/ is for use by the kernel and core drivers, /provided/ by the WMI device driver.
The WMI driver is responsible for starting a thread in the system process to log the trace data in a log file.

* WoW64

- Implemented as a set of user-mode DLLs.
  + =Wow64.dll=: process and thread creation, hooks exception dispatching and base system calls exported by =Ntoskrnl.exe=. Also filesystem direction and registry direction and reflection.
  + =Wow64Cpu.dll=: manages the 32-bit CPU context of each running thread inside Wow64 and provides processor architecture-specific support for switching CPU mode from 32-bit to 64-bit and vice versa.
  + =wow64win.dll=: intercepts the GUI system calls exported by =Win32k.sys=

- 2GB or 4GB depending on the large address flag

- /image loading/: =Wow64.dll= loads the 32-bit =Ntdll.dll= and maps it into the address space. The CPU runs in 32-bit mode.

- /Syscalls/: special 32-bit versions of =Ntdll.dll=, =User32.dll=, =Gdi32.dll= are used. These dlls calls into Wow64 and transitions into native 64-bit code and issues the corresponding native 64-bit syscalls with any conversion of parameters necessary.

- /exception dispatching/: Wow64 captures the native exception and context record from the kernel and prepares a 32-bit exception and context record and then dispatches it.

- /User Callback/: parameters are converted.

- /filesystem redirections/
  + =\Windows\System32\= is not renamed to facilitate the porting of applications to 64-bit.
  + 32-bit processes have their paths to =System32= redirected to =Syswow64= and =Program Files= to =Program Files (x86)=.
  + some other folders under =System32= are exempted from tis redirection.

- Components of 32-bit and 64-bit versions have different views into the registry. Mainly at =HKLM\Software=, =HKCR=, =HKCU\Software\Classes= where a key called =Wow6432Node= stores 32-bit configuration information. All other parts of the registry are shared between 32-bit and  64-bit applications. =LocalServer32= CLSIDs are reflected to the 64-bit view.

** Restrictions

- Little 16-bit support

- 32-bit kernel mdoe device drivers are not supported

- 64-bit processes cannot load 32-bit DLLs and vice versa.

* Synchronization: Mutual Exclusion

Mutual Exclusion on a multiprocessor system.

** High-IRQL Synchronization

Raising the IRQL high enough to prevent other potential access (interrupts) to the global resource.

*** Interlocked Operations

Atomic operations provided by the ISA, capable of locking the multiprocessor bus.

*** Spinlocks

- =KeAcquireSpinlock=, =KeReleaseSpinLock=

The kernel keeps spinning until acquiring the lock.

The lock is often implemented as a hardware-supported test-and-set instruction. On uniprocessors,
a simple IRQL is already enough.

On Windows, any spinlock is associated with an IRQL at or higher than the DPC/dispatch level,
masking any thread dispatching.

*** Queued Spinlocks

- =KeAcquireQueuedSpinlock=

The spinning processors are put in a queue waiting for the spinlock.
The waiting processors do not test the spin lock directly. Instead, a processor
checks the flag of the process ahead of to query whether the turn has come for
itself. The multiprocessor's bus isn't as heavily trafficked by interprocessor
synchronization. This also gives a more consistent performance across processors
since it enforces a FIFO ordering to the lock.

*** Instack Queued Spinlocks

Queued spin locks dynamically allocated with =KeAcquireInStackQueuedSpinlock=, =KeReleaseInStackQueuedSpinlock=.

*** Executive Interlocked Operations

A few synchronization functions implemented with spinlocks:

- =ExinterlockedPopEntryList=, =ExinterlockedPushEntryList=

- =ExinterlockedInsertHeadList=, =ExinterlockedRemoveHeadList=.
