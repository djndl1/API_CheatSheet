#+title: Mingw

* Windows XP Support

- a modified MSYS2 is available [[https://archive.org/details/msys2xp][here]], with many userland utils replaced by =busybox=. Another way to get proper Bash support
  is =Git= v2.10.0.

- [[https://sourceforge.net/projects/mingwbundle/][mingwbundle]]: a bundled MSYS with legacy MinGW toolchains.

- [[https://github.com/niXman/mingw-builds-binaries/releases][Mingw Builds]]: the official MinGW-w64 builds work before v12. Its bundled gdb
  does not. Some versions of [[https://github.com/ssbssa/gdb][this]] unofficial Windows build of gdb may
  complement.

- [[https://github.com/brechtsanders/winlibs_mingw][Winlibs]]: working builds include
  + GCC 7.5.0 + MinGW-w64 7.0.0 (release 1), =gdb= works
  + GCC 8.4.0 + MinGW-w64 7.0.0 (release 1), =gdb= fails
  + GCC 9.2.0 + MinGW-w64 7.0.0 (release 4), =gdb= fails

** LLVM

the last support version is 3.7.1, which is only better than GCC 4.

* Unicode

- =wmain=: UTF-16 environment and command line arguments, as well as a MBCS version.
  +  =-municode= is necessary and the macros =_UNICODE= (for =tchar.h=) and =_UNICODE= (for Win32 API functions) should be defined.
  + =wmain= should be marked as =extern "C"= under C++.

* [[https://reactos.org/wiki/PSEH][PSEH]]: SEH Handling

#+begin_src cpp
#include <pseh/pseh.h>

#include <windows.h>
#include <iostream>


using std::cout;

extern "C"
int wmain(int argc, wchar_t *argv[]) {
    _SEH_TRY {
        int a = 4;
        int b = a / 0;
    }
    _SEH_HANDLE {
        std::cout << "divied by zero: " << std::hex << _SEH_GetExceptionCode() << '\n';
    }
    _SEH_END;

    return 0;
}
#+end_src

* =__try1=

Sorta works, but limited

[[https://sourceforge.net/p/mingw-w64/mailman/message/35219710/][Report on __try1 and SEH]]

[[http://www.programmingunlimited.net/siteexec/content.cgi?page=mingw-seh][SEH and MinGW]]
