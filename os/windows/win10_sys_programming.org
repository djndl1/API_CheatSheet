Before everything: to correctly output UTF-16 under windows, use =_setmode()=

* Overview

Processes manage, threads run.
A process has:
  1. an executable program;
  2. a private virtual address space;
  3. an access token (/primary token/), an object that stores the default security context of the process.
  4. a private handle table to Executive (kernel) objects, such as events, semaphores, and files.
  5. One or more threads of execution.

32-bit processes on Windows has an address space of 2GB unless the =LARGEADDRESAWARE= flag is specified.

A thread has:
  1. current access mode, either user or kernel
  2. execution context, including processor registers
  3. a call stack
  4. TLS array
  5. base priority and a current dynamic priority
  6. processor affinity (which processors the thread is allowed to run on)
  

** General System Architecture

#+BEGIN_SRC 
                                  +-----------------+       +---------------+     +-----------------+    +------------------+
                                  | Susbsystem      |       |     System    |     |    Service      |    |        User      |
                                  |  Process        |       |               |     |   Processes     |    |      Processes   |
                                  | (CSRSS.exe)     |       |   Processes   |     | (services.exe)  |    |                  |
                                  +-----------------+       +---------------+     +-----------------+    +------------------+
                                  a helper to the kernel 
                                 for managing processes
                                 under that subsystem
                                                                     +------------------------------------------------------+
                                                                     |                    Subsystem DLLs                    | // kernel32.dll, user32.dll, gdi32.dll, advapi32.dll, combase.dll etc. the Windows Subsystem
                                                                     +------------------------------------------------------+

                                  +-----------------------------------------------------------------------------------------+
                                  |                                        NTDLL.DLL                                        | // NT Native API, the heap manager, the image loader, and some part of the user-mode threadpool
                                  +-----------------------------------------------------------------------------------------+

+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

                                                               +------------------------------------------------------+
                                 +------------+                |                                                      |
                                 |            |                |                    Executive                         | object manager, memory manager, IO manager, plug and plug manager, 
                                 | Win32k.Sys |                |                                                      | power manager, configuration manager
                                 |            |                +------------------------------------------------------+
                                 +------------+
               kernel-modde part of the Windows Subsystem      +----------------------+     +-------------------------+
               mainly the GUI and GDI part                     |                      |     |                         |
                                                               |    Device Drivers    |     |         Kernel          | // thread scheduling, interrupt and exception dispatching,
                                                               |kernel modules        |     |                         | // kernel primitives (mutex, semaphore etc.)
                                                               +----------------------+     +-------------------------+

                                         +-------------------------------------------------------------------+
                                         |                                                                   |
                                         |                  Hardware Abstraction Layer                       |
                                         |                                                                   |
                                         +-------------------------------------------------------------------+

            +---------------------------------------------------------------------------------------------------------------------+


                                    +---------------------------------------------------------------------------------+
                                    |                                                                                 |
                                    |                             Hyper-V Hypervisor (under hypervior context)        |
                                    |                                                                                 |
                                    +---------------------------------------------------------------------------------+
  
#+END_SRC
   

** App Development
  
There are two fundamental API:
1. Windows API: MFC as a wrapper, .NET built upon it.
2. Component Object Model: ATL, WTL as wrappers. WinRT is built on an enhanced version of COM.

 [[https://docs.microsoft.com/en-us/cpp/code-quality/understanding-sal?view=msvc-160][Source Annotation Language (SAL)]  

* Objects and Handles

Kernel objects: data structures created and managed by the /Object Manager/.  Kernel objects are refcounted. 

Kernel objects are accessed through handles, which provides abstraction and security and are private to a process.
Handle values are multiples of 4, zero is never a valid handle value. A handle is logically an index to an array of entries 
in a handle table maintained by process basis and points to a kernel object residing in system space.

A kernel object has at least:
  1. Name
  2. Directory
  3. handle count
  4. pointer count (total refcount)

 A common trick to create a single instance program is to use some named kernel object, usually a mutex.
 
Inside the entry pointer to by a handle, there are 
  1. the actual pointer to the kernel object, 
  2. inheritance flag: a mechanism that allows sharing an object between cooperating processes
  3. protect from close flag: prevents the handle from being closed, rarely used
  4. audit on close flag: an audit entry in the security log should be written when the handle is closed
  5. access mask, which indicates what can be done with the handle (typically, the creating process has full access to the object, but the opening process might not).

#+BEGIN_SRC C++
bool KillProcess(DWORD pid)
{
    HANDLE hProcess = ::OpenProcess(PROCESS_TERMINATE, FALSE, pid);
    if (!hProcess)
        return false;
    BOOL success = ::TerminateProcess(hProcess, 1); // kill the process with some exit code

    ::CloseHandle(hProcess);

    return success != FALSE;
}
#+END_SRC
 
Some handles have special values and are not closablei, mostly the current process, the current thread etc.

Windows Implementation Library (WIL) provides a C++ wrapper for these API.

A size member of a structure can be used to maintain version compatibility so that newly-added members are simply ignored.

Some types of objects have string-based names. When a existing named object is =Created=, it's simply opened, in which case =GetLastError= returns =ERROR_ALREADY_EXISTS=. The final name is typically =\Sessions\sessionID\BaseNamedObjects\ObjectName= or even =\Sessions\sessionID\AppContainerNamedObjects\ObjectName=. Object names are session-relative. Non-session relative objects are prepended with =Global\= to be created in session 0.

The  entire Object Manager namespace hierarchy resides within the memory and is viewed with =WinObj=.

Objects can be shared among processes by
   1. by names
   2. by handle duplication =DuplicateHandle()=. The tricky part is how the target process knows about the duplicated handle, which requires some other form of IPC.
   3. by handle inheritance

For security reason, there is a way to create a private object namespace that only the cooperating processes know about.
* Processes
  
** Types

1. Protected Processes: support DRM; no other process (including with adminstrator rights) can read the memory within a protected process address space.
2. UWP Processes: host the WinRT; execute inside an AppContainer.
3. Protected Processes Light (PPL): enhanced protected processes.
4. Minimal Processes: empty address space without the usual images and data structures
5. Pico Processes: for WSL

** Basic Information

- Name: normally the executable name, not unique. Some processes don't have an executable name at all.

- PID: unique ID, multiple of 4. A combination of the PID and the process start time is truly unique on a certain system.

- status: running; suspended; not responding. UWP is special in that they are suspended when all threads are suspended in the background (such as when minimized). Non-UWP non-GUI processes are always shown with a running status unless all threads are suspended.

- User Name: primary token is attached to the process that holds the security context (the groups, the privileges, etc.)for the process based on the user.

- Session ID: session 0 for system process and services; session 1 and higher are for interactive logins.

- memory: active private set (the RAM used by the process alone)

- base priority/priority class: the base scheduling priority for threads executing in that process
   + idle (low) = 4
   + below normal = 6
   + normal = 8
   + above normal = 10 
   + high = 13
   + real-time 24
     
** Process Creation

1. Open Image File
2. Create and initialize Kernel Process Object
3. Create and initialize kernel thread object
4. map image and NTDLL
5. notify CSRSS of new process and thread
6. Create PEB (Process Environment Block) and TEB (Thread Environment Block)
7. load required DLLs: the loader searches among the =KnownDLLs= DLLs, the executable directory, the CWD, the system32/syswow64 directory, the windows directory, the =PATH=.
8. execute the entry function

https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-apisets

*** The entry point

Windows has four entry point function: =(w)main=, =(w)WinMain=. For the latter the command line is a single string to be parsed by =CommandLineToArgvW()=. A process can get its command line at any time by calling =GetCommandLine()=.

The environment variables can be a third argument for =(w)main=, or call =GetEnvironmentStrings()=, which is a single memory block separated by '\0'. 

#+BEGIN_SRC C
 SetEnvironmentVariable(); 
 GetEnvironmentVariable(); 
 ExpandEnvironmentStrings();
#+END_SRC

*** =CreateProcess=
    
#+BEGIN_SRC C
 BOOL CreateProcessW(
  LPCWSTR               lpApplicationName, // executable full path or NULL
  LPWSTR                lpCommandLine, // args or executable and args, must be non-const for no reason 
  LPSECURITY_ATTRIBUTES lpProcessAttributes,
  LPSECURITY_ATTRIBUTES lpThreadAttributes,
  BOOL                  bInheritHandles, // whether to allow the child to inherit handles
  DWORD                 dwCreationFlags, // various flags
  LPVOID                lpEnvironment, // NULL to copy the parent's
  LPCWSTR               lpCurrentDirectory,  // set the CWD
  LPSTARTUPINFOW        lpStartupInfo, // at least set the size and zero the structure
  LPPROCESS_INFORMATION lpProcessInformation // output handles and identifiers for the new process and its primary thread
);
#+END_SRC

*** UWP Processes

1. Runs in a sandbox /AppContainer/.
2. Its process' state is managed by the Process Lifetime Manager
3. Capabilites (access control) are declared
4. Single instance by default

** Process Termination

A process terminates if

1. all the threads in the process exit or terminate
2. any thread in the process calls =ExitProcess=
3. the process is terminated (usually externally but could be because of unhandled exception) with =TerminateProcess=


=ExitProcess()= shutdown all other threads in the process, detach all DLLs, and terminates the proce3ss and the calling thread. =TerminateProcess()= does not call =DllMain= for all DLLs so no cleanup for them.
