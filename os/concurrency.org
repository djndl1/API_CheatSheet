#+TITLE: Concurrency

Constructs for synchronizing program execution in some concurrent programming languages. An object that acts as a proxy for a result that is initially unknown.

The terms /future/, /promise/, /delay/ and /deferred/ are often usedc interchangeably, although some differences in usage between /future/ and /promise/ are made:
A future is a read-only placeholder view of a variable, while a /promise/ is a writable, single assignment container which sets the value of the future. Setting the value of a future
is also called /resolving/, /fulfilling/ or /binding/ it.

https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html

* Basic Concepts

Multithreading allows a process to overlap I/O and computation, makes a GUI more
responsive, speeds up performance through parallelism. Multithreading require
less overhead to manage than processes and less expensive in  terms of
mutual communication.

** Threads in Java

Any Java program is concurrent.
Several system threads are started automatically whenever a Java program is
executed.

** Threads in Win32

A Windows thread may start suspended and resume later to run.
Closing the thread handle simply closes the handle. There is no
dedicated =join= function to join a thread. Another thread may
wait for it with =WaitForSingleObject()= or =WaitForMultipleObjects()=
A thread may enter deadlock waiting for itself.
The thread function must be called with =WINAPI= (=__stdcall=).

** Threads in Pthread

=pthread_join()= and =pthread_detach()= are the destroy function of pthreads.
Joining oneself returns with an error of detected deadlock.

** Thread Communication

Threads may communicate through shared memory or dedicated communication
channels,
on the same machine or across the network.

*** Nondeterminism

Nondeterministic execution behavior is caused by the unpredictable rate of
progress of threads executing on a single or multiple threads and the use of
nondeterministic programming constructs.

Nondeterministic results do not necessarily indicate the presence of an error.
The real world is nondeterministic in nature. Concurrency (out-or-order execution or
in partial order without affecting the outcome) in itself implies
nondeterminism. Nondeterminism causes
nondeterministic bugs during testing and debugging.
It is the programmer's duty to deal with such inherent
nondeterminisms
to ensure proper execution and correct outcome.

*** Atomic Actions

An atomic action is atomic in that the state transformation of the program is
indivisible, not the action itself. Context switches may occur in the middle
of an atomic action but other threads see only the state before and after, not
some intermediate state.

Individual machine instructions are typically atomic (load, add, subtract,
store).
The execution of a concurrent program results in a sequence of atomic actions
for each thread.
The state transformation of the entire program is a set of atomic actions in
some sequential order completed by all threads together. This interleaving of
the atomic actions determines the result of the execution.

- *critical reference* :: a reference in an expression to a variable that is
  changed by another thread

- *at-most-once* :: a condition under which expression evaluations and
  assignments will appear to be atomic. At most one shared variable and the
  shared variable can referenced at most one time.
  + An assignment statement =x = e= satisfiese the at-most-once property if either
    - =e= contains at most one critical reference and =x= is neither read nor
      written by another thread
    - or =e= contains no critical references in which case =x= may be read or
      written by other threads
  + an expression that is not in an assignment satistifies at-most-once if it
    contains
    no more than one critical reference.

Even if statements are atomic, their grouping may not be indivisible and thus
their nondeterministic interleaving may cause unexpected results. If necessary,
 these groupings may be made atomic.

** Thread Synchronization

For grouping of atomic actions (*critical section*), to avoid data races, a
critical
section has to be made atomic by synchronization. One type of synchronization is
*mutual exclusion*. Another type of synchronization is called *condition
synchronization* where the state of a program is required to satisfy a particular condition
before some action occurs.

** Multithreading Testing and Debugging

The purpose of testing is to find program failures.

- *Failure* :: an observed departure of the external result of software
  operation from software requirements or user experience. Failures can be
  caused by hardware or software faults or by user errors.

- *Software fault* :: a defective, missing, or extra instruction or a set of
  related instructions that is the cause of one or more actual or potential failures.

- *Debugging* :: the process of locating and correcting faults.

Due to the nondeterministic nature of multithreaded programs, the traditional cycle
of testing and debugging no longer works. Bugs are not always reproducible; a
single successful execution does not guarantee future success. Testing itself
may not even guarantee correctness. The assumption of /reproducible testing/
doesn't hold for concurrent programs.

- *Sequence Feasibility* :: a sequence of action that is allowed by a system is
  said to be a feasible sequence.
  + Testing involves determining whether or not a given sequence is feasible or
    infeasible. Testing all possible sequences itself may be infeasible. An
    alternative approach is to force selected sequences to be exercised for
    detecting faults.

- *Sequence Validity* :: not every feasible sequence is desired.

- *Probe Effect* :: tracing of program execution itself may alter the state and
  behavior of the program, resulting in different sequences between production
  and testing.
  + Probe effect may not always be negative: they introduce random interference
    into the program and may cause potential faults to occur.

* The Critical Section Problem

#+begin_quote
A code segment that accesses shared resources and that has to be executed as an atomic action is referred to as a critical section
#+end_quote

A critical section must be

1. /Mutual exclusion/

2. /bounded waiting/: there is a bound on the number of times that other threads are allowed to enter their critical sections before this thread's request is granted

3. /progress/: only the threads that are executing in their entry- or exit-section can participate in the decision about which thread can enter its critical section next
   and this decision cannot be postponed indefinitely

** Software Solution to The Two-Thread Critical Section Problem

With two threads T0 and T1, the entry- and exit- sections must satisfy

1. If T1 is in its critical section, T0 must wait in its entry-section

2. If T1 is not its critical section and does not intend to enter, T0 should be able to enter its critical section

3. Only one of the two threads can win when contending to enter the critical section

4. If one of the thread is exiting while the other is waiting at the enter section, the waiting one should be allowed to enter

The enter- and exit- sections needs not be critical sections themselves provided that all assignments
and expressions involving shared variables are atomic operations.

Consider three important cases while checking a solution on the critical section problem

1. T0 intends to enter while T1 is not in its critical section or in its entry-section, if T0 cannot enter, the progress requirement is violated

2. If T1 is in and T0 is trying to enter, if both can be in their critical sections, the mutual exclusion requirement is violated.

3. Both are trying to enter its critical section

*** Peterson's Algorithm

#+INCLUDE "concurrency/Petersons.cpp" src cpp

One of the feature of the Peterson's algorithm is that it doesn't set any flag after the check and enters the critical section immediately and only after exiting the critical section it toggles off its own intent and let the other in. Once the check in one thread is passed, the check on the other thread automatically fails due to the use of the =turn= variable. The use of intent variables informs the other thread to block. The turn variable breaks the tie if both are trying to enter.
