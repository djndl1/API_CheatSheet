#+title: Ascii

8-bit (7 bits used). Internally, characters are organized into *sticks*, a group
of 16 characters.

Sorting is done in ASCII numerical value.

* Control Characters

Control control characters were introduced for printing and display control
(form feed, line feed, carriage return, backspace),
data structuring (file/group/record/unit separators), transmission control
(=SOH=, =STX=, =ETX=, =ETB=, =ESC=)

Printing control characters were first used to control the physical mechanism of
printers.
With video terminals, these control characters were adapted.

The first 32 characters and the last one (number 127) used for in-band control of
peripheral devices and to provide meta-information about data streams. ASCII
itself does not define any mechanism for describing the structure or appearance
of text within a document.

Early terminals cannot handle state well so each function is assigned a single code
instead of a control sequence.

** C0

The control key on the keyboard was original used to send C0 control characters.
Modern computer keyboards generates *scancodes* that identify specific physical
keys that are pressed.
It is now up to the computer whether to interpret the key press as control characters.

- =NUL=, =0x00=, =^@=  :: the original meaning is NOP to signal a time delay or moving on to
  the next position)

- =SOH=, =0x01= =^A= :: first character of the heading of a message

- =STX=, =0x02= =^B= :: start of text; terminates the head and starts the message text

- =ETX=, =0x03= =^C= :: ends the message text (mostly a record), starts a
  footer; to distinguish data frames in the data link layer.
  + used as the interrupt key is a transformation of "end of text".

- =EOT=, =0x04=, =^D= :: end of transmission, may place terminals on standby.
  + releasing circuits, disconnecting terminals, signal end of file (which is not
    really a character, but a condition) in Unix.

- =ENQ=, =WRU=, =0x05=, =^E= :: enquiry, send a response to the receiving end to
see if it is still present. The receiver is supposed to send back some
identification message, the status of the remote station.

- =ACK=, =0x06=, =^F= :: acknowledge, indication of successful receipt of a
  message

- =BEL=, =0x07=, =^G= :: bell, alert; call for attention from an operator
  + =printf '\a'= or =echo =, or =tput bel=

- =BS=, =0x08=, =^H= :: backspace, move one position leftwards. Next character
  may overprint or replace the character that was there.
  + a backspace is distinct from the delete key, which strikes out a character.
    Historically on typewriters, a backspace is used to add a diacritic to a letter.

- =HT=, =0x09=, =^I= :: character/horizontal tabulation; move right to the next
  tab stop.

- =LF=, =0x0A=, =^J= :: line feed; move down the same position on the next line.
  + Multics and later Unix developed the idea of device driver, allowing a
    single =LF= to represent the concept of newline.
  + C/C++, Perl interprets =\n= as a full new line while Java, PHP, and Python
    distinguish =\n= from =\r\n=.Moreover, Java provides methods (=readLine()=, =println()=) that
    automatically appends a newline. Languages like C# provides special
    variables, constants and subroutines to represent a newline.
  + Unicode-conforming applications uses more than just =LF= or =CRLF= as
    indicate a newline
  + On Unix, newlines are viewed as line terminators and requires a newline at the
    end of a file while some programs view newlines as line separators.

- =VT=, =0x0B=, =^K= :: line/vertical tabulation; move down to the next
  vertical tab stop

- =FF=, =0x0C=, =^L= :: form feed; move down to the top of the next page.
  + Later on Unix it clears the screen or redraws TUI (logically a new page!).

- =CR=, =0x0D=, =^M= :: carriage return; move to column zero of the same line.
  + aside from forming a new line with =LF=, carriage return provides the
    ability to overprint the line with new text. Also, a single =CR= followed by
    multiple =LF= saves time than multiple pairs of =CRLF=.

- =SO=, =0x0E=, =^N= :: shift out; switch to an alternative character set or a
  different font.
  + originally, theses characters were to provide a way to shift a colored ribbon.

- =SI=, =0x0F=, =^O= :: shift in; return to the regular

- =DLE=, =0x10=, =^P= :: Data link escape; cause a limited number of contiguously
  following characters to be interpreted in some different way
  + with an escape mechanism, certain character sequence may be used for control
    instead of one character for one function.

- =XON=, =0x11=, =^Q=; =TAPE=, =0x12=, =^R=; =XOFF=, =0x13=, =^S=; =DC4=, =0x13=, =^T= :: turn on or off devices
  + for in-band software flow control: when one end is unable to accept any more
    data, it sends =XOFF= to the other end and the other end suspends
    transmission. Once the first end is ready again, it sends =XON= to request
    the other end resume transmission. The disadvantage is long delay (in-band
    and software-implemented) and low reliability. Also, =XON= and =XOFF= cannot
    appear in the data, unless some escape mechanism is implemented.

- =NAK=, =0x15=, =^U= :: negative acknowledge; negative response to a sender,
  such as a detected error.

- =SYN=, =0x16=, =^V= :: Synchronous Idle; Sent in synchronous transmission
  systems when no other character is being transmitted.
  + Early synchronous models have to send data constantly when there is no data
    to send.

- =ETB=, =0x17=, =^W= :: end of a transmission block of data when data are
  divided into such blocks for transmission purposes.  Used for segmenting data
  into blocks when the block structure is not necessarily related to the
  processing function.

- =CAN=, =0x18=, =^X= :: Cancel; Indicates that the data preceding it are in
  error or are to be disregarded.

- =EM=, =0x19=, =^Y= :: end of medium, the end of the usable portion of the tape
  has been reached.

- =SUB=, =0x1A=, =^Z= :: substitute, replaces a character that was found to be
  invalid or in error, or used to pad data.
  + used by CP/M and later DOS to indicate end of file or end of a character
    stream.
  + used by Unix shells to suspend the current process.

- =ESC=, =0x1B=, =^[= :: Escape, alters the meaning of a limited number of
  following bytes.
  + nowadays used almost to introduce an ANSI escape sequence for in-band signaling.

- =FS= (=^\=); =GS= (=^]=); =RS= =^^=; =US=, =^_= :: delimiters to mark fields
  of data structures.

- =SP=, =0x20= :: space; technically not a control character but the first
  printable character.

- =DEL=, =0x7F=, =^?= :: delete; ignored; used to delete characters on punched
  tape by punching out all the holes.

** C1

- =NEL=, =0x85= :: equivalent to =CRLF=, match the EBCDIC control character.


* Printable Characters

Leters, digits, and punctuation marks and other symbols.
