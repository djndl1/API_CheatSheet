#+title: ODBC Programming
#+bibliography: ODBC.bib

* Background

- [[https://learn.microsoft.com/en-us/sql/odbc/reference/embedded-sql?view=sql-server-ver16][/Embedded SQL/]] (see Oracle Pro*C/C++ for an example): tightly integrating SQL with the host language (C)
  + the code is first preprocessed, resulting in standard C, with the SQL code
    transformed into library calls.
  + since the SQL is transformed into library calls, embedded SQL is static
    (dynamic embedded SQL does exist) and tightly
    coupled with the host code, the platform and the DBMS in use.
  + LINQ-to-SQL, JOO, EntityFramework can be seen as variants of embedded SQL.
    + dynamic in nature, emitted by the framework.

- SQL Modules: the host programming language calls into SQL procedures,
  decoupling the program and SQL.

- Call Level Interface: library API call
  + nowadays the most common method to access a DBMS.
  + similar to dynamic SQL in that SQLs are passed to the DBMS at run time.
  + commonly used in client/server architectures

- SQL/CLI: the standardized core part of ODBC. Pure SQL/CLI is rare in practice.
  + no implementation-specific transformations on source code

- ODBC abstraction is no longer a strong requirement in the era of web.

- implementations:
  + the Windows ODBC
  + iODBC and unixODBC for non-Windows platforms

* Architecture

Abstraction based on device driver model

- Application: calls ODBC functions to submit SQL statements and retrieve results.

- /Driver Manager/
  + enumerates database client drivers and manages data sources.
  + processes ODBC function calls

- /Driver/: library that implements the functions in the ODBC API.
  + handles the actual interaction with a data source.

- /Data Source/: a file or a DBMS or even a live data feed.
  + /machine data source/ (managed by the driver manager); /file data source/ (a
    portable DSN configuration file)

- /Bridges/:
  + ODBC-to-JDBC: uses the services of a JDBC driver to connect to a database.
  + JDBC-to-ODBC: the builtin one is dropped from JVM in Java 8
  + OLE DB-to-ODBC
  + ADO.NET-to-ODBC

- /Conformance Levels/
  + Core Interface Conformance
  + Level 1 Interface Conformance
  + Level 2 Interface Conformance

* Core Programming Concepts

There is an introductory article[cite:@SQLAGCLI] of SQL/CLI which gives a code
snippet about how it typically works.

- /Handles/ :: opaque 32-bit item IDs for an /environment/, /connection/,
  /statement/ or /descriptor/.
  + =SQLAllocHandle()= creates data structures behind these handles, only then can
    these handles be used. =SQLFreeHandle()=
  + Handles are local and thread-safe.
  + Handle inputs are used with a type argument as handles of different types
    may not be unique in value. Handles of the same type always have different values.

- /Attributes/ :: defined for environments, connections and statements
  + some are intrinsic properties of the implementation; some affect the
    subsequence behavior of the implementation (configuration).

- /Environment/ :: a context global to the application for data access
  + any information global in nature: *state*; *diagnostics*; *connection
    handles*, *attributes* (e.g. =SQL_ATTR_OUTPUT_NTS= for null-terminated output string);
    attribute settings.

- /Connection/ :: the application's access to a particular server; general
  status information, transaction state and certain diagnostics information.
  + allocated in the context of a single /environment/.

- /Statement/ :: a data structure that tracks the execution of a single SQL
  statement and all the information associated with it: dynamic arguments,
  bindings for dynamic parameters and columns, result values and status information.
  + allocated within the context of a single connection
  + the information associated with the handle reflects the most recent
    execution of the statement.

- /Descriptor/ :: a collection of metadata that describes the parameters of an SQL
  statement or the columns of a result set; a conceptual table with a header
  record (table info) and one or more detail records (column or dynamic parameter).
  + /Application Parameter Descriptor/; /Implementation Parameter Descriptor/;
    /Application Row Descriptor/; /Implementation Row Descriptor/
  + automatically allocated/freed by its statement.

- /Cursor/ :: a movable pointer into a derived table by which the application
  can retrieve, update and delete rows.
  + cursors within are named uniquely.
  + In CLI, cursors are not explicitly declared, but associated with a result
    set by a /cursor specification/ (a statement that generates a result set and
    implicitly open a cursor for the application to fetch).
  + by default forward-only

- /Diagnostics/ :: a rich model to handle error conditions.
  + each function returns a return code of =SQL_SUCCESS=,
    =SQL_SUCCESS_WITH_INFO= or =SQL_ERROR=.
  + a *diagnostics area* is associated with each handle, consisting of a header
    record and one or more detail records.

** Data Types

ODBC defines two sets of type identifiers and corresponding C types: for SQL
columns and a C buffer. Each SQL data type corresponds to an ODBC C data type.

- /Type identifiers/: used in parameter bindings and the retrieval of result set
  data

- /SQL Data Types/:
  + Each DBMS defines its own SQL types. Each ODBC driver exposes only those SQL
    data types that the associated DBMS defines. A given driver and data source
    do not necessarily support all the SQL data types

- =SQLGetTypeInfo()= returns a result set, each row of which describes the
  characteristics of a single data type, such as name, type identifier,
  precision, scale, and nullability.


* Bibliography

#+print_bibliography: basic
