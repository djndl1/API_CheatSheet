#+TITLE: Mssql

* Installation Caveats

- Run /System Configuration Checks/ before installation to check any prerequisite.

** Components

- Database Enginer :: a must

- Machine Learning Services :: as the name; optional

- Integration Services :: optional; integration with various data sources from XML, flat
  files to relational data without much coding.
  + from text, XML, Excel, relational databases
  + ADO, ADO.NET, EXCEL, file, FTP, HTTP, MSMQ, OLEDB, ODBC, SMTP, WMI, ORACLE etc.

- Analysis Services :: optional; decision support and business analytics
  + data models for Power BI; Excel, data visualization.

- Replication :: data synchronization between databases to maintain consistency.

- Data Quality Services :: optional; data cleansing, data matching, monitoring,
  knowledge base without coding.

- Master Data Services :: optional; master data; data organization, data modeling

** Editions

In addition to feature difference, different editions have different scale limits (CPU limits, memory usage limits)

- Standard: lesser of 4 sockets or 24 cores, 128 GB memory

- Enterprise: no limits

** Services

- Database Engine (=MSSQLSERVER= or =MSSQL$<instance_name>) :: =\<MSSQLPATH>\MSSQL\Binn\sqlservr.exe=
  + default startup options are saved in the registry. Startup parameters may be
    configured with =Sql Server Configuration Manager=

- SQL Server Agent (=SQLServerAgent=) :: =\<MSSQLPATH>\MSSQL\Binn\sqlagent.exe=
  + task automation (jobs), monitoring SQL Server

- SQL Server Browser :: name resolution service that provides SQL Server
  connection information for client computers
  + listen to UDP 1434
  + list available servers
  + named instances may use dynamic ports; the browser directs clients to the
    correct port.

- SQL Writer :: backup and restore application in the Volume Shadow Copy Service
  framework (a Windows service)

** User Accounts

- installation requires a =sysadmin= role.

- the =sa= account (SQL Authentication) is also a database login and a member of =sysadmin=.

- The per-service service security principal (SID) is a login and a member of =sysadmin=.

** Multiple Instances

Installation of multiple instances on the same host is supported. No special
configuration except possible TCP port conflicts needs to be done.

SQL Server Browser and SQL Server VSS Writer are shared by all instances.
Database Engine, Analysis Services and Reporting Services are specific to an
instance. Some other components are shared by instances of the same major version.

An instance may be default (named =MSSQLSERVER=) or named. A named instance is identified by the
computer name plus the instance name. The instance name is required for clients
to connect to a named instance. A named instance has an /instance ID/ (by
default its name).

** Server Configuration

- Tools: SQL Server Management Studio or =sp_configure= system stored procedure.

- View options: =sys.configurations= catalog view
  + =value=: the configured value
  + =value_in_use=: the actual current value in use
  + =is_dynamic=: whether not to require a database engine restart


Some options are self-configuring. Some requires a database engine restart.
Configuration options take effect immediately after setting the option and
issuing =RECONFIGURE= (or =RECONFIGURE WITH OVERRIDE= in some cases).

* Startup & Stop

Only a local administrator can start, stop, pause, resume or restart SQL Server
service.
=SHUTDOWN= statement requires =sysadmin= or =serveradmin= role.

#+begin_src sql
SHUTDOWN; -- wait for running T-SQL statements and SPs to finish and then stop the database
SHUTDOWN WITH NOWAIT; -- immediately stop
#+end_src

** Single-Use Mode =-m=

Stop the SQL Server Agent before entering the single-user mode, or limit the app
with =-m"SQLCMD"=.

Any member of the Administrators group may connect to the instance but only one
user for maintenance.

** Minimal Configuration =-f=

More restricted than single-user mode: single user, no remote access, no startup
stored procedure run, no audit.

* Connections & protocols

** Concepts

- /Endpoint/ :: a connection on the server is represented by a T-SQL endpoint.
  + Permissions can be granted, revoked, and denied for Transact-SQL endpoints.
    By default, all users have permissions to access an endpoint unless the
    permissions are denied or revoked by a member of the sysadmin group or by
    the endpoint owner.
    + T-SQL local machine; T-SQL named pipes; T-SQL default TCP

** Configuration

Communication protocols are configured through SQL Server Configuration Manager.

By default shared memory (on the same host, mainly for troubleshooting) is
enabled for all editions;
TCP/IP is enabled for all except Developer edition (for Express Edition, the
port is dynamic); named pipes (for LAN) are disabled.

By default, a SQL Server instance is configured for TCP/IP port 1433 and named
pipe =\\.\pipe\sql\query=. A named instance are configured for TCP dynamic ports
with a port assigned by the OS.

** Client Connection

#+begin_src
# shared memory, (local) may be used as the server name on the same computer
lpc:<servername>[\instancename]

# TCP/IP, by default on port 1433
# "(local)", a period "." or "localhost" may be used as the server name on the same computer
tcp:<servername>[\<instancename>],<port>
tcp:<IPAddress>[\<instancename>],<port>
#+end_src

- /Server Alias/ :: an alternate name used for client connection that includes
  required elements of a connection string.
  + configured in SQL Server Configuration Manager

*** Drivers

**** SQL Server Native Client (Legacy)

the ODBC and OLE DB drivers for SQL Server (2nd gen), superseded Windows DAC
(new name for MDAC following MDAC 2.8) or MDAC (the
1st gen ODBC driver).

Removed since SQL Server 2022.

**** Microsoft ODBC Driver for SQL Server (Recommended)

3rd gen

Including =sqlcmd= and =bcp=.

**** Microsoft OLE DB Driver for SQL Server (Recommended)

Since 2018. Supersedes Microsoft OLE DB Provider for SQL Server (SQLOLEDB, 1st gen) and SQL Server
Native Client (2nd gen).

**** ADO.NET

- =System.Data.SqlClient=: included as part of .NET

- =Microsoft.Data.SqlClient=: since 2019, new generation

**** JDBC

Since 2000, open sourced in 2016.

*** Client Tools

**** =sqlcmd=

There are ODBC =sqlcmd= (old) and Go =sqlcmd= (new).

- =-C= :: =TRUSTSERVERCERTICIATE = true=
  - =-N= :: encrypted connection, =true=, =false= or =disable=

- =-E= (default) :: use a trusted connection (Windows Authentication Mode)

- =-d= :: =USE <db_name>=

- =-U=, =-P= :: (SQL Server Authentication) login name and password

- =-S= :: database server =[protocol:]server_name_or_ip_address[\instance_name][,port]=
  + Supported protocols: =tcp= (TCP/IP), =lpc= (shared memory) or =np= (named pipes)

- =-i input_file=, =-o output_file= :: input T-SQL script and output text file

- =-q= :: executes a T-SQL upon startup
  + =-Q= :: exits upon finish

***** Commands

- =GO= :: end of a batch and the execution of any cached T-SQL statements.
  + =sqlcmd= puts every input line in the statement cache and sends them to the
    server only when =GO= is issued.

- =:Connect= :: connect to an instance

- =USE= :: set the current database.

*** HOW-TO: Connect to the System When Locked Out

- =-m= or =-f= in single-user mode as a member of local Administrators.
  + stop SQL Server Agent beforehand

- Create a login and add the new login to the =sysadmin= server role.

* Security

** Authentication Mode

- /Windows Authentication/, a.k.a /Integrated Security/: by default =BUILTIN\Administrators= local group
  mapped to the =sysadmin= server role. SQL Server validates by using the
  Windows principal token in the OS.
  + add at least one Windows principal as an administrator.
  + the client may be on the same host, in the same domain or in a workgroup
    with granted access.

- /SQL Server Authentication/: a =sa= (system administrator) login is set up for administrator.
  + for backward compatibility, less secure. From outside a domain or an
    untrusted domain.

** Users, Logins and Roles

#+begin_quote
Permissions in the Database Engine are managed at the server level through
logins and server roles, and at the database level through database users and
database roles.
#+end_quote

A client connects to the database with a /Login/ (instance-level authentication
object), possibly with a credential. A user (database-level authorization
principal) can be associated with a login.

A login may be a Windows login (Windows Authentication) or SQL Server login (SQL Server Authentication).

*** Securables

Resources to which the database engine authorization system regulates access.
Securables may be contained within others, creating hierarchies called /scopes/.
(*server*, *database*, *schema*).

=ALTER AUTHORIZATION= changes the owner of a securable.

The visibility of metadata is limited to securables that a user either owns or
on which the user has been granted some permission.

*** Security Principal

Entities that use SQL Server and that can be assigned permission to take
actions. Each principal has a *security identifier* (SID).
Principals hold permissions on *securables*, controlled by =GRANT=, =DENY=, =REVOKE=.

A principal may be at Windows-, server-, database-level.

=sys.database_principals=, =sys.server_principals=

**** Logins

Individual user accounts (Windows users, groups or SQL server login, etc.) for
logging on to the database engine.
Server-level securable.

The =sa= server-level login is a member of the =sysadmin= fixed server-level
role and has all permissions on the server.

=CHECK_POLICY=ON= implies =CHECK_EXPIRATION=. *Account lockout duration*,
*account lockout threshold*, *reset account lockout counter after* are also
enabled.
Use =LOGINPROPERTY= to check the password expiration status.

=sys.sql_logins=.

**** Roles

A role is a *securable*: it has a owner, a database user or role.

=ALTER [SERVER] ROLE= adds/removes member principals or renames itself.

=sys.server_role_members=

***** Server Roles

Server-level securable.

- =IS_SRVROLEMEMBER=: whether a login is a member of the server role

- =sp_srvrolepermission=: show server role permission

- =sp_helpsrvrole=: show server roles

- =sp_helpsrvrolemember=: show server role members

****** Fixed Server Roles

A set of pre-configured roles that provide convenient group of server-level permissions.

- =sysadmin=: the supreme role

- =serveradmin=: change server-wide configuration options and shutdown the server

- =securityadmin=: manage logins (and thus holds most permissions).

- =dbcreator=: can create/alter/drop/restore any database.

- =public=: contains every login

****** User-defined Server Roles

Custom server-level roles

***** Database Roles

- =sp_helprole= (show all database roles), =sp_helprolemember= (show role member),

- =IS_ROLEMEMBER=: check if a principal is a member of a role.

- =sp_dbfixedrolepermission=: show role permissions

=sys.database_role_members=

#+begin_src sql
select a.name as role_name, c.name member_name
from sys.database_principals a
join sys.database_role_members b
on a.principal_id = b.role_principal_id
join sys.database_principals c
on b.member_principal_id = c.principal_id
where a.name = 'programmer'
#+end_src

****** Fixed Database Roles

Show fixed roles =sp_helpdbfixedrole=

A set of pre-configured roles that provide convenient group of database-level permissions.

- =db_owner=: all permissions on the database including =drop=

- =db_securityadmin=: modify role membership for custom roles and manage permissions.

- =db_adccessadmin=: add/remove access to the database for logins.

- =db_backupoperator=: backup the database

- =db_ddladmin=: run any DDL

- =db_datawriter=: add/delete/change data in all user tables.

- =db_datareader=: read all data from all user tables and views.

- =db_denydatawriter=, =db_denydatareader=: write/read-forbidden

Combined with =DENY= and =GRANT=, one may create a role based on existing roles.

****** User-defined database roles

Custom database-level roles.

***** Application Roles

Database-level principal associated with a certain application.
The client connects with a login and then =sp_setapprole= to assume the app
role.
A user may have only limited permissions from outside an app but
the app itself can elevate permissions by using an application role after
logging in with the user's login.

**** Database Users

A user accesses a database. A login assume the identity of the user to access that database.
Each database user maps to a single login. A login can be mapped to only one
user in a database, but can be mapped as a database user in several different
databases.

Each database has a default =dbo= (database owner) user that has all permissions in the database
and cannot be limited or dropped and it owns the =dbo= schema, the default
schema for all users. The =guest= user of a database is used for any login
who has no user account in the database.

A user without a login (*contained database users*)

** Credentials

SQL Server can store external credentials inside the database.

** Permissions

- =sys.database_permissions=, =sys.server_permissions= (granted permissions)

Every SQL Serve securable has associated permission that can be granted to a
principal. Permissions are managed at the server level (logins and server
roles), and at the database level (database users and database roles).

Granting a permission to a principal is not the same as adding the principal to
a role that has the permission: the effect might be the same but the requirement
of some operations might differ.

#+begin_src sql
GRANT/REVOKE/DENY PERMISSION ON SECURABLE_TYPE::NAME TO PRINCIPAL;
#+end_src

Any permission denial overrides all grants.


#+begin_src sql
-- view all builtin permissions
SELECT * from sys.fn_builtin_permissions(NULL);

-- view a principal's permissions on a securable
select * from sys.fn_my_permissions(securable, 'securable_class');
#+end_src

*** Common Permissions

- =CONTROL= :: ownership-like capabilities; Effectively has all defined
  permissions on the securable including granting.

- =ALTER= :: change the properties except ownership of a securable.
  + also includes =alter=, =creawte= =drop= objects within the securable.

- =ALTER ANY= :: the ability to create, alter, drop any individual instance of the securables.

- =TAKE OWNERSHIP= :: the ability to take ownership of granted securables .

- =CREATE= :: to ability to create certain kinds of securables.

- =IMPERSONATE= :: impersonate a login or a user

- =VIEW DEFINITION= :: access to metadata

- =REFERENCES= :: required to create a foreign key constraint that reference the table.

* Import, Export, Backup and Restore

** =bcp=

Used to import large numbers of new rows into tables or to export data out of
tables into data files.

** BACKUP

Use =BACKUP= to export a backup file. To =RESTORE= as another database, add
=WITH MOVE ... to ...=.

* Localization, Internationalization & Collation

#+begin_quote
Collations in SQL Server provide sorting rules, case, and accent sensitivity
properties for your data. Collations that are used with character data types,
such as char and varchar, dictate the code page and corresponding characters
that can be represented for that data type.
...
A collation specifies the bit patterns that represent each character in a
dataset. Collations also determine the rules that sort and compare data.
For non-Unicode columns, the collation setting specifies the code page for the
data and which characters can be represented. The data that you move between
non-Unicode columns must be converted from the source code page to the
destination code page.
#+end_quote

Collation may be defined at /server/ level, /database/ level, /column/ level or
/expression/ level. Collations determine case sensitivity, accent sensitivity,
kana sensitivity, width sensitivity,
variation-selector (a Unicode feature) sensitivity

** Collation Sets

- /Windows collations/ :: based on Windows system locale
  + the base Windows collation defines the sorting rules for dictionary sorting
  + For English locales, =Latin1_General= is used by default.

- /Binary collations/ :: based on the sequence of coded values defined by hte
  locale and data type.
  + =BIN= incomplete code-point to code-point comparison for Unicode data
  + =BIN2= pure code-point comparison, sorted by the code points.

- /SQL Server collations/ :: for backward compatibility

To view the server collation, =exec sp_helpsort=.
For supported collations, view =sys.fn_helpcollations()=.
For databases' collations, view =sys.databases()= or
=DATABASEPROPERTYEX('database_name', 'collation')=.

** Collation levels

- Server Level: the default collation for all system databases within the instance.
  + not changeable without rebuilding the =master= database.

- Database Level: defined with =CREATE DATABASE= or =ALTER DATABASE=
  + =tempdb= always uses the server collation

- Column Level
  + in-place conversion is possible at the price of blocking operations.

- Expression Level: =ORDER BY COLUMN_NAME COLLATE COLLATION_NAME=

** Unicode

**** Caveats

- Supplementary characters aren't supported for use in metadata, such as in names of database objects.

**** UTF-16

Since SQL Server 2005 as =nchar=, =nvarchar=, =ntext= (Supplementary character =SC=
support since SQL Server 2012). Supported by OLE DB, ODBC
3.7 or later.

**** UTF-8

Supported as part of some collations (that supports supplementary characters,
denoted with the =UTF8= suffix) since SQL Server 2019 in =char=, =varchar=.

**** GB18030

#+begin_quote
SQL Server provides support for GB18030-encoded characters by recognizing them
when they enter the server from a client-side application and converting and
storing them natively as Unicode characters.
All version 100 collations support linguistic sorting with GB18030 characters.
#+end_quote

** Session Language

=sys.syslanguages=

The language used for error and other system messages; It also defines date and
time format, currency, abbreviations of days and months, the first day of a
week.

A session may be set on the server side (=SET LANGUAGE= statement) and on the client side
(client-specific API).

** Best Practices

Use UTF-8 for =varchar=, =char=, =text=, enable supplementary characters for
=nchar=, =nvarchar=, =nvarchar(max)= (=ntext=).

- ADO, ODBC, OLE DB apps should use ODBC timestamp, time, date formats.

* Integration With Other Data Sources

** Linked Servers

#+begin_quote
Linked servers enable you to implement distributed databases that can fetch and
update data in other databases. They are a good solution in the scenarios where
you need to implement database sharding without need to create a custom
application code or directly load from remote data sources.
#+end_quote

Requires OLE DB drivers, not supported on Linux, use PolyBase.

- =sp_addlinkedserver=

  TODO

** PolyBase

TODO

* SQL Server Agent

A windows service that executes scheduled administrative tasks.

Run a job on a schedule in response to an event or on demand.

** Concepts

- *Job*: a specified series of operations performed sequentially, including
  running T-SQL scripts, command prompt apps, ActiveX scripts etc..
  + A job consists of job steps, which might consist of running a T-SQL statement etc.

- *Schedule*: when a job runs.

- *Alert*: au automatic response to a specific event.

- *Operators*: contact info for an individual responsible for maintenance of one
  or more instances of SQL Server.

- *Subsystems*: a predefined functionality used by a job
  + e.g. ActiveX script, OS, PowerShell, Replication, Analysis Services Command,
    SSIS package execution.

- *Proxy*: an object that defines the security context in which a job step can run, e.g. OS account

** Security

- =SQLAgentUserRole=, =SQLAgentReaderRole=, =SQLAgentOperatorRole= fixed
  database roles in =msdb= or =sysadmin= are required to use SQL Server Agent.

- create a user in =msdb= and grant necessary roles/permissions to it.

** Implement Jobs

- =sp_add_job= to create an empty job

- =sp_add_jobstep= adds actual job steps to the job.

- =sp_add_jobserver= adds the job to a certain SQL Server instance.

- =sp_add_schedule= makes a schedule for the job, optional if the job is using
  an existing schedule.

- =sp_attach_schedule= schedules the job

- =sp_start_job= runs a job.

** Job History

View =sp_help_jobhistory=.

Use maintenance plan to periodically purge job history.

* Transact-SQL

** Conventions

** Data Types

Each column, local variable, expression and parameters has a related data type.
Alias data types are defined by =CREATE TYPE=.

*** Exact Numerics

- =bit=: boolean type

- =tinyint= (unsigned byte), =smallint= (16-bit signed ), =int= (32-bit signed),
  =bigint= (64-bit signed)

- =decimal(p[, s])=, also known as =numeric(p[, s])=

- =money=, (64-bit) =smallmoney= (32-bit): binary integers scaled down 4 digits
  to represent decimal money.

*** Approximate Numerics

- =float[(n)]=: binary floating-point number, where =n= is the number of bits of
  the mantissa, up to double precision (53).
  + =real= is =float(24)=, i.e. single-precision

*** Date & Time

Conversions from string literals to date and time types are allowed if all parts
of the strings are in valid formats. Implicit conversions or explicit
conversions that don't specify a style, from date and time types to string
literals, are in the default format of the current session.
ISO 8601 formats are not affected by the =SET LANGUAGE= and =SET DATEFORMAT= session
locale settings.

- =DATE=: from ='0001-01-01'= to =9999-12-31=.
  + default literal format =yyyy-MM-dd=. ISO 8601 =yyyy-MM-dd= or =yyyyMMdd= are
    also supported.
  + ODBC format ={ d 'yyyy-MM-dd' }= seems to work with JDBC and ADO.NET. It
    maps to =DATETIME= and then converted to =DATE=.

- =TIME=: 0-7 subsecond customizable precision
  + default literal format =hh:mm:ss[.nnnnnnn]=, also ISO 8601
    =hh:mm[:ss][.fractional seconds]=
  + ODBC format ={t 'hh:mm:ss[.fractional seconds]'}= seems to work with JDBC
    and ADO.NET.
  + Using hour 24 to represent midnight and leap seconds over 59 as defined by
    ISO 8601 is not supported.

- =DATETIME= (*Legacy*): millisecond precision. range from =1753-01-01= to =9999-12-31=
  + ISO 8601 =yyyy-MM-ddTHH:mm:ss[.mmm]= or =yyyyMMdd[ HH:mm:ss[.mmm]]= are supported.
  + ODBC format ={ ts 'yyyy-MM-dd HH:mm:ss[.fff]' }= is supported and seems to
    work with JDBC and ADO.NET.
  + =CURRENT_TIMESTAMP= or =GETDATE()= (local time), =GETUTCDATE()= (UTC time)

- =DATETIME2= (*recommended*, supersedes =DATETIME=): 0-7 subsecond customizable
  precision, by default 7 (Windows =FILETIME= precision).
  + default literal format =YYYY-MM-DD hh:mm:ss[.fractional seconds]=
  + ISO 8601 =YYYY-MM-DDThh:mm:ss[.nnnnnnn]=
  + ODBC format ={ ts 'yyyy-MM-dd HH:mm:ss[.fff]' }= is supported and seems to
    work with JDBC and ADO.NET but it only represents a legacy =DATETIME=.
  + =SYSDATETIME()= (local time), =SYSUTCDATETIME()= (UTC time)

- =smalldatetime= (*legacy*): minute-level precision. The value is rounded to
  the nearest minute.

- =DATETIMEOFFSET=: =DATETIME2= with an offset
  + the data itself is stored as in UTC, with the timezone offset preserved.
  + default literal format =yyyy-MM-dd HH:mm:ss[.nnnnnnn] [{+|-}hh:mm]=
  + ISO 8601 =yyyy-MM-ddTHH:mm:ss[.nnnnnnn][{+|-}hh:mm]=,
    =yyyy-MM-ddTHH:mm:ss[.nnnnnnn]Z= (UTC)
  + =AT TIME ZONE 'TIMEZONE_NAME'= converts the timezone info of a datetime type
    to the specified time zone. If the source already has a time zone, the
    output represents the same time at the specified time zone.
  + =SYSDATETIMEOFFSET()=



*** Character strings

- =char[(n)]= (=character=): fixed size, byte-oriented, 1 <= n <= 8000 bytes
  + =n= is =1= unless specified.

- =varchar[(n | max)]=: variable-size, byte-oriented, 1 <= n <= 8000 bytes or =max=
  (limited only by the maximum storage parameter 2GB)
  + =n= is =1= unless specified, unlike Oracle, where =varchar2= alone is
    allowed in PL/SQL only and indicates only its type.
  + storage size =n+2= bytes.

- =nchar[(n)]=, =nvarchar[(n|max)]= the UTF-16 version, where 1 <= n <= 4000 in
  byte pairs (UTF-16 code unit).
  + literal UTF-16 strings are prefixed with a =N=.

- =text=, =ntext= (deprecated, use =varchar(max)= and =nvarchar(max)=):
  variable-size, up to 2^31 - 1 bytes;

Upon conversion, long strings are truncated into short strings if necessary. The
converted value uses the collation of the input is used. Non-character types
uses the default collation of the database unless specified otherwise. =n= is 30
unless specified otherwise upon conversion or casting.
Empty strings are converted to integer =0=.

*** Binary Data

- =binary[(n)]=: fixed-length binary data, 1 <= n <= 8000
  + without =n= default to =1= upon definition, =30= upon casting.

- =varbinary[(n|max)]=: variable-length binary data, 1 <= n <= 8000 or with
  =max= up to 2^31-1 bytes.
  + without =n= default to =1= upon definition, =30= upon casting.

- =image= (deprecated, use =varbinary(max)=): variable binary data up to 2^31-1 bytes

*** XML & Json

- =json= (since SQL Server 2016 only as json functions, only available in Azure
  SQL Server since 2024):

- =xml[([Content | Document] xml_schema_colleciton)]=: xml may be typed or
  untyped, depending on the specified schema.

*** Other

- =sql_variant=: can store heterogeneous data, up to 8016 bytes.
  + other data types are implicitly converted to =sql_variant= but not the reverse.
  + =SQL_VARIANT_PROPERTY= retrieves its property: type, precision, scale, etc.

- =table=: used to store a result for processing at a later time.
  + a table variable is used like a regular table within its scope.

- =uniqueidentifier=: 16-byte GUID
  + =newid()=, =newsequentialid()= (greater than previous generated GUIDs by
    this function, faster than =newid()= when generating for an identity column).

- =cursor=:

*** Type Reflection

For builtin types, see =sys.types=

- =TYPEPROPERTY(type, property)=: =PRECISION=, =SCALE= ...

- =TYPE_ID(namne)=, =TYPE_NAME(id)=

** DDL

** DML

** Procedural SQL

- =BEGIN ... END= as a code block structure

- =IF ... ELSE ...= needs no =THEN= and =END IF=. =BEGIN ... END= is optional if
  the statement includes only one.

- =GOTO= and labels are used as in C.

- try-catch =BEGIN TRY ... END TRY BEGIN CATCH ... END CATCH= catches any errors
  of which the severity is higher than 10.
  + errors are retrieved using The =ERROR_*()= functions.
  + Errors are thrown with the =THROW= keyword or =RAISEERROR= (legacy).

- All stored procedures may return an integer value (default 0).

- Only =WHILE=-loop is available.

** Stored Procedure
