#+TITLE: Plsql

* Blocks, Functions and Procedures

#+begin_src sql
DECLARE

BEGIN

EXCEPTION

END;
/
#+end_src

** Anonymous Blocks

Not saved in the database and not really used in production.

** Functions

Blocks with =CREATE OR REPLACE FUNCTION Function_name (parameter_list) return return_type as=

** Procedures

Blocks with =CREATE OR REPLACE PROCEDURE procedure_name (parameter_list) as=

** Nested Blocks

PL/SQL blocks can be nested.

** Packages

A library in a database

- Package specification: the interface

- Package body: the implementation

* Organizing Tables

- Content: anything that is actually related to business

- Codes: for categorization, classification and types
  + e.g. primary key identifier,

- Intersections: maintain history of relations

* PL/SQL-Specific Types

** =BOOLEAN=

nullable bool

** =PLS_INTEGER=/=BINARY_INTEGER=

Machine-level 32-bit signed integer with overflow check

- =SIMPLE_INTEGER=: non-null subtype without overflow check

** Composite Types

*** Collection Types

**** Table Types: PL/SQL associative arrays

A set of key-value pairs indexed by =varchar2=, =varchar=, =long= or =PLS_INTEGER=.

#+begin_src sql
set serveroutput on;

declare
    type t_varchar_array is table of varchar(100) index by PLS_INTEGER;
    type t_varchar_vararr is varray(100) of varchar2(100);
    arr t_varchar_array;
    varr t_varchar_vararr;
begin
    arr := t_varchar_array(1 =>'abc',2 => 'cde'); -- qualified expressions
    for idx in arr.FIRST..arr.LAST loop
        dbms_output.put_line(arr(idx));
    end loop;

    varr := t_varchar_vararr('abc', 'dafdsa'); -- collection constructor
    for idx in varr.FIRST..varr.LAST loop
        dbms_output.put_line(varr(idx));
    end loop;
end;
/
#+end_src

#+BEGIN_SRC sql
TYPE name_table IS TABLE OF type_Name INDEX BY index_type;
name_table(idx) := value;

 DECLARE
    Idx PLS_INTEGER := v.FIRST();
  BEGIN
    WHILE Idx IS NOT NULL LOOP
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(Idx, '999')||LPAD(v(Idx), 7));
      Idx := v.NEXT(Idx);
    END LOOP;
  END;
#+END_SRC

The sort order of an associative array is affected by NLS parameters

**** Associative Arrays

Has a fixed declared maximum size.

**** Nested Tables

A column type that stores an unspecified number of rows in no particular order. Conceptually, a nested table is a one-dimensional array with an arbitrary number of elements. The size of a nested table can increase dynamically. A nested table can become sparse.

A nested table type is a valid table column type, although its actual data are stored elsewhere. Nested table data is stored in a separate store table, a system-generated database table.

*** Record Types


#+BEGIN_SRC sql
type record_name IS RECORD (
     field_name  type_name,
     ...
);
#+END_SRC

* Row Processing

=SELECT= without =into= is not allowed in =PL/SQL=.

1. Use =insert... select... where= to avoid duplication and if-then-else clause

#+begin_src sql
declare

v_first_name                          WORKERS.first_name%TYPE;
v_middle_name                         WORKERS.middle_name%TYPE;
v_last_name                           WORKERS.last_name%TYPE;
v_name                                WORKERS.name%TYPE;
d_birth_date                          WORKERS.birth_date%TYPE;

-- I'll use this variable to hold the result
-- of the SQL insert statement.
n_count                               number;

begin
  -- Since I use these values more than once,
  -- I set them here, and then use the variables
  v_first_name  := 'JOHN';
  v_middle_name := 'J.';
  v_last_name   := 'DOE';
  v_name        :=
    rtrim(v_last_name||', '||v_first_name||' '||v_middle_name);
  d_birth_date  :=
    to_date('19800101', 'YYYYMMDD'); -- I'm guessing

  -- Now I can just let SQL do all the work.  Who needs PL/SQL!
  begin
    insert into WORKERS (
           id,
           worker_type_id,
           external_id,
           first_name,
           middle_name,
           last_name,
           name,
           birth_date,
           gender_type_id )
    select WORKERS_ID.nextval,
           c1.id,
           lpad(to_char(EXTERNAL_ID_SEQ.nextval), 9, '0'),
           v_first_name,
           v_middle_name,
           v_last_name,
           v_name,
           d_birth_date,
           c2.id
    from   WORKER_TYPES c1,
           GENDER_TYPES c2
    where  c1.code = 'C'
    and    c2.code = 'M'
    and not exists (
      select 1
      from   WORKERS x
      where  x.name           = v_name
      and    x.birth_date     = d_birth_date
      and    x.gender_type_id = c2.id );

    n_count := sql%rowcount;
  exception
    when OTHERS then
      raise_application_error(-20006, SQLERRM||
        ' on insert WORKERS'||
        ' in filename insert_with_sql_detection.sql');
  end;
end;
/
#+end_src

2. Use =update ... set () = (select )= to do complext updates.

* Multirow Processing

[[https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/static-sql.html#GUID-A22B737E-68B3-47A5-8EB3-3EDC53D8571D][Cursor Overview]]

[[https://docs.oracle.com/en/database/oracle/oracle-database/19/lnpls/explicit-cursor-declaration-and-definition.html#GUID-38C5DBA3-9DEC-4AF2-9B5E-7B721D11A77C][Explicit Cursor Declaration and Definition]]

A cursor is a pointer to a private SQL area that stores information about processing a specific SELECT or DML statement.  =V$OPEN_CURSOR=

Cursor is more like a C# =IEnumerable= and than a =IEnumerator=

** Implicit Cursors

Constructed and managed by PL/SQL. It closes after the associated statement runs.

*** Implicit Cursor Attribute

An implicit cursor has attributes that return information about the most recently run SELECT or DML statement that is not associated with a named cursor.

#+begin_src sql
SQL%ISOPEN/FOUND/NOTFOUND/ROWCOUNT/BULK_ROWCOUNT/BULK_EXCEPTION
#+end_src

** Explicit Cursors (Named Cursors)

1. Declare and define a cursor and associate it with a query

2. open the query (either via the =OPEN= statement or implicitly in a =FOR= loop) and fetch the result and then =CLOSE= it (not needed in a =FOR= loop).

** Simple Static Cursor

#+begin_src sql

#+end_src

** Bulk Collect

#+begin_src sql
FETCH <cursor_name> BULK COLLECT INTO <collection_name> LIMIT <limit>;

SELECT ... BULK COLLECT INTO <collection_name> FROM ...
#+end_src

- for an assoc-array, there's no need to allocate memory before being bulk collected into.

* Object-Relational SQL

Doesn't seem to be useful for app code since support for UDT by client drivers is scarece.

* Troubleshooting

** Prevent Implicit Data Conversion

- Use anchors in variable declaration

- Use data type prefixes for variables

- explicit conversion and catch potential exceptions:
  + =to_char()=
  + =to_date()=
  + =to_number()=

** Prepare for Rrrors

- Use exception blocking around certain code

- Almost never use =WHEN OTHERS THEN NULL= in an exception-handling section.

- Never handle exceptions in a table package’s methods or a type’s methods.

- output error or success using =DBMS_OUTPUT.put_line()=

- =pragma autonomous transaction= to log data migration or data processing

** After the error has occurred

- Use output message to pinpoint the error spot

- =raise_application_error()= to send a meaningful error number and message to the presentation layer.

** As the error happens

Use =pragma autonomous transaction= to insert and commit messsages into a logging table without committing PL/SQL program's own transaction context.

| Attribute         | description                     |
|-------------------+---------------------------------|
| id                | primary key                     |
| text              | logged message                  |
| unique_session_id | from the calling PL/SQL program |
| insert_user       | the user who runs the program   |
| insert_date       | (default to sysdate)            |

#+begin_src sql
create table DEBUG (
    id int generated always as identity primary key,
    text varchar2(1024),
    session_id varchar2(100),
    insert_user varchar2(30) default sys_context('userenv', 'session_user'),
    insert_date date default sysdate
);

create or replace PROCEDURE log_debug(
         aiv_program_unit in varchar2,
         aiv_text in varchar2)
is
        pragma autonomous_transaction;
        v_text varchar2(256);
        v_sess_id varhchar(100);
begin
         v_text := substrb(aiv_program_unit||': '||aiv_text, 1, 256);
     n_sess_id :=dbms_session.unique_session_id;
         insert into DEBUG (text, session_id)
         values (v_text, v_sess_id);
         commit;
end log_debug;
#+end_src
