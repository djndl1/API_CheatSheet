#+TITLE: Plsql

* Blocks, Functions and Procedures

#+begin_src sql
DECLARE

BEGIN

EXCEPTION

END;
/
#+end_src

** Anonymous Blocks

Not saved in the database and not really used in production.

** Functions

Blocks with =CREATE OR REPLACE FUNCTION Function_name (parameter_list) return return_type as=

** Procedures

Blocks with =CREATE OR REPLACE PROCEDURE procedure_name (parameter_list) as=

** Nested Blocks

PL/SQL blocks can be nested.

** Packages

A library in a database

- Package specification: the interface

- Package body: the implementation

* Organizing Tables

- Content: anything that is actually related to business

- Codes: for categorization, classification and types
  + e.g. primary key identifier,

- Intersections: maintain history of relations

* PL/SQL-Specific Types

** =BOOLEAN=

nullable bool

** =PLS_INTEGER=/=BINARY_INTEGER=

Machine-level 32-bit signed integer with overflow check

- =SIMPLE_INTEGER=: non-null subtype without overflow check

** Collection Types

*** Table Types: PL/SQL associative arrays

A set of key-value pairs indexed by =varchar2=, =varchar=, =string=, =long= or =PLS_INTEGER=.

#+BEGIN_SRC sql
TYPE name_table IS TABLE OF type_Name INDEX BY index_type;
name_table(idx) := value;

 DECLARE
    Idx PLS_INTEGER := v.FIRST();
  BEGIN
    WHILE Idx IS NOT NULL LOOP
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(Idx, '999')||LPAD(v(Idx), 7));
      Idx := v.NEXT(Idx);
    END LOOP;
  END;
#+END_SRC

The sort order of an associative array is affected by NLS parameters

*** Record Types


#+BEGIN_SRC sql
type record_name IS RECORD (
     field_name  type_name,
     ...
);
#+END_SRC

* Row Processing

Use =insert... select... where= to avoid duplication and if-then-else clause

#+begin_src sql
declare

v_first_name                          WORKERS.first_name%TYPE;
v_middle_name                         WORKERS.middle_name%TYPE;
v_last_name                           WORKERS.last_name%TYPE;
v_name                                WORKERS.name%TYPE;
d_birth_date                          WORKERS.birth_date%TYPE;

-- I'll use this variable to hold the result
-- of the SQL insert statement.
n_count                               number;

begin
  -- Since I use these values more than once,
  -- I set them here, and then use the variables
  v_first_name  := 'JOHN';
  v_middle_name := 'J.';
  v_last_name   := 'DOE';
  v_name        :=
    rtrim(v_last_name||', '||v_first_name||' '||v_middle_name);
  d_birth_date  :=
    to_date('19800101', 'YYYYMMDD'); -- I'm guessing

  -- Now I can just let SQL do all the work.  Who needs PL/SQL!
  begin
    insert into WORKERS (
           id,
           worker_type_id,
           external_id,
           first_name,
           middle_name,
           last_name,
           name,
           birth_date,
           gender_type_id )
    select WORKERS_ID.nextval,
           c1.id,
           lpad(to_char(EXTERNAL_ID_SEQ.nextval), 9, '0'),
           v_first_name,
           v_middle_name,
           v_last_name,
           v_name,
           d_birth_date,
           c2.id
    from   WORKER_TYPES c1,
           GENDER_TYPES c2
    where  c1.code = 'C'
    and    c2.code = 'M'
    and not exists (
      select 1
      from   WORKERS x
      where  x.name           = v_name
      and    x.birth_date     = d_birth_date
      and    x.gender_type_id = c2.id );

    n_count := sql%rowcount;
  exception
    when OTHERS then
      raise_application_error(-20006, SQLERRM||
        ' on insert WORKERS'||
        ' in filename insert_with_sql_detection.sql');
  end;
end;
/
#+end_src
