#+TITLE: Plsql

* Tools

- =TNS_ADMIN=: sets the location of =tnsnames.ora=

- =ORACLE_PATH= (Unix), =SQLPATH= (Windows registry entry, by default =ORACLE_HOME/DBS=): the location of SQL scripts

*DML statement Warning*: both SQL*Plus and SQL Developer does not commit a DML
statement automatically and the ongoing transaction might hold cause the table
to be locked and other clients may not be able to access the data. Be careful
when using such tools on a production server. OracleDB issues an implicit
=COMMIT= statement before and after any DDL statement. Therefore one cannot
rollback a DDL.

** SQL*Plus

- configuration profile scripts:
  + site profile =$ORACLE_HOME/sqlplus/admin/glogin.sql=
  + user profile =login.sql= under the directories and subdirectories =$ORACLE_PATH=

- =HELP COMMAND= show related SQL*Plus command description.

*** Logon

- =/NOLOG= for connectionless startup to perform certain administrative operations.

- =/= represents a default logon using OS authentication.

*** Settings & System Variables

A list of settings that affect the way SQL*Plus runs. Set by =SET= and shown by =SHOW=

*** Run Commands & Scripts

There are three kinds of commands in SQL*Plus

1. SQL Commands
   + ended with a semicolon =;=, with a slash =/= on a line by itself, or with a
     blank line, which saves the text in the buffer without running it.

2. PL/SQL blocks
   + =;= or =blank liens does not termiante and execute a block. =.= or =/= on a new line by itself does.
   + =EXECUTE PL/SQL_ONE_LINER= without a =BEGIN...END= block.

3. SQL*Plus commands for query results, setting options and editing and storing
   SQL commands and PL/SQL blocks.
   + Ended with a line ending.
   + Continued with a hyphen =-=.

DML (insert, update, delete) Changes made to the database are not commited automatically unless certain other
commands (DDL, DCL) are entered or an explicit commit is issued. =SET AUTOCOMMIT
ON= commits DML automatically.

There is a buffer storing the last Command text (except an SQL*Plus Command) executed, shown by =LIST=, run by =RUN=
or =/=,
edited by =EDIT=

**** Common SQL*Plus Commands

- =DESC[RIBE] TABLE= shows the structure of an object.

- To run a shell command, use =HOST SHELL_COMMAND=.

- =START script.sql [args...]= or =@script.sql [args...]= runs a script

- =DEFINE=, =UNDEFINE=: define variables as substitution variables.
  + Substitution variables are not SQL parameters. Prefix =&= to substitute for
    its value. Substitution variables are substituted by SQL*Plus, dynamically
    changing SQLs.

- =VAR[IABLE]=: define bind variables, real SQL variables, referenced by =:VariableName=
  + =PRINT= prints a variable, including a refcursor variable (result set).
    SQL*Plus, unlike DBeaver, is able to output the result set from a PL/SQL
    block without defining and printing a refcursor bind variable.

**** Comments

=--= single line comments or =/* */= C-style block comments.

Comments cannot appear in certain positions

- within a statement

- immediately after a =;= or before a =;=

- no =&= within any comment. Or =SET DEFINE OFF= to prevent scanning for the
  substitution character.

*** Output

The output rendering of SQLPlus is abysmal. However, it provides =-MARKUP "HTML
ON"= or =-MARKUP "CSV ON"= to allow query output as HTML or CSV. =SHOW MARKUP=
shows the markup option status. =SET MARKUP HTML/CSV ON/OFF=. For interactive
use, this may seem unintuitive unless redirected to a file and opened with a
browser/editor. Also, HTML output styles are customizable through various
settings. These output formats allow SQLPlus to generate reports. To use HTML
output interactively, pipe it to =tee= and output to an HTML file. Various
output format commands also helps generate reports.

- =SET PAUSE ON=: stops on output of each page

- =-SILENT= is used when SQLPlus is embedded so that it is not visible.

*** Scripting

Line editing in SQL*Plus is worse than old DOS command processor. Its editing
capability is even worse than old Unix's =ed=:

- =A text= (append), =INPUT= (insert at the current line), =C/old/new= (change), =C/text= (delete), =DEL= (the current line),
  =LIST= (list lines in the buffer or move to a line), =N= (set the
  current line to the number) See the SQL*Plus reference for all line
  editing commands.

However,
SQL*Plus supports editing scripts and the buffer text using an external editor
(=_EDITOR= system variable, default to notepad.exe on Windows).

*** Globalization

SQL*Plus understands =NLS_LANG= and uses the charset in =NLS_LANG= for data processing.

* Blocks, Functions and Procedures

#+begin_src sql
DECLARE

BEGIN

EXCEPTION

END;
/
#+end_src

** Anonymous Blocks

Not saved in the database and not really used in production.

** Functions

Blocks with =CREATE OR REPLACE FUNCTION Function_name (parameter_list) return return_type as=

** Procedures

Blocks with =CREATE OR REPLACE PROCEDURE procedure_name (parameter_list) as=

** Nested Blocks

PL/SQL blocks can be nested.

** Triggers

A PL/SQL unit that executes in response to a specified event

#+begin_src sql
TRIGGER trigger_name
        triggering_event
        [ trigger_restriction ]

BEGIN
-- body
END;
#+end_src

Triggers may be disabled/enabled separately or altogether if they are associated
with a table (=ALTER TABLE TRIGGER_NAME DISABLE/ENABLE ALL TRIGGERS=)

*** Events

- DML statement

- DDL statement

- Database operation =LOGON=, =LOGOFF=, =STARTUP=, =SHUTDOWN=, =SERVERERROR=

A trigger may be *simple* (triggered before or after a statement is run or a row
is affected), *composite* (multiple timing points).

If a row trigger is fired, the row record before and after the event is retrievable
with two variable =:OLD= (none for =INSERT=) and =:NEW= (none for =DELETION=).

An =INSTEAD OF= trigger is executed instead of executing the triggering DML
statement on a view. An =INSTEAD OF= trigger is useful to update certain columns
(generated) of a view by updating the underlying table.

A *system trigger* is defined on a schema or the database.


** Packages

A library in a database

- Package specification: the interface

- Package body: the implementation

* Organizing Tables

- Content: anything that is actually related to business

- Codes: for categorization, classification and types
  + e.g. primary key identifier,

- Intersections: maintain history of relations

* Control Statements

** Conditonal

*** =IF=

#+begin_src sql
IF conditional THEN
    statements
[ELSIF conditional2 THEN -- the only difference from BASIC
       statements
]...
[ELSE
    statements]
END IF;
#+end_src

*** =CASE=

#+begin_src sql
CASE selector
     WHEN selector_value_1 THEN statements_1
     WHEN selector_value_2 THEN statements_2
     ...
     WHEN selector_value_n THEN statements_n
     [ ELSE
       else_statements ]
END CASE;]

CASE
    WHEN condition_1 THEN statements_1
    WHEN condition_2 THEN statements_2
    ...
    WHEN condition_n THEN statements_n
    [ ELSE
      else_statements ]
END CASE;]
#+end_src

- =NVL=, =NVL2= and =DECODE= are all special conditional functions, especially =DECODE=

** Loop

=EXIT=, =EXIT WHEN=; =CONTINUE=, =CONTINUE WHEN= can be anywhere inside a loop.

#+begin_src shell

# an EXIT may take advantage of this label
[ label ] LOOP
  statements
END LOOP [ label ];

# the index is implicitly declared as PLS_INTEGER and cannot be changed
# the two bounds are required to be numeric expressions.
[ label ] FOR index IN [ REVERSE ] lower_bound..upper_bound LOOP
  statements
END LOOP [ label ];

[ label ] WHILE condition LOOP
  statements
END LOOP [ label ];
#+end_src

* Error Handling

PL/SQL supports exception and provides many predefined exceptions for many
operations and error conditions.

#+begin_src sql
-- catch exceptions

begin

exception
    when certain_exception_name then
    error_handling_code;

    when certain_exception_name1 OR certain_exception_name2 then
    error_handling_code;

    when others then -- default catch
        raise; -- rethrow
end;
#+end_src

To raise custom exceptions, define variable of the =EXCEPTION= type and raise
them. To catch them, use the variable names.

* PL/SQL-Specific Types

** =BOOLEAN=

nullable bool; not printable by =dbms_output.put_line()=.

** =PLS_INTEGER=/=BINARY_INTEGER=

Machine-level 32-bit signed integer with overflow check

- =SIMPLE_INTEGER=: non-null subtype without overflow check

** Composite Types

*** Collection Types

**** Table Types: PL/SQL associative arrays

A set of key-value pairs indexed by =varchar2=, =varchar=, =long= or
=PLS_INTEGER=.
The sort order of an associative array indexed by =varchar2= is affected by NLS parameters

- Has a fixed declared maximum size.

- declaration is empty initialization.

- a constant associative array can only be initialized by an initializer function.

- Cannot be declared outside a package.

- used for passing collections to/from the database server.


#+begin_src sql
set serveroutput on;

declare
    type t_varchar_array is table of varchar(100) index by PLS_INTEGER;
    type t_varchar_vararr is varray(100) of varchar2(100);
    arr t_varchar_array;
    varr t_varchar_vararr;
begin
    arr := t_varchar_array(1 =>'abc',2 => 'cde'); -- qualified expressions
    for idx in arr.FIRST..arr.LAST loop
        dbms_output.put_line(arr(idx));
    end loop;

    varr := t_varchar_vararr('abc', 'dafdsa'); -- collection constructor
    for idx in varr.FIRST..varr.LAST loop
        dbms_output.put_line(varr(idx));
    end loop;
end;
/
#+end_src

#+BEGIN_SRC sql
TYPE name_table IS TABLE OF type_Name INDEX BY index_type;
name_table(idx) := value;

 DECLARE
    Idx PLS_INTEGER := v.FIRST();
  BEGIN
    WHILE Idx IS NOT NULL LOOP
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(Idx, '999')||LPAD(v(Idx), 7));
      Idx := v.NEXT(Idx);
    END LOOP;
  END;
#+END_SRC

To populate an associative array without looping, use =SElECT BULK COLLECT INTO assoc_array=

**** Varrays

- variable-sized; dense; one-based index

- capacity is predefined but can be extended.

- a varray variable requires explicit initialization to use the array besides declaration.

**** Nested Tables

- completely dynamically-sized;

- can be dense or sparse (due to deletion).

- elements are not stably ordered (rendering them somewhat useless).

A column type that stores an unspecified number of rows in no particular order. Conceptually, a nested table is a one-dimensional array with an arbitrary number of elements. The size of a nested table can increase dynamically. A nested table can become sparse.

A nested table type is a valid table column type, although its actual data are stored elsewhere. Nested table data is stored in a separate store table, a system-generated database table.

*** Record Types


#+BEGIN_SRC sql
type record_name IS RECORD (
     field_name  type_name,
     ...
);
#+END_SRC

* PL/SQL Static SQL

Static SQL statements have basically the same syntax as the SQL but with some extensions and difference.

** Row Processing

=SELECT= without =into= is not allowed in =PL/SQL=.

1. Use =insert... select... where= to avoid duplication and if-then-else clause

#+begin_src sql
declare

v_first_name                          WORKERS.first_name%TYPE;
v_middle_name                         WORKERS.middle_name%TYPE;
v_last_name                           WORKERS.last_name%TYPE;
v_name                                WORKERS.name%TYPE;
d_birth_date                          WORKERS.birth_date%TYPE;

-- I'll use this variable to hold the result
-- of the SQL insert statement.
n_count                               number;

begin
  -- Since I use these values more than once,
  -- I set them here, and then use the variables
  v_first_name  := 'JOHN';
  v_middle_name := 'J.';
  v_last_name   := 'DOE';
  v_name        :=
    rtrim(v_last_name||', '||v_first_name||' '||v_middle_name);
  d_birth_date  :=
    to_date('19800101', 'YYYYMMDD'); -- I'm guessing

  -- Now I can just let SQL do all the work.  Who needs PL/SQL!
  begin
    insert into WORKERS (
           id,
           worker_type_id,
           external_id,
           first_name,
           middle_name,
           last_name,
           name,
           birth_date,
           gender_type_id )
    select WORKERS_ID.nextval,
           c1.id,
           lpad(to_char(EXTERNAL_ID_SEQ.nextval), 9, '0'),
           v_first_name,
           v_middle_name,
           v_last_name,
           v_name,
           d_birth_date,
           c2.id
    from   WORKER_TYPES c1,
           GENDER_TYPES c2
    where  c1.code = 'C'
    and    c2.code = 'M'
    and not exists (
      select 1
      from   WORKERS x
      where  x.name           = v_name
      and    x.birth_date     = d_birth_date
      and    x.gender_type_id = c2.id );

    n_count := sql%rowcount;
  exception
    when OTHERS then
      raise_application_error(-20006, SQLERRM||
        ' on insert WORKERS'||
        ' in filename insert_with_sql_detection.sql');
  end;
end;
/
#+end_src

2. Use =update ... set () = (select )= to do complext updates.

* Multirow Processing

[[https://docs.oracle.com/en/database/oracle/oracle-database/21/lnpls/static-sql.html#GUID-A22B737E-68B3-47A5-8EB3-3EDC53D8571D][Cursor Overview]]

[[https://docs.oracle.com/en/database/oracle/oracle-database/19/lnpls/explicit-cursor-declaration-and-definition.html#GUID-38C5DBA3-9DEC-4AF2-9B5E-7B721D11A77C][Explicit Cursor Declaration and Definition]]

A cursor is a pointer to a private SQL area that stores information about processing a specific SELECT or DML statement.  =V$OPEN_CURSOR=

Cursor is more like a C# =IEnumerable= and than a =IEnumerator=

** Implicit Cursors

Every time a DML or =SELECT INTO=  is run, an implicit cursor is opened.

Constructed and managed by PL/SQL. It closes after the associated statement runs.

*** Implicit Cursor Attribute

An implicit cursor has attributes that return information about the most recently run SELECT or DML statement that is not associated with a named cursor. This cursor is not controlled by the user. It closes after its associated statement runs but /its attribute values remain available until another such statement runs/.

#+begin_src sql
SQL%ISOPEN/FOUND/NOTFOUND/ROWCOUNT/BULK_ROWCOUNT/BULK_EXCEPTION
#+end_src

** Explicit Cursors (Named Cursors)

Explicit/declared cursors has a name and is associated with a query. It may be
used with a FOR-IN-LOOP or opened-fetched-closed explicit.

1. Declare and define a cursor and associate it with a query

#+begin_src sql
-- cursor queries can capture variables in its scope.
-- the parameter_list contains formal parameters
-- used by the cursor query
-- that are filled when the cursor is opened.

-- declaration
CURSOR cursor_name [parameter_list] RETURN return_type;
-- definition
CURSOR cursor_name [ parameter_list ] [ RETURN return_type ]
  IS select_statement;
#+end_src

2. open the query (either via the =OPEN= statement or implicitly in a =FOR= loop) and fetch the result and then =CLOSE= it (not needed in a =FOR= loop).

#+begin_src sql
FETCH cursor_name INTO into_clause;
-- either a list of variables or a single record variable.
#+end_src

A cursor is already associated with a statement (and thus some data) after it is defined. It's not a variable that can be assigned to.

- reading a virtual column is possible with a cursor.

#+begin_src sql
DECLARE
  CURSOR c1 IS
    SELECT employee_id,
           (salary * .05) raise
    FROM employees
    WHERE job_id LIKE '%_MAN'
    ORDER BY employee_id;
  emp_rec c1%ROWTYPE;
BEGIN
  OPEN c1;
  LOOP
    FETCH c1 INTO emp_rec;
    EXIT WHEN c1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE (
      'Raise for employee #' || emp_rec.employee_id ||
      ' is $' || emp_rec.raise
    );
  END LOOP;
  CLOSE c1;
END;
#+end_src

*** Cursor Variable =REF CURSOR= or =SYS_REFCURSOR=

Unlike a cursor that is bound to a certain query, a cursor variable is useful
for passing query results between subprograms. A strong =REF CURSOR= specifis a
return type and the query must return this type. A weak ref cursor (predefined
=SYS_REFCURSOR=) does not
specify a return type.

=OPEN cursor_variable for query= binds a cursor variable to a query.

** Processing Cursors

*** For Loop

#+begin_src sql
-- an implicit cursor
BEGIN
  FOR item IN (
    SELECT last_name, job_id
    FROM employees
    WHERE job_id LIKE '%CLERK%'
    AND manager_id > 120
    ORDER BY last_name
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE
      ('Name = ' || item.last_name || ', Job = ' || item.job_id);
  END LOOP;
END;
/


-- an explicit one
BEGIN
  FOR item IN (
    SELECT first_name || ' ' || last_name AS full_name,
           salary * 10                    AS dream_salary
    FROM employees
    WHERE ROWNUM <= 5
    ORDER BY dream_salary DESC, last_name ASC
  ) LOOP
    DBMS_OUTPUT.PUT_LINE
      (item.full_name || ' dreams of making ' || item.dream_salary);
  END LOOP;
END;
/
#+end_src

** Simple Static Cursor

#+begin_src sql

#+end_src

** Bulk Collect

#+begin_src sql
FETCH <cursor_name> BULK COLLECT INTO <collection_name> LIMIT <limit>;

SELECT ... BULK COLLECT INTO <collection_name> FROM ...
#+end_src

- for an assoc-array, there's no need to allocate memory before being bulk collected into.

* Object-Relational SQL

Doesn't seem to be useful for app code since support for UDT by client drivers is scarce.

* Troubleshooting

** DBeaver Not Reporting Errors When Compiling Procedures

No solution, use SQL Developer or SQL Plus.

** Remote Debugging With SQL Developer

SQL Developer by default uses =DBMS_DEBUG_JWDP= package to connect the server
back to a listening debugger on the client.

*** Debug Launch

- Compile a procedure for debug
  #+begin_src sql
ALTER PROCEDURE | FUNCTION PROCNAME COMPILE DEBUG | PLSQL_OPTIMIZE_LEVEL = 1;
  #+end_src

- grant the user =DEBUG CONNECT SESSION= and =EXECUTE= on the target procedure
  and the =DBMS_DEBUG_JDWP= package.

- Give JDWP ACL privilege to the user
  #+begin_src sql
BEGIN
 DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE
 (
 host => '*', -- client ip, possibly with wildward
 lower_port => null,
 upper_port => null,
 ace => xs$ace_type(privilege_list => xs$name_list('jdwp'),
                    principal_name => '<UserName>'',
                    principal_type => xs_acl.ptype_db)
 );
END;
  #+end_src

- Configure SQL Developer (in Preferences) to restrict the port so that the
  client may configure its firewall rule

- If the connection failed, try using SSH remote forwarding, sometimes the
  connection doesn't work on VPN.

** Debug Attach

- Start A listener (right click the connection in SQL Developer and choose
  Debug-Remote Debug)

- In another session, establish JDWP connection to the listener. (Possibly requiring =DEBUG CONNECT
  ANY= or =DEBUG CONNECT USER <user>= to debug other users' sessions)

  #+begin_src sql
begin
    dbms_debug_jdwp.connect_tcp('listener_host', 'listener_port');
end;
  #+end_src

- run the target procedure (possibly breakpointed) in another session.

- the debug session starts and any breakpoint may halt the execution.

One may create a login trigger and connect to the debugger there if the user
cannot connect to the debugger manually.** Prevent Implicit Data Conversion

- Use anchors in variable declaration

- Use data type prefixes for variables

- explicit conversion and catch potential exceptions:
  + =to_char()=
  + =to_date()=
  + =to_number()=

** Prepare for Rrrors

- Use exception blocking around certain code

- Almost never use =WHEN OTHERS THEN NULL= in an exception-handling section.

- Never handle exceptions in a table package’s methods or a type’s methods.

- output error or success using =DBMS_OUTPUT.put_line()=

- =pragma autonomous transaction= to log data migration or data processing

** After the error has occurred

- Use output message to pinpoint the error spot

- =raise_application_error()= to send a meaningful error number and message to the presentation layer.

** As the error happens

Use =pragma autonomous transaction= to insert and commit messsages into a logging table without committing PL/SQL program's own transaction context.

| Attribute         | description                     |
|-------------------+---------------------------------|
| id                | primary key                     |
| text              | logged message                  |
| unique_session_id | from the calling PL/SQL program |
| insert_user       | the user who runs the program   |
| insert_date       | (default to sysdate)            |

#+begin_src sql
create table DEBUG (
    id int generated always as identity primary key,
    text varchar2(1024),
    session_id varchar2(100),
    insert_user varchar2(30) default sys_context('userenv', 'session_user'),
    insert_date date default sysdate
);

create or replace PROCEDURE log_debug(
         aiv_program_unit in varchar2,
         aiv_text in varchar2)
is
        pragma autonomous_transaction;
        v_text varchar2(256);
        v_sess_id varhchar(100);
begin
         v_text := substrb(aiv_program_unit||': '||aiv_text, 1, 256);
     n_sess_id :=dbms_session.unique_session_id;
         insert into DEBUG (text, session_id)
         values (v_text, v_sess_id);
         commit;
end log_debug;
#+end_src


* Recommended Practice For Scalability

** Use Bind Variables

Bind variables improve performance (hard parsed once and soft parsed with
different bind variables) and security (against SQL injection).

** Use PL/SQL

PL/SQL is optimized for db access  and silently caches statements to avoid a
reparse.

=EXECUTE IMMEDIDATE= caches sql statements. The =DBMS_SQL= package has better
support for dynamic SQL.
=OPEN cursor FOR query= is optimized if the cursor is a declared one, not a
cursor variable.

** Use Bulk SQL (=COLLECT INTO collection=)

When retrieving a set of rows from the database, processing the rows and returning the
whole set to the database, bulk SQL reduce the number of round trips. Bulk SQL
is not needed if only read from the database
is involved. However, bulk SQL uses more CPU resources and requires more code.

** Concurrency

- *Data Concurrency*: ensures the users can access data at the same time.

- *Data Consistency*: ensures that each user sees a consistent view of the data.
  + OracleDB maintains data consistency by using a multiversion consistency
    model and various types of locks and transaction isolation levels.

OracleDB provides a *serializable* isolation category that appears to be a
single-user database. For most cases, read committed isolation is perfect.

*Sequences* offer atomic integer generation without using an explicit lock.

A latch is a simple low-level serialization mechanism that coordinates multiuser
access to shared data structures. More latches means less scalability.

OracleDB uses nonblocking I/O to allow queries execute concurrently.

SQLs are compiled and shared.
