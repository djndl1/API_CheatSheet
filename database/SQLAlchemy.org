#+TITLE: Sql Alchemy

* DB-API 2.0

The two core constructs are

1. =Connection=: represents a connection to the database and provides transactional behavior.

2. =Cursor=: represents the execution of a command or a query, associated with a connection.

SQL parameters may be passed in five different styles, depending on the DBAPI implementation. The exact type mapping of parameters is implementation-defined, however the implementation must provide standardized functions to construct objects of the corresponding python types.

* Core: SQLAlchemy Expression Language, A Backend-Neutral SQL in Python style

Interfacing with the database is done through =sqlalchemy.engine.Engine= (=create_engine=) and =sqlalchemy.engine.Connection= (typically =engine.connect()=).

** =Engine=

The starting point of any SQLAlchemy app. An Engine references both a =Dialect= and a =Pool= (default to =QueuePool= of size five), which together interpret the DBAPIâ€™s module functions as well as the behavior of the database.

=create_engine()= once per particular database URL, held globally for the lifetime of a single application process, most efficient when created just once at the module level of an application. The basic function is to provide access to a =Connection= as a connection pool manager, which can then invoke SQL statements. Also, it provides internal caching of per-database resources. It is possible to explicitly =dispose= an =Engine= if

1. no longer planned to access the database

2. multiprocessing using =fork()= since database connections generally do not travel across process boundaries.

Connections that are being used are not discarded when the engine is discarded or GC-ed. These connections just return to its connection pool, which will be ultimately GC-ed. It is recommended to dispose an =Engine= only after all connections are checked in (back to the pool) or otherwise deassociated from their pool.

=create_mock_engine()= creates a mock engine for echoing DDL. This can be used to get DDL SQL strings.

** =URL= class

Pass this instead of a python string to the database and manually parse or modify the URL string. Create an =URL= class using =URL.create()=

** =Connection= class

A proxy object for an actual DBAPI connection. Connections are typically pooled for reuse.
