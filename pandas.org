#+TITLE: Pandas


* API

** Selections

- =[]= can be used for columns or rows but not both

- =.loc[]=: label based, first select rows and then columns. =.iloc[]= is the version based on positions

- =.assign=: adds new columns to a DF

- =head=: limit

- =nlargest=, =tail=: =limit ... offset 5=

** Filter (Where clause)

- Simply compare a series with a scalar result a boolean index series which be used as index array into the original DF

 #+begin_src python
is_dinner = tips_csv['time'] == 'Dinner'
is_bill_greater_than_ten = tips_csv['total_bill'] > 10
tips_csv(is_dinner | is_bill_greater_than_ten)
 #+end_src

- Use bitwise logic operator to do logic operations

- NUll checking: =notna()= and =isna=

** GroupBy

- =groupby()=: produces a =DataFrameGroupBy= on which various operations can be done.

- =count()= applies to each columns while =size()= returns group sizes.

#+begin_src python
tips_csv.groupby(['sex']).size()
tips_csv.groupby(['day']).agg({'tip': np.mean, 'day': np.size})
#+end_src

** Join

- =merge=: this function alone can perform all database joins.

 #+begin_src python
pd.merge(df1, df2, on='key') # an inner-join by default on 'key'
pd.merge(df1, df2, on='key', how='right')
 #+end_src

- =concat=: concat along a particular axis, can be used for union

 #+begin_src python
pd.concat([df1, df2]).drop_duplicates()
 #+end_src


** Deletion

Reassignment what remains

** Updating

- =.loc= with assignment

* [[https://pandas.pydata.org/docs/user_guide/dsintro.html][Data Structures]]

** =Series=

one-dimensional ndarray with hashable /index/ label axis, a valid argument to most NumPy functions, and actually implemented on top of Numpy array, slicing and indexing is valid operations on =Series=.

=Series= is also dict-like. =Series= automatically align the data based on label when Numpy operations are applied. Operations between unaligned  =Series= will have the union of the indexes involved, with the difference part being =Nan=

** =DataFrame=

A =DataFrame= is a 2-dimensional data structure that can store data of different types (chars, integers, floating points, categorical data and more) in columns.
    1. Each column in a =DataFrame= is a =Series=. A =Series= has no column labels. A series does have row labels.
    2. Every row has an index number

A SQL table, a spreadsheet, a dict (indexed by columns) of =Series= objects, or a list of dicts (each representing a row or a column). Multiple indexes on row or column is possible by pasing a tuples dictionary.

Columns can be deleted or popped like with a dict =del df['two']=. =DataFrame= behaves like dict. Its indexes are primarily the column labels.

Data operations between DataFrame objects automatically align on both the columns and the index (row labels).

** Essential Operations

- ndFrames may have =Nan=, use =.equals()= for comparison.

- =.combine_first()=, =.combine()=: combine two ndFrames into one

- =value_count()=: histogram, =cut()= and =qcut= prior

- Functions operating on a ndFrame can be used with a =.pipe()=.

- =.apply()= applies functions to rows or columns. For aggregation specifically, use =.aggregate= (=.agg=), and =.transform()= for returning an object indexed the same as the original. =applymap= (=DataFrame=) and =map= (=Series=) apply any Python functions to ndFrames elementwise.
