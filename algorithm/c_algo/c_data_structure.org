#+title: Data Structures and Algorithms In C

* Data Structures

Data structure is one of the subjects that intrinsically connected with the
design and implementation of efficient algorithms. It deals with the study of
methods, techniques, and tools to organize or structure data in computer memory.

** Data Defintion and Data Structure

- /Data/: the basic entity or fact that is used in a calculation or manipulation
  process.
  + two types: /numerical/ or /alphanumerical/ data. High level PL can divide
    numerical data further into integers and floating-point numbers while
    alphanumerical data are divided into /characters/ and /strings/.

- the difference between data and information: Data are raw facts without
  context, whereas Information is data with context. Data are an
  abstraction of Information in a problem-solving system. Data requires
  interpretation to become an Information.

** Concept

- /Data Structure/: the representation of the logical relationship between
  individual elements of data. A mathematical or logical model of organizing the
  data items into computer memory in such a way that they can be used
  efficiently. The study of data and representation of data objects within the program.
  + the purpose of studying data structure is to learn how to organize data into
    memory so that it can be accessed quickly and conveniently.
  + purposes:
    - organizing the data (how data items are organized in the main memory)
    - accessing methods (how data items can be accessed)
    - specifying the degree of associativity (how the data are interrelated)
    - processing alternatives for data (how many different ways are there in
      which these data items can be processed).
** Classification

- /primitive data structure/: can be manipulated or operated by the /machine
      instruction/.
- /non-primitive data structure/: derived from the primitive data structure;
  homogeneous or heterogeneous.
  - linearity:
    + *linear*: every data item is related to its previous and next data items.
        The traversing is exactly one.
      - *sequential*: objects stored in a sequence of consecutive memory locations
       e.g. array, stack, queue
      - *linked*: a set of nodes linked together and organize with links
      e.g. linked list, linked stack, linked queue.
    + non-linear: every data item attaches to many other data items in specific
      ways to reflect relationships. The traversing is always more than one.
      e.g. graph, tree
  - static/dynamic: if the data structure can be extended or shrunk during the execution.

** Abstract Data Type

- /Data Object/: an object having a data, whose logical behavior is defined by a
  set of values and a set of operations.

- /Abstract Data Type/: An ADT describes the data objects which constitute the data structure and
  the fundamental operations supported on them.
  + An ADT focuses on data abstraction and data structure behavior instead of
    implementation. A specification.
  + a conceptual model of information structure
  + it specifies the components, the structural relationships and a list of
    operations allowed.
  + A data structure is the *design representation* of an ADT.
  + typical operations includes creation of data structure, insertion, deletion
    of a data item, traversing, searching, sorting, merging of two different
    sorted lists into a single sorted one

** Array and String

*** Array

A collection of the same type of data items stored in consecutive memory
locations.

Multi-dimensional arrays are just arrays of arrays (not arrays of pointers, but
pointer to array =data_type (*p)[size]=),
implemented in C in the row-major order, i.e. elements are stored row by row.

**** Operations

- /traversing/: linear traversal

- /insertion/, /deletion/: sorted and unsorted arrays require different
  algorithms. The former requires a search before insertion/deletion.

- /merging/: combining more than one sorted array together so that the resulting
  array remains sorted. Suppose both arrays are ordered in ascend.
  Since the front element of both arrays are the smallest in
  its array, one of them must be the smallest in both arrays. Move this one out and
  the remaining front pair  are the smallest two. Continue this
  process and move all elements into the new array.
  + $O(n)$ time-complexity

**** Applications

- implementation of vectors, matrices (including sparse matrices), polynomials and different kinds of tables

- also implements heaps, hash tables, deques, queues, stacks and strings

***** Polynomial Examples

- Linear array representation: index of the array as the exponent and the
  element as the coefficient of each term

- array of structure representation: each term is represented by a structure of
  the exponent and the coefficient and all terms form an array.

***** Sparse Matrices

- /triangular matrices/: since the shape is regular, non-zero elements can be placed in
  a 1-D array in a specified order, typically at $i \times (i + 1) / 2 + j$ for
  $A_{i, j}$ for a lower-left triangular matrix.

- /band matrices/: a sparse matrix whose non-zero entries are confined to a
  diagonal band, comprising the main diagonal and zero or more diagonals on
  either side. $A_{ij} = 0$ when $\alpha < i – j$ or $\beta < j – i$: where
  $\alpha, \beta \geq 0$ and $i, j= 1 to n$.
  + an array of three-tuples

**** String

In C, arrays of characters with a =\0= character.

***** Operations

- length (=strlen=); copy =strcpy=; concatination =strcat=; comparison =strcmp=;

- substring matching: find the positions of all occurrences of a pattern within a
  given string or text. =strstr=


** Linked List

A linear ordered collection of finite homogeneous data elements (/node/) where
the linear order is maintained by means of links or pointers.

*** Application

- Polynomials: defined a linked list of term node.

** Stacks

*** Applications

- Hardware memory stack

- Evaluation of arithmetic expressions: reverse polish notation

** Queues

** Dequeues

Queues and stacks can be seen as specializations of dequeue.

** Priority Queue

Not an implementation but a ADT.

The elements are arranged on the basis of priority in which elements with higher
priority are processed before those of lower priority and elements of the same
priority are processed in the order of insertion.

*** Implementation

- presorted arrays or linked lists

- a max-heap: in a max heap, for any given node C, if P is a parent node of C,
  then the key (the value) of P is greater than or equal to the key of C.

** Tree

a non-empty fintie set of nodes with a special node called the /root/ and other
nopdes partitioned into zero or more disjoint trees called the subtrees of the
root.

*** Terminology

- /Node/, /Vertex/:

- /Root/

- /Parent node/ (/predecessor/), /Children/ (/successor/), /siblings/, /descendant/ and /ancestor/

- the /degree/ of a node: the number of subtrees of a node

- the /degree/ of a tree: the maximum degree of the nodes in the tree

- internal node (/non-terminal node/, with at least one child), external node
  (/leaf node/, of zero degree)

- /level/: the root of the tree is at level one/zero. If a node is at level $L$, then
  its children are at level $L+1$

- height/depth of a tree: the maximum level of any node in the tree

- /forest/: a set of zero or more disjoint trees.

- /edge/: the line from a parent to its successor.

- /path/ and /path length/: a sequence of consecutive edges from a source node
  to the destination node.

- /internal path length/, /external path length/: the sum of the levels of all
  the internal/external nodes in the tree

- /branch/: a path ending in a leaf node

*** Classification

**** Binary Tree

A tree of degree two at most.

- /strictly binary tree/, /2-ary tree/: every node is of two degrees or of zero degree.

- /extended binary tree/, /2-tree/: external nodes added to leaf nodes and nodes
  of degree one

- /complete binary tree/: all the levels are filled and the last level possibly
  are partially filled from left to right.

***** Properties

- Lemma 1: A binary tree with $n$ nodes has exactly $n - 1$ edges.
  + proof by induction
  + means there is no cycles and thus only one path from one node to another.

- Lemma 2: the maximum number of nodes on level $i$ of a binary tree is
  $2^{i-1}$ where $i \geq 1$.
  + proof by induction

- Lemma 3: the maximum number of nodes in a binary tree of depth $k$ is $2^{i} -
  1$ where $k \geq 1$.
  + from Lemma 2

- Lemma 4: for any non-empty binary tree T, if $n_{0}$ is the number of leaves
  and $n_{2}$ is the number of nodes of degree two, then $n_{0} = n_{2} + 1$.
  + Proof: the number of edges $E = n + 1$ where $n$ is the number of nodes.
    let $n_{1}$ be the number of nodes of degree one, then $n = n_{0} + n_{1} +
    n_{2}$.
    Also $E = n_{1} + 2n_{2}$. This leads to $n_{0} = n_{2} + 1$.

- Lemma 5: If $n$ is the total number of nodes in a complete binary tree of
  height $h$, then $h = \lfloor \log_{2} n \rfloor + 1$

* Related Algorithms Theory

** Basic Concepts

- *Algorithm*: a finite sequence of instructions that transforms externally
  supplied /input/ into /output/ after completion of the job with
  /definiteness/ ,/effectiveness/ (elementary instruction) and /feasibility/.

- common types
  + /divide and conquer/
  + /dynamic programming/
  + /greedy method/
  + /backtracking/
  + /branch and bound/
  + /serial or parallel or distributed algorithm/
  + /deterministic or non-deterministic algorithm/

** Algorithm Analysis

- Theoretical/Apriori Analysis

- Empirical/Posteriori Analysis

** Recursion: Define Anything In Terms of Itself

A technique that allows us to brak down a problem into one or more subproblems
that are similar in form to the original problem.

- essential parts:
  + *base criteria*/*base case* which the function stop calling itself.
  + *inductive clause*

- /infinite regress/: recursive function keeps calling itself infinitely

- /depth of recursion/: the maximum level number of a recursive function during
  its execution with given set of arguments.

- /types of recursion/:
  + whether the function calls itself or not
    - *direct*
    - *indirect*
  + how many internal recursive calls are made within the body
    - *linear recursion*: a single call is performed
    - *binary recursion*: two recursion calls are performed
    - *non-linear* or *multiple* recursion
  + whether there are pending operations or not at each recursive call
    - *tail* recursion: the last operation of the recursive function is a
      recursive call
    - *non-tail* recursion

#+begin_src cpp
// direct call
function F()
{
    if (base condition) {
        //...
    } else {
        F();
    }
}

// indirect call
function A()
{
    //...
    call to B;
    //...
}

function B()
{
    //...
    call to A();
    //...
}
#+end_src

- disadvantages:
  + uses stack memory without checking
  + may be slower than its iterative version

*** Tail Call and Iterative

- Convert a non-tail recursive call to a tail recursive by means of an
  /auxiliary parameter/ used to form the result.

- Given the tail recursive version

#+begin_src c
F(x)
{
    if (P(x)) return G(x);
    return F(H(x));
}

// the iterative version
F(x)
{
    while (!P(x)) {
        x = H(x);
    }
    return G(x);
}
#+end_src
