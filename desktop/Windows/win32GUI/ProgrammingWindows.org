#+title: Programming Windows

* Windows and Messages

- /window/: a rectangular area on the screen that receives user input and
  displays output in the form of text and graphics.
  + /application window/: contains a title bar that shows the program's name, a menu and perhaps a toolbar and a scroll bar.
  + /dialog window/: may or may not have a title bar.
  + various windows controls

- /messages/: the window receives the user input in the form of messages to the window. A window also uses messages to communicate with other windows, that is, the OS calls into a function (the window procedure) in the program with proper arguments. The window procedure does some processing based on the
  message and then returns control to Windows.
  + a message queue is created for the program per thread, which stores all the messages
    to windows a program might create.
  + A windows app includes a message loop to
    retrieve these messages from the queue and dispatch them the appropriate
    window procedure.
  + messages can be /queued/ or /nonqueued/. Nonqueued messages are directly
    sent to the window procedure. Nonqueued messages often result from calling
    certain Windows functions (/CreateWindow/, /ShowWindow/, /UpdateWindow/).
  + a window procedure will not be interrupted. The message loop and the window
    procedure do not run concurrently. A message loop retrieves a message from
    its thread's message queue. =DispatchMessage= does not return until the
    window procedure has returned.
  + a window procedure may be reentered since the procedure itself may call some
    function that results in calling the window procedure. This requires the
    window procedure be reentrant.

- /brush/: a colored pattern of pixels used to fill an area.

A window is always created based on a /window class/, which identifies its
window procedure.

The basic structure of a Win32 GUI app is pretty much the same for all apps and
there's no need to write them every time, just copy and paste.

* Painting the Client Area

** The =WM_PAINT= Message

*** Conditions

Always:

- A previously hidden area of the window is shown again.

- The window with =CW_HREDRAW= and =CW_VREDRAW= sets is resized

- =ScrollWindow=, =ScrollDC=

- =InvlidateRect=, =InvalidateRgn=

- =UpdateWindow=

Sometimes:

- a tooltip is displayed

- a menu is pulled down and then released

- A dialog box or message box that was overlaying the window is removed.

Never (Windows save the covered area and then restores it without an explicit
redraw call):

- the mouse cursor is moved across the client area

- an icon is dragged across the client area

** Invalid/Update Region

- /invalid rectangle/: the smallest rectangle that encompasses the invalid
  region.
  + =BeginPaint= validates the entire client area.
  + manually invalidate by calling =InvalidateRect=; or validate with =ValidateRect=
  + Windows does not post two pending paint messages regarding invalid regions.
    Two invalidations only result in one message and a changed invalid rectangle.

A programmer concerned about performance and speed will want to use the invalid
rectangle during processing of the =WM_PAINT= message to avoid unnecessary GDI calls.

** Graphics Device Interface (GDI)

GDI supports both pixel coordinate system and virtual coordinate system.

*** Functionality Group

- device context creation/release

- device context information retrieval
  + =GetDeviceCaps()= (get device capabilities)

- device context attribute management

- drawing function

- various functions working with GDI objects.

*** Device Context

Associated with a particular display device and usually associated with a
particular window on the display.

A device context has some /graphics attributes/ that define some particulars of how GDI drawing
functions work.

**** Enter Device Context Scope

- =BeginPaint= and =EndPaint=: for =WM_PAINT= processing

- =GetDC= and =ReleaseDC=: update the entire area; paint upon messages other
  than =WM_PAINT= or any other purposes.

**** Private Device Context

- =CS_OWNDC=: each window created based on this window class has its own private
  device context that continues to exist when the window is destroyed. Use
  =GetDC= or =BeginPaint= to retrieve it and dispose it with =ReleaseDC()=. Use
  =SaveDC= to save some changes and =RestoreDC= to restore such changes.

*** GDI Object

- pens, brushes, bitmaps, regions, fonts and palettes.

- GDI objects should be deleted after using.

- Stock objects shouldn't be deleted.

*** Primitives

- /Lines/, /curves/, /rectangles/, /ellipses/, /arcs/ and /Bezier splines/

- /Filled areas/: enclosed area filled with the current GDI brush object.

- /Bitmap/: a rectangular array of bits that correspond to the pixels of a
  display device.

- /Text/

**** Draw Dots and Lines

Several attributes of the device context affect the appearance of lines

- /current pen position/: =MoveToEx()= moves the current position; =GetCurrentPositionEx()=

- /pen/: the pen of the device context determines the line's color, width, and its
  style (solid, dotted, or dashed).
  + =WHITE_PEN=, =BLACK_PEN=, =NULL_PEN= (no pen at all and no line will be
    drawn) or =CreatePen()=, =CreatePenIndirect()= a logical pen.
  + =SelectObject= selects the pen into the current device context and returns
    the previous pen
  + the =LOGPEN= structure can be retrieved using =GetObject()= or
    =GetCurrentObject()=.

- /background mode/: =TRANSPARENT= or =OPAQUE=

- /background color/
  + the gap between dotted or dashed segments are painted with the background
    color. The background color can be =SetBkColor()= or =GetBkColor()=.


- /drawing mode/: Windows may choose not to simply copy (=R2_COPYPEN=) the pen's color to the
  destination pixels. Instead, it can perform /raster operations/ between the
  destination pixels and the pen. The most common ones are /binary raster
  operation/ (ROP2). 16 ROP2 drawing modes are available for even colored display.

drawing using the the following functions

- =SetPixel()=, =GetPixel()=: versatile but not optimized

- =LineTo()=; =Polyline()=, =PolylineTo()=, =PolyPolyLine()=

- =Arc()=, =ArcTo()=, =AngleArc()=

- =PolyBezier()=, =PolyBezierTo()=

- =PolyDraw()=

- =Rectangle()=, =Ellipse()=, =RoundRect()=, =Pie()=, =Chord()=, =Polygon()=, =PolyPolygon()=: draw outlines
  and fill an area with the default brush (also called /pattern/, a 8x8 bitmap
  that is repeated within the interior area). With dithering, a monochrome
  display can show 64 different colors.
  + =WHITE_BRUSH=, =LTGRAY_BRUSH=, =GRAY_BRUSH=, =DKGRAY_BRUSH=, =BLACK_BRUSH=,
    =NULL_BRUSH= (or =HOLLOW_BRUSH= for no filling).
  + =CreateSolidBrush()=, =CreateHatchBrush()=; or =CreateBrushIndirect()= a
    =LOGBRUSH=.
  + =SetPolyFillMode()=: [[https://www.geeksforgeeks.org/even-odd-method-winding-number-method-inside-outside-test-of-a-polygon/][Point in polygon]], [[https://cs.stackexchange.com/questions/28656/calculate-winding-number][Calculate Winding Number]];
     /alternate/ between polygon sides along the scan line
    (horizontal line); /winding/ non-zero winding numbers.


*** Other Aspects of GDI

- /Mapping Modes and transforms/: how drawing units are mapped; how graphics
  objects are skewed and transformed. All coordinates and dimensions in GDI are
  /logical units/ and must be transformed into /device units/ (pixels), governed
  by the /mapping mode/ of the device context: it determines the mapping of the
  /window/ (logical coordinates, in pixels, inches, millimeters or any other
  custom unit) to the /viewport/ (device coordinates,
  specified in terms of device pixels).
  + eight mapping modes are available in =wingdi.h=; =SetMapMode()=,
    =GetMapMode()=, default =MM_TEXT=; other mapping modes are simply a
    convenient way to avoid doing scaling.
  + mapping modes are an attribute of device contexts: window message parameters
    always conveys device units.
  + /device coordinate systems/
    - the x-axis grows rightward and the y-axis grows downward.
    - /screen coordinates/ (=CreateWindow()=, =MoveWindow()=, =GetMessagePos()=,
      =GetCursorPos()=, =GetWindowRect()=, =WindowFromPoint()=), /whole-window coordinates/ (=GetWindowDC()=), /client area coordinate/
      (=GetDC()=, =BeginPaint()=)
  + $Coord_{Viewport} = (Coord_{window} - Coord_{WindowOrigin}) \times
    \frac{Coord_{ViewExtent}}{Coord_{WindowExtent}} + Coord_{ViewOrigin}$ where
    extents act as scaling factors. =DPtoLP()=, =LPtoDP()=.

- /metafile/: a collection of GDI commands stored in a binary form.

- /region/: a complex area of any shape.

- /path/: a collection of straight lines and curves stored internally in GDI.

- /clipping/: drawing can be restricted to a particular section of the client
  area.

- /palette/:
  + Windows use a 32-bit unsigned =COLORREF= value  to refere to a particular color.
  + =RGB(r, g, b)=; =GetRValue=, =GetGValue=, =GetBValue=

- /printing/

** Display Text

- =TextOut=

- The device context defines the font (=SYSTEM_FONT=, the font for title bars is
  used by default), the background color

- /Character Size/: =GetTextMetrics= (called only once, maybe when processing =WM_CREATE=) returns the font currently selected in the
  device context.
  + /ascent/, /descent/: the length above/below the baseline
  + /height/: the full vertical length
  + [[https://en.wikipedia.org/wiki/Leading][/internal leading/]]
  + /point size/: indicates the size of the character in a font, the distance
    from the top of the tallest character in the font to the bottom of the
    descenders in characters such as =j=, =q=, =p= and =y= excluding accent
    marks (=tmHeight= minus =tmInternalLeading=). A point is 1/72 inch.
  + The Windows system font (Small 96 DPI or Large 120 DPI, =LOGPIXELSX=, =LOGPIXELSY=) is assumed to be 10-point font with
    12-point line spacing.


- =SetTextAlign=: text alignment set the reference point =TextOut= uses to place
  a string.

** Scroll Bars

Scroll bars have an associated /range/ and /position/.

Windows handles all processing of mouse messages to the scroll bar.
Scroll bars do not work magically. The programm must act to its state change and
its other state info is maintained by the programmer.

* Window-Bound Timer

An input device that periodically notifies an app when a specified interval of
time has elapsed by sending =WM_TIMER= messages to signal the intervals.

Windows does not load up the message queue with multiple =WM_TIMER= messages.
Thus, A clock cannot keep time by count =WM_TIMER= messages it receives. The =WM_TIMER=
only informs the window that the time is due. A =WM_TIMER= is synchronous to the
execution of the window procedure.

- =SetTimer()= sets a new/existing timer and stop it with =KillTimer()=
