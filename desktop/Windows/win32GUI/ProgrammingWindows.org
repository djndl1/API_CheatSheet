#+title: Programming Windows

* Windows and Messages

- /window/: a rectangular area on the screen that receives user input and
  displays output in the form of text and graphics.
  + /application window/: contains a title bar that shows the program's name, a menu and perhaps a toolbar and a scroll bar.
  + /dialog window/: may or may not have a title bar.
  + various windows controls

- /messages/: the window receives the user input in the form of messages to the window. A window also uses messages to communicate with other windows, that is, the OS calls into a function (the window procedure) in the program with proper arguments. The window procedure does some processing based on the
  message and then returns control to Windows.
  + a message queue is created for the program per thread, which stores all the messages
    to windows a program might create.
  + A windows app includes a message loop to
    retrieve these messages from the queue and dispatch them the appropriate
    window procedure.
  + messages can be /queued/ or /nonqueued/. Nonqueued messages are directly
    sent to the window procedure. Nonqueued messages often result from calling
    certain Windows functions (/CreateWindow/, /ShowWindow/, /UpdateWindow/).
  + a window procedure will not be interrupted. The message loop and the window
    procedure do not run concurrently. A message loop retrieves a message from
    its thread's message queue. =DispatchMessage= does not return until the
    window procedure has returned.
  + a window procedure may be reentered since the procedure itself may call some
    function that results in calling the window procedure. This requires the
    window procedure be reentrant.

- /brush/: a colored pattern of pixels used to fill an area.

A window is always created based on a /window class/, which identifies its
window procedure.

The basic structure of a Win32 GUI app is pretty much the same for all apps and
there's no need to write them every time, just copy and paste.

* Painting the Client Area

** The =WM_PAINT= Message

*** Conditions

Always:

- A previously hidden area of the window is shown again.

- The window with =CW_HREDRAW= and =CW_VREDRAW= sets is resized

- =ScrollWindow=, =ScrollDC=

- =InvlidateRect=, =InvalidateRgn=

- =UpdateWindow=

Sometimes:

- a tooltip is displayed

- a menu is pulled down and then released

- A dialog box or message box that was overlaying the window is removed.

Never (Windows save the covered area and then restores it without an explicit
redraw call):

- the mouse cursor is moved across the client area

- an icon is dragged across the client area

** Invalid/Update Region

- /invalid rectangle/: the smallest rectangle that encompasses the invalid
  region.
  + =BeginPaint= validates the entire client area.
  + manually invalidate by calling =InvalidateRect=; or validate with =ValidateRect=
  + Windows does not post two pending paint messages regarding invalid regions.
    Two invalidations only result in one message and a changed invalid rectangle.

A programmer concerned about performance and speed will want to use the invalid
rectangle during processing of the =WM_PAINT= message to avoid unnecessary GDI calls.

** Graphics Device Interface (GDI)

*** Device Context

Associated with a particular display device and usually associated with a
particular window on the display.

Has some /graphics attributes/ that define some particulars of how GDI drawing
functions work.

**** Enter Device Context Scope

- =BeginPaint= and =EndPaint=: for =WM_PAINT= processing

- =GetDC= and =ReleaseDC=: update the entire area; paint upon messages other
  than =WM_PAINT= or any other purposes.
