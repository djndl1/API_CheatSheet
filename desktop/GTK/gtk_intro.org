* GTK and Its Friends

* Hello World

#+include: "../GUITutorials/GTK/gtk_c/src/helloworld.c" src C

=gtk_init()= to initialize GTK, before any other GTK+ function, not needed when using =GtkApplication=. Use =gtk_init_check()= if a textual interface is available.

Control of the application is managed by signals, timeout functions and various other callback functions once =gtk_main()= is called.

=GTK_WINDOW_TOPLEVEL= and =GTK_WINDOW_POPUP= are the only two elements available in the =GtkWindowType= enumerations. A pop-up window has no border or minimize/maximize button, nor can it be resized. The window manager does not know about them.



** Hierarchy

#+BEGIN_SRC 
+--------------+
|   GObject    |
+------|-------+
       |
       v
+------|----------+
|GInitiallyUnowned|
+------|----------+
       |
       v
+------|-------+
|  GtkObject   |
+------|-------+
       |
       v
+------|-------+
|  GtkWidget   |
+------|-------+
       |
       v
+------|-------+
| GtkContainer |
+------|-------+
       |
       v
+------|-------+
|   GtkBin     |
+-----|--------+
      |
      v
+-----|-----+
| GtkWindow |
+-----------+  
#+END_SRC

- =GObject=: allow objects derived from it to be constructed, destroyed, referenced and unreferenced. It also provides the signal system and object property functions. cast macro =G_OBJECT()=.

- =GInitiallyUnowned=: floating reference

- =GtkObject=: cast macro =GTK_OBJECT()=

- =GtkWidget=: abstract base class for all GTK widgets. The standard practice is to store all widgets in =GtkWidget=. =GTK_WIDGET=.

- =GtkContainer=: abstract class used to contain one or more widgets. =GTK_CONTAINER=

- =GtkBin=: abstract class that contains only one child. =GTK_BIN=.

- =GtkWindow=: standard window object.

** Signals and Callbacks

/signal/: a notification (a chain of functions) to the application that the users has performed some action. The callback function will be called when the action has occurred and the signal is emitted or when the signal is explicitly emitted.

=g_signal_connect()=

The generic form of callback function is like

#+BEGIN_SRC c
static void callback_function(GtkWidget *widget,
    ... /* other possbile arguments */,
    gpointer data);
#+END_SRC

=g_signal_emit_by_name()=, =g_signal_emit()= (used with a signal identifier) can be used to emit signals. =g_signal_stop_emission_by_name()= 

/Events/ are special types of signals that are emitted by the X Window system
(related signals are named with an =event=). They are initially emitted by the X Window System and then sent from the WM to the application to be interpreted by =GLib=. =delete-event= signal is emitted when the user tries to close the window. Connecting events to a callback is done in the same manner with =g_signal_connect= but with a different callback

#+BEGIN_SRC c
static gboolean callback_function(GtkWidget *widget, GdkEvent *event, gpointer data);
#+END_SRC

the returned value indicates whether the event has been handled. There is no need to connect to it unless the default is overriden. =GdkEventType= enumeration provides a list of available event types that can be used to determine the type of event that has occurred. If more specific type info is known, the argument types can be declared otherwise:

#+BEGIN_SRC c
static key_press(GtkWidget *widget, GdkEventKey *event, gpointer data);
#+END_SRC

** =GtkWidget= Functions

- =gtk_widget_destroy()=: drop the reference count on the widget and all of its children recursively. The widget along with all its children will be destroyed and all memory freed. Generally only called on top-level widgets such as dialog windows and quit menu item.

- =gtk_widget_set_size_request()=: set the minimum size of a widget. It is best to allow GTK to choose the size of widgets and windows in most cases.

- =gtk_widget_grab_focus()=: force a widget to grab keyboard focus if the widget can handle keyboard interaction.

- =gtk_widget_set_sensitive()=: toggle a widget and all its children.

** =GtkWindow= Functions

- =gtk_window_set_resizable()=: all windows are set as resizable by default, desirable in most apps. The ability to resize is controlled by the WM, so this setting may not be honored in all cases.

- =gtk_window_set_default_size()=: ignored if the window is larger than specified or the larger size request has been made. It only sets the initial size and does not prevent the user from resizing the window as they want.

- =gtk_window_move()=: may be ignored by the WM.

- =gtk_window_set_gravity()=: change the origin of coordinate.

- =gtk_window_set_transient_for()=: 

- =gtk_window_set_icon_from_file()=  

** Processing Pending Events

#+BEGIN_SRC c
// update the UI while doing some time intensive computation
while (gtk_events_pending())
    gtk_main_iteration(); // runs a single iteration of the mainloop
#+END_SRC

** =GtkButton=

/accelerator key/: a key or set of keys that can be used to activate a predefined action.

A special type of container that turns its child (no limited to text labels) into a clickable entity, only capable of holding one child. Almost always used with =clicked= signal. Generally used with a label =gtk_button_new_with_label()=; =gtk_button_new_with_mnemonic=

** Widget Properties

GObject provides a [[https://discourse.gnome.org/t/property-set-property-and-get-property/2558][property system]]. Every class derived from the =GObject= class
can install any number of properties. Use =g_object_get()= to retrieve the
current value of a property. There is a dispatch function in each class's
implementation that calls its setters/getters to actually sets/gets properties.

#+BEGIN_SRC c
g_object_get(button, "relief", &value, NULL); // same as gtk_button_get_relief
g_object_set(button, "relief", GTK_RELIEF_NORMAL, NULL);

// monitor a specific property;
g_signal_connect(G_OBJECT(button), "notify::relief",
                 G_CALLBACK(property_changed), NULL);

static void property_changed(GObject *button,
                             GParamSpec *property,
                             gpointer data)
#+END_SRC

Every =GObject= has a table that associates a list of strings to a list of points, which allows data to be added to an object so that they can be easily accessed.

#+BEGIN_SRC c
void g_object_set_data(GOject *object,
                       const gchar *key,
                       gpointer data);
#+END_SRC

* Container

The main purpose of a container class is to allow a parent widget to contain one or more children.

** Decorator Containers

Widgets that derived from =GtkBin= since they add some type of functionality to the child widget. The actual purpose of =GtkBin= is to provide an instantiable widget from which all subclasses that only require one child widget can be derived. It provides only one function:

#+BEGIN_SRC c
GtkWidget *gtk_bin_get_child(GtkBin *bin);
#+END_SRC

e.g. =GtkWindow=, =GtkFrame= (which draws a frame around its child); =GtkButton=; =GtkExpander=. Widgets that derive from =GtkBin= include windows, alignments, frames, buttons, items, combo boxes, event boxes, expanders, handle boxes, scrolled windows and tool items.

** Layout Containers

Widgets that are used to arrange multiple widgets, derived directly from =GtkContainer=, including boxes, fixed containers, paned widgets, icon views, layouts, menu shells, notebooks, sockets, tables, text views, toolbars, and tree views.

** Resizing

A recursive process of communication between the widget, its ancestors and its children.

- /size requisition/: the desired size of the child. The top-level asks its children for their preferred sizes and the children ask their children and so on until the last child is reached. The last child decides what size it wants to be based on the space it needs to be shown correctly on the screen and any size requests from the programmer. The child passes a size to its ancestors until the top-level widget receives the amount of space needed based on its children's requisitions. Each widget stores its size preferences as width and height values in a =GtkRequisition= object. This request does not have to be honored by the parent widget.

- /size allocation/: the top-level widget begins to resize itself if resizable. It will then pass the amount of available space to its child widget until all widgets have resized themselves. Size allocations for every widget are stored in =GtkAllocation= structure for reach child, which is passed to child widgets for resizing with =gtk_widget_size_allocate()=. Once a widget has been given a size allocation by its parent, the widget has no choice but to redraw itself with the new size. In most cases =gtk_widget_set_size_request()= is best to use for resizing widgets.

** Container Signals

- =add=: a child widget was added or packed into the container.

- =check_resize=: the container is checking whether it needs to resize for its children before taking further action.

- =remove=: a child has been removed from the container

- =set_focus_child=: a child of the container has received focus from the WM.

** Common Containers

- =GtkBox=: an abstract container widget that allows multiple children to be packed into one-dimensional rectangular area.

#+include: "../GUITutorials/GTK/gtk_c/src/gtkbox.c" src C

- =GtkPaned=: holds exactly two widgets

#+include "../GUITutorials/GTK/gtk_c/src/panes.c" src C

- =GtkGrid=:

#+include "../GUITutorials/GTK/gtk_c/src/tables.c" src C

- =GtkFixed=: a type of layout container that allows you to place widgets by the pixel. Use variable-sized containers instead of `GtkFixed`.

- =GtkExpander=: the child can be shown or hidden by clicking the triangle to the left of the expounder's label.

- =GtkNotebook=

** Event Boxes

=GtkEventBox= catches events for the child widget by providing a GDK window for the object.

* Basic Widgets

A widget can become disabled or inactive, managed by the =sensitive= property and =gtk_widget_set_sensitive=. There are other widget flags provided by =GtkWidgetFlags= enumeration, which can be set with =GTK_WIDGET_SET_FLAGS()= or disabled with =GTK_WIDGET_UNSET_FLAGS()=.

- stock items: pairs of images and strings that accommodate often-used menu items and buttons. =gtk_button_new_from_stock()=.

  #+BEGIN_SRC C
button = gtk_button_new_from_stock(GTK_STOCK_CLOSE);
g_signal_connect_swapped(G_OBJECT(button), "clicked",
                         G_CALLBACK(gtk_widget_destroy), (gpointer) window);
  #+END_SRC

- =GtkToggleButton=: holds its active and inactive state after it is clicked.

- =GtkCheckButton=: places a discrete toggle next to the display text, derived from =GtkToggleButton=.

- =GtkRadioButton=: derived from =GtkCheckButton=. Toggles that are generally grouped together. In a group, when one radio button is selected, all others will be deselected. The group forbids selecting multiple radio buttons at once. There is no way provided by GTK to deselect a radio button.

- =GtkEntry=: a single line, free-form text entry and can be used for text entry, password entry and even number selections. Invisibility character is shown instead of password content in password mode. Text does not always have to be editable in an entry.

- =GtkSpinButton=: a number select widget that is capable of handling integer, float. Derived from =GtkEntry=. =GtkAdjustment= is used alongside =GtkSpinButton=, as well as multiple widgets derived from =GtkRange=. Once added to a widget, memory management of the adjustment is handled by the widget.

- =GtkScale=: provides a a horizontal or vertical slider that can choose an integer or a float, used when the user is restricted from entering values.


** Additional Buttons

- =GtkColorButton=: allow users to select a specific color in a six-digit hexadecimal values or the RGB value.

- =GtkFileChooserButton=: an easy method to ask users to choose a file or a folder, which implements =GtkFileChooser= interface. A =GtkFileChooserDialog= is opened that allows the user to browse and select one file or one folder.

- =GtkFontButtons=

* Dialogs

A special type of =GtkWindow= that is used to supplement the top-level window. It can be used to give the user a message, retrieve information from the user or provide some other transient type of action.

A dialog widget has a horizontal separator, which divides the widget into the /action area/ (=GtkHButtonBox=) that contains a collection of buttons and the top main part, which is a =GtkVBox=.

#+include: "../GUITutorials/GTK/gtk_c/src/SimpleDialog.c" src C

** Built-in Dialogs

- =GtkMessageDialog=: give one of four types of informational messages: general information, error messages, warnings and questions.

#+include "../GUITutorials/GTK/gtk_c/src/MessageDialog.c" src C

- =GtkAboutDialog=

=GdkPixBuf= a class that contains information about an image in memory. It can be used to build images manually by placing shapes or pixels or to load a prebuilt image from a file.

GLib provides a standard method for error propagation =GError= structure.

#+BEGIN_SRC c
struct GError {
  GQuark       domain; // a group that encompasses similar types, resolved at runtime
  gint         code; // an error code that falls under the domain
  gchar       *message;
};
#+END_SRC

Use =g_clear_error()= to reset the =GError= values to their initial states before reuse.

- =GtkFileChooserDialog= uses =GtkFileChooserWidget= to choose a file or folder.

- =GtkColorSelectionDialog=: a dialog containing a =GtkColorSelection= widget.

- =GtkFontSelectionDialog=

- =GtkAssistant=: A dialog with multiple pages. A page has a type. The first page should always be =GTK_ASSISTANT_PAGE_INTRO=. =GtkAssistant= is not derived from =GtkDialog=.

- =GtkProgressBar=:

* Chap.7 The Text View Widget

- =GtkScrolledWindow=: use two scrollbars to allow a widget to take up more space than is visible on the screen. Associated with =GtkAdjustment= object, used to track the current position and range of a scrollbar, not directly accessed, though.

- =GtkViewport=: adaptor class for widgets that do not support scrolling.

Read the official doc /text widget conceptual overview/.

- =GtkTextBuffer=: represents the text being edited. Each buffer can be displayed by any number of views. At least one line (which may be empty). The last line in a buffer never ends in a line separator.

- =GtkTextView=: a widget which can display a =GtkTextBuffer=.

- =GtkTextTag=: marks text. An attribute (anonymous or named) that can be applied to some range of text. Each tag is stored in a =GtkTextTagTable=.

- =GtkTextTagTable= defines a set of tags that can be used together. Each buffer has /one/ tag table associated with it; only tags from that tag table can be used with the buffer. A single tag table can be shared between multiple buffers.

Text in GTK is in UTF-8. One character can be encoded as multiple bytes:
  + /offset/: character counts
  + /indexes/: byte counts

#+include "../GUITutorials/GTK/gtk_c/src/textview2.c" src C

- =GtkTextIter=: a position between two characters in a buffer for text manipulation, a struct designed to be allocated on the stack, copiable by value. Whenever the buffer is modified in a way that affects the number of characters in the buffer, all outstanding iterators become invalid.

- =GtkTextMark=: an invisible cursor or insertion point which can be used to preserve a position. =insert= and =selection_bound= are builtin marks for =GtkTextBuffer=. Has a gravity set to the right of pointed character.

An iterator pointing to a text mark can be retrieved with =gtk_text_buffer_get_iter_at_mark()=.

