# Threading

- /Thread/: the basic unit to which an operating system allocated processor time.

- /Thread Context/: all the information the thread hnneds to seamlessly resume execution, including the thread's set of CPU registers and stack.

* Thread

** =System.Threading.Thread=

- =ThreadState=: of interest only in a few debugging scenarios.
  + thread abortion is not longer supported in new dotnet, better use a process for such code.

- =IsBackground=: Either foreground threads or background threads: foreground threads keep the process alive.
  + the main application thread is a foreground thread
  + any thread created by a =Thread= class constructor without setting it to background later is a foreground one
  + all threads that enter the managed execution environment from unmanaged code is by default background
  + thread pool threads are by default background.

- External unmanaged threads in COM: the CLR checks in its TLS if the thread is already a CLR thread, if not, a new =Thread= object is created and installed in the TLS of that thread.

- Thread Procedure Parameters: =ParameterizedThreadStart= might do, but a more type-safe way is to encapsulate both the thread procedure and the data fields into a worker object, and pass the thread procedure that uses the internal state of the worker object to the =Thread= object.

- Thread Return value:
  + pass a callback to the thread procedure to call.

- =CurrentCulture= (culture-sensitive oprations as parsing and formatting, string comparison and sorting and also controls the writing system and calendar used by a thread), =CurrentUICulture= (culture-sensitive retrieval of resources in resource files)
  + initialized by the current system culture =CultureInfo.DefaultThreadCurrentCulture= and UI culture (not true for TAP async operations).

- Thread Information
  + Managed Thread id and hash code. Managed Threads do not directly map to unmanaged threads in a one-to-one way.
  + =Name=
  + =ThreadState=
  + =ThreadPriority=
  + =IsThreadPool=
  + =IsBackground=

- Pausing and Interrupting
  - =Thread.Sleep()=
  - =.interrupt()=: interrupt a blocking (sleeping, waiting, joining) thread by throw a =ThreadInterruptedException= in the interrupted thread.

- Cancellation: use =CancellationToken= for cooperative cancellation.
  + the canceled operation should better throw an =OperationCanceledException= if needed.
  + Operations can cancel itself by
    + polling =CancellationToken.IsCancellationRequested= for long-running operations.
    + registering a callback =CancellationToken.Register= if the operations becme blocked that they cannot check the value of the token in a timely manner. The registered method is called synchronously. Performing manual threading in a callback can cause deadlock.
    + in case the async operation is using a wait handle and has no way to check the token. Synchronization prititives can be awaited but can be waken up by a cancellation.
  + To listen to multiple cancellation tokens, =CancellationTokenSource.CreateLinkedTokenSource=.

#+begin_src csharp
int eventThatSignaledIndex =
       WaitHandle.WaitAny(new WaitHandle[] { mre, token.WaitHandle },
                          new TimeSpan(0, 0, 20));
#+end_src

** =System.Threading.ThreadPool=

provides a pool of threads but not really a pool of threads in the OOP sense.

Examples
  - When creating a default =Task=.
  - Asynchronous timer =System.Threading.Timer= and =System.Timer.Timer=
  - wait handle callback =ThreadPool.RegisterWaitForSingleObject=: call a method in a thread-pool thread when signaled.
  - =ThreadPool.QueueUserWorkItem=

- One thread pool per process. The default size is determined by various factors such as the size of the virtual address space. The actual size can change during the lifetime of the process. The thread pool creates and destroys worker threads in order to optimize throughput.

- The managed thread pool does not clear the TLS used when reusing a thread.

- Not for Single-threaded apartment.

** Timers

- =System.Threading.Timer= (server-based or service component in an MT environment): executes a callback method defined when instantiated on a thread pool thread at regular intervals
  + a simple, lightweight timer that uses callback method.
  + due time (the delay before the first execution) and the period can be changed
  + use =.Dispose(WaitHandle)= to wait until all callbacks have completed (this is not for a safe disposal of the timer). It signals when no callbacks are running. This method is provided to signal the end of the timer's lifetime (along with its callback).

  + useful for a long-running server.
  + has an =Elapsed= event to fire
  + can be =AutoReset= to be periodic or only once.
  + the event might be fired before the last one finishes, making reentrancy of the event handler a requirement.
  + =SynchronizingObject=: for use with WinForms controls. A timer might stop before all queued event handlers (since the signal to fire the event is on the thread pool, unlike the winforms timer), thus resulting a race condition.

- =System.Windows.Forms.Timer=
  + requires a UI message pump
  + always operate from the same thread or marshal the call onto another thread.
  + low resolution compared to other timers.

** Thread Local Storage

- TLS static field: best performance, compile-time needs anticipated
  + =[ThreadStatic] static=: not shared between threads. Field intialization occurs only once on the first thread thus not reliable: the same TLS fields on other threads will not be initialized as expected.

- Lazily Initialized =ThreadLocal<T>= class, recommended.

- Data Slots =System.LocalDataStoreSlot=: flexible, slower and more awkward to use.
  + A slot is a key to the value
  + named and unnamed slots
  + =Thread.AllocateNamedDataSlot()= (a slot for all threads), =GetNamedDataSlot=, =FreeNamedDataSlot=, =Thread.AllocateDataSlot=
  + =Thread.SetData=, =Thread.GetData=
  + Any slots can still be used even if =FreeNamedDataSlot= has freed it, as long as any =LocalDataStoreSlot= to it is still used. However, a new one is used if the slot name is used after freeing.

*** Async Local

#+begin_quote
Because the task-based asynchronous programming model tends to abstract the use of threads, ~AsyncLocal<T>~ instances can be used to persist data across threads.
#+end_quote

* Synchronization

- general definition: To cause two or more events or actions to happen at exactly the same time or same rate, or in a *time-coordinated* way.

- *Thread Synchronization*  a mechanism which ensures that two or more concurrent processes or threads do not simultaneously execute some particular program segment known as critical section.

- *Race Condition*: the condition of an electronics, software, or other system where the system's substantive behavior is dependent on the sequence or timing of other uncontrollable events.

** Synchronized Code Region

=Monitor= locks objects not value types. The monitor box every value object passed to it for each call, making the code unable to synchronize with other threads and unable to exit the critical region. The monitor maintains for each synchronized object

- the thread the owns the lock

- the threads ready to take the lock if available

- the thread waiting for signaling to enter the ready queue

  The =Monitor= is pure managed full portable and possibly more efficient synchronization mechanism.

*** Operations

- =Enter=, =TryEnter=: enter a critical section. Recursive locking is supported. Waiting on a lock can be =Thread.Interrupt=-ed.

- =Exit=: release the lock on the object, the end of a critical section protected by the locked object.

- =Wait=, =Pulse=, =PulseAll=: similar to the semantics of a conditional variable but with one cv per lock. Callable only within the critical section.

** =System.Collections.Concurrent=: builtin synchronized add/remove operations

The traditional sync wrapper provides a [[https://docs.microsoft.com/en-us/archive/blogs/bclteam/synchronization-in-generic-collections-brian-grunkemeyer][false image]] that the threading problem can be easily solved by just using that wrapper.

Insteead of traditional locking on =.SyncRoot= using a thread-safe wrapper from =.Synchronized()=, thread-safe collections use lightweight synchronization mechanism such as
=SpinWait=, =SpinLock=, =SemaphoreSlim=, =CountdownEvent=. Some doesn't even use lock at all, =Interlocked= lock-free operations are used.


*** =IProducerConsumerCollection<T>=

Thread-safe collections intended for producer/consumer usage.

*** =BlockingCollection<T>=

- An implementation of producer/consumer pattern (e.g. pipeline)
  - concurrent addition and removal of items from multiple threads
  - a bounded colletion (with a predefined limited maximum capacity) that blocks =Add= and =Take= operations when the collection is full or empty.
    + This prevents the producer from moving too far ahead of the consumers.
  - Addition and removal are cancellable to allow unblocking.
  - =GetConsumingEnumerable=: the client can consume (take elements from) the collection with an =IEnumerable<T>=
  - One can use multiple such =BlockCollection<T>= as a resource pool with =TakeFromAny= and =AddToAny=

- Warning! =IDiposable= (and not thread-safe to dispose)

#+begin_quote
A producing thread can call =CompleteAdding= to indicate that no more items will be added. Consumers monitor the =IsCompleted= property to know when the collection is empty and no more items will be added (so that both the producer and consumer can gracefully shutdown). A producer task adds items to the collection as long as some external condition is true, and then calls =CompleteAdding=. The consumer task takes items until the =IsCompleted= property is true.
#+end_quote

=CompleteAdding= means the production will end and no more items will be available from this collection.

This collection uses an underlying =IProducerConsumerCollection= as the data store. The default one is a =ConcurrentQueue<T>=.

*** =ConcurrentDictionary=

Operations such as =GetOrAdd=, =AddOrUpdate= are thread-safe but not atomic. One thread that =GetOrAdd= might not get what it adds if the item doesn't exist already, but gets an item added by another thread.

Various =Try*= methods exist because the key might have already been added/removed.

** Manual Synchronization

*** =WaitHandle=: Native OS synchronization handles.

Represent all synchronization objects in the runtime that allow multiple wait operations.

- =WaitOne=: blocks and wait for a signal

- =SignalAndWait=: signal and wait another

- =WaitAny=, =WaitAll=

**** =System.Threading.Mutex=

- more overhead than the =Monitor= class.
- named mutexes can be used globally with any processes =Global\= or session-locally =Local\=.
  + On Windows, every login is a session. Services typically run in a different non-interactive session. On Unix, a shell has its own session.
  + if the name already exists, the already-created named session is used.
- can be used with other =WaitHandle=.
- Recursive
- using abandoned mutex (a mutex acquired but not released by a thread before disposal) results in an =AbandonedMutextException=

**** =System.Threading.Semaphore=, =System.Threading.SemophoreSlim=

A number that represent currently allowed concurrent entries to manage a limited resource.

- named semaphores can be used globally or session-locally.

- A thread can decide to release several entries.

- recursive

- has no thread affinity

=SemaphoreSlim= supports async waits and does not use kernel semaphores.

**** =EventWaitHandle=: Thread Synchronization Event


*** =CountdownEvent=

Signaled when its count reaches zero.

- can be used to unblock multiple threads with a signal from one thread.

*** =ReaderWriterLock= (deprecated), =ReaderWriterLockSlim=

Protects a resource that is read by multiple threads and written to by one thread at a time.

- Read-Writer lock alternates between a collection of readers and one writer. As long as a writer is waiting for the lock, other readers are also blocked (so that the writer is not blocked indefinitely by chance).

- a thread can enter the lock in three modes
  + read mode: one or more reader threads
  + write mode: only one writer thread has acquired the lock
  + upgradable read mode: for cases where a thread usually reads but sometiems write (e.g. =AddOrUpdate=). A reader thread in upgradable mode =EnterUpgradableReadLock= can =(Try)EnterWriteLock= and
    =ExitUpgradableReadLock= after finishing the job. A thread in upgradeable mode can =EnterReadLock= to downgrade to upgradable read mode.

- Mutex rules: a thread might block for several reasons
  + a reader thread might block if there is a writer thread has acquired or is waiting for the lock.
  + the thread is a writer and any other threads are in the above three modes.
  + a thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode or if there is a single thread in write mode.
  + Recursion is not enabled.


*** =System.Threading.SpinLock=

A mutex that spins while it waits to acquire a lock. Use with care and profile performance of the code before switching to =SpinLock=.

- Beneficial when locks are fine-grained and large in number.

- a spin lock might yield the time space.

*** =System.Threading.SpinWait=

Common spinning logic. It spins several times before it starts to yield.

*** Barrier: the End of One Phase of Work

Useful when a parallel operation occurs in phases.

#+begin_quote
A group of tasks cooperate by moving through a series of phases, where each in the group signals it has arrived at the Barrier in a given phase and implicitly waits for all others to arrive. The same Barrier can be used for multiple phases.
#+end_quote

All threads reaching the barrier signal and wait for other threads until enough threads have signaled.
