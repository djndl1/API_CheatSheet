#+title: Obscure Features

* (C# 7.0) Deconstructors

A method that provides tuple syntax for a class to assign each fields to
individual variables.

* (C# 3.0) Partial Methods

Similar to C/C++ function declarations. If the developer does not supply an implementation, the
compiler removes the signature at compile time. Mainly for class designers.


* (C# 7.2) =in= Read-Only Pass By Reference

TODO

* =ref= variable and =ref= return values

TODO

 `ref` locals are initialized to refer to a particular variable, and can’t be modified to refer to a different variable. When declaring a reference local variable, initialization is required. `ref` locals are typicall used to refer to values returned by `return ref`.

 ```csharp
 ref int rbyref(ref int c)
    {
        int a = 5;
        ref int b = ref a;
        return ref c;
    }
 ```

A by-reference-returning method must return a reference, even if it does not need to. The only workaround is to throw an exception.

Declaring a field of type ref isn’t allowed.


* (C# 8.0) Nullable/Non-Nullable Reference Types

A few issues and caveats about non-nullable reference types:

- Non-nullable reference fields/automatically-implemented properties may be
  misdiagnized by the compiler to be uninitialized as they are not initialized
  directly in the constructor.

- Also, any non-nullable field/property needs validation logic to avoid =null=
  (e.g. throwing =ArgumentNullException= if a =null= is assigned).

- Automatically implemented properties need to be read-only (otherwise, a setter
  could set it to =null=).

** Guidelines

- Implement Non-nullable R/W reference fully implemented properties with
  a nullable backing field field, a null-forgiving operator in the getter and
  non-null validation in the setter.

- assign non-nullable reference-type properties before instantiation completes.

- implement non-nullable reference-type automatically implemented properties as read-only.

#+begin_src csharp
public class Employee
{
    public Employee(string name, string id)
    {
        Name = name;
        Id = id ?? throw new ArgumentNullException(nameof(id)); // null validation here
    }

    // the property ensures the field to be non-null
    public string Name
    {
        get => _Name!;
        set => _Name = value ?? throw new ArgumentNullException(nameof(value));
    }

    // nullable to avoid compiler warning
    private string? _Name;
    // ...

    // read-only non-nullable auto-implemented property
    public string Id { get; }
}
#+end_src

- Nullable attributes in =System.Diagnostics.CodeAnalysis= help the compiler
  determine certain null-related pre/postconditions. It also helps generics to
  apply to both nullable value types and reference types without adding constraints.
