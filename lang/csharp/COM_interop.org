#+TITLE: Com_interop

Three main aspects of COM Interop

1. Core services that provides the infrastructure to communicate with COM components.

2. A set of APIs to ease programming COM interop.

3. A set of tools for uses from type library generation to proper registration.

   COM interop ensures a consistent programming model with native .NET when dealing with unmanaged code.

* About COM

** Useful Tools

- =OLEVIEW.EXE=: =oleview stdole2.tlb=

- =MIDL.EXE=: compile an IDL to a binary library

- =REGSVR32.EXE= registers and unregisters COM components in the Windows Registry

** COM/NET Comparison

*** Programming Model

.NET has richer object orientation, supporting implementation inheritance
while COM enable implementation reuse via aggregation and containment.

*** Type Information

COM has type library as a language-neutral way to provide type information.
A typelib may reside in a DLL as a resource or as an independent file.
CoClasses states a subset of interfaces that they implement, not necessarily
all of them. COM type information cannot be guaranteed to be correct, complete
or even available. Some COM interfaces do expose their type info
(=ITypeInfo=, =ITypeInfo2= etc.)

.NET exposes type information via /metadata/, which is guaranteed to be complete
for every component and work with every language in .NET. The .NET CLR knows
everything about a type from the beginning, thus discards any runtime metadata
query.

*** Identity

COM uses GUIDs to identify componets e.g. CLSID, IID, LIBID, APPID(used to DCOM to identify an app).
Some classes also has a friendly ProgID (non-unique), used commonly by VB.

.NET types has a its type name (with the namespace prefixed) along with its (hopefully strongly named) assembly name as its identifier: the assembly-qualified
type name (=typeof(T).AssemblyQualifiedName=).

*** Locating components

COM components are registered in the Windows Registry. COM GUIDs are
placed under =HKEY_CLASSES_ROOT\=. COM checks the registry values
under the key for the specified ID to find the name and location of
the DLL that needs to be loaded to activate the class.

Registered LibIDs are used VB and Visual Studio to provide a list of components that can referenced. Interfaces are often registered with entries to special marshaling classes.

COM reigstration is brittle and can be easily destroyed, tampered or polluted. Files might be moved and registry information might not be correct from the very start.

.NET locates its components in the GAC, the local directory, or some other location specified in a configuration file. Private applications don't have to
share components.

*** Type compatibility

In COM, components interoperability is accomplished through COM's binary
standard.

In .NET, everything is executed in the CLR's type system.

*** Versioning

COM has a =Major.Minor= version scheme for its type libs. ProgIds have
a versioning scheme that contains a version-dependent and a version-independent one. Interfaces has no versioning info (interfaces are in themselves a versioning mechanism): any updates to an interface must be done to a new interface with a different IID.

.NET has a sophisticate versioning scheme that guarantees multiple versions of
an assembly can live side-by-side. The users and the authors can also specify
their own versioning policies for components.

*** Type Safety

.NET objects cannot casually access any memory locations and malicious code
is monitored by the framework.

*** Error Handling

COM: integral status code =HRESULT=, or wrapped in VB's global =Err= object.

.NET: errors are communicated to clients via exceptions: extensible, human-readable, although with some performance implication.

*** Object Lifetime

COM: manual/automatic reference counting

.NET: tracing garbage collection.

** How Does COM Interop Work

Wrappers: RCW and CCW.

*** RCW (Runtime Callable Wrapper)

A proxy to a COM object.

The wrapper forwards calls to the original object through
its exposed interfaces. Each RCW caches interface pointers
for the COM object it wraps and internally performs reference
counting on these interface pointers. A RCW without metadata
looks like a generic RCW type =System.__ComObject=, otherwise it
looks much like the original coclass.

*** CCW (COM-Callable Wrapper)

CCWs maintain refcounts like normal COM objects. Each CCW holds
a referenfe to the .NET object it wraps. When the CCW's refcount
reaches zero, it destroys itself and releases the inner reference,
causing the wrapped managed object eligible for garbage collection.

** Some Unmanaged Techs and their Managed Counterparts

| ADO              | System.Data              |
| Active Directory | System.DirectoryServices |
| MSXML            | System.Xml               |
| Win32 Graphics   | System.drawing           |
| Win32 Window GUI | System.Windows.Forms     |
| WMI              | System.Management        |

* Use COM in .NET

- Interop Assemblies: contains metadata of COM objects for .NET to understand.
  + Primary Interop Assembly: specifically marked interop assembly 
    as a commonly used interop assembly by the COM author to avoid multiple generated interop assemblies for the same typelib.

- Automatically generate interop assemblies:
  + Visual Studio References
  + =TLBIMP.EXE=

** COM Marshaling

Interop Marshaling is handled completely by CLR's Interop Marshaler, independent of COM marshaling.

1. Marshaler provides copy-in/copy-out behavior rather than true by-reference semantics
for reference types when there is a difference between internal representations.

2. Blittable types are always exposed directly in memory (as of .NET 1.0)

*** Custom Marshaling

TODO

** Interactions with COM Objects

- =new= an RCW

- Create in API without even metadata for the COM object
  + =Type.GetTypeFromGetProgID()=, =Type.GetTypeFromGetCLSID()=, =Type.GetType()= (requires an interop assembly)
  + =Activator.CreateInstance(typeObject)=
  + Call them in a late bound fashion or cast the object to an predefined interface marked with
    COM metadata

*** Error Handling

- By default =System.Runtime.InteropServices.COMException=

  The type of the exception thrown is based onthe returned =HRESULT= and the contents
  of the exception can contain customized information of =IErrorInfo= is available.
  Some =HRESULT= are converted into .NET exceptions like =System.OutOfMemoryException=.

*** Calling Methods and Properties

Basically the same as the normal .NET methods/properties.
However, parameterized properties needs some special treatment when using C# or C++.

#+begin_src csharp
// HRESULT User([in] BSTR Name, [out, retval] IVSSUser** ppIUser);
user = database.get_User("Guest");
#+end_src

One can always dynamically invoke a COM method (only with =IDispatch= though) by calling =Type.InvokeMember=.
For pure =IUnknown= COM objects, having metadata defintions of the type and using
different reflection APIs =Type.Invoke= is a must.

**** Argument Passing

***** =VARIANT=

ON the surface, a =VARIANT= can be represented as an =Object= and passing the right of =Object= to the COM component is usually straightforward. There are a few wrappers
(=BstrWrapper=, =CurrencyWrapper=, =DispatchWrapper=, =UnknownWrapper=, =ErrorWrapper=, =VariantWrapper=)
to indicate a proper marshaling of certain managed types into =VARIANT=. To force a null
object inside the COM component, use =new UnknownWrapper(null)= or =new DispatchWrapper(null)=.

***** Late Binding and By-Reference Parameters

All parameters are packaged in =VARIANT= when late binding to a COM component.
The CLR has no way to known whether an object should be passed by value or not.
=Type.InvokeMember= passes all parameter by value by default (=ParameterModifier=
changes the default behavior).

***** Optional Parameters

With C# 4.0, there is suppport for optional parameters and named parameters.
Pass a =Type.Missing= (=System.Reflection.Missing.Value=) for missing variant when necessary. The worst case is when the missing value is a pointer to a missing variant

#+begin_src csharp
object missing = Type.Missing;
myCom.ComMethod(arg1, ref missing); // [in, optional] VARIANT* optionalValue
#+end_src

*** Lifetime Management (A somewhat controversial topic)

=Marshal.ReleaseComObject= deterministically releases an RCW, but not really a good solution. See [[https://devblogs.microsoft.com/visualstudio/marshal-releasecomobject-considered-dangerous/][Marshal.ReleaseComObject Considered Dangerous]]

There are of course some exceptions (especially when working buggy code):
[[https://stackoverflow.com/questions/37904483/as-of-today-what-is-the-right-way-to-work-with-com-objects][What is the right way to work with COM objects]]

#+begin_quote

#+end_quote

Better use

#+begin_src csharp
if (Marshal.AreComObjectsAvailableForCleanup())
{
    GC.WaitForPendingFinalizers();
}
#+end_src

*** Type casting

If the metadata of an RCW supports the target type, then there's no need for =QueryInterface=.
