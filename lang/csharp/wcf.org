#+TITLE: Wcf

* Prerequisite

https://www.karllhughes.com/posts/plumbing

https://dzone.com/articles/being-joe-software-plumber

** Service Orientation

*** OOP

Source code reusability of C++ was not enough and OOP programming alone couples the application with the language that is used. Everything was incorporated into a single process, which imnpedes security, scalability, availability, throughput and robustness. There is no native remote call in C++ to support distribution.

*** Component Orientation

Libraries which culminated in Component Object Model, which provided interchangeable, interoperable binary components. The components are discovered and loaded at runtime. The client and server agrees only on a contract. COM enables cross-language interoperability. The basic unit of reuse is the interface.

**** Plumbing Problems

- Coupled to the technology that is used to implement component mechanism.

- Concurrency: a component might or might not be used concurrently.

- Transactions: the app itself must coordinate the atomic transaction

- Communication Protocols: prescribed by the underlying technology

- Communication Patterns: Async/Sync

- Versioning: DLL hell

- Security: Components may need to authenticate and authorize their callers.

**** Service Orientation

Business coupling is good, plumbing coupling is bad. Standardized message exchange decouples plumbing technology.

A /Service/ is a unit of functionality exposed to the world over standard plumbing. A SOA (Service Oriented Application) is an aggregate of such /services/.

***** Tenets

- Service boundaries are explicit in that only those opted-in should be exposed. (information hiding and encapsulation)

- Service are autonomous, independent of other services and any client.

- Opted-ins of a service should be type-neutral. The service should only expose logical operations.

- Services are compatible based on policy.

***** Practical Principles

- Secure communication, authentication and authorize.

- Services leave the system in a consistent state

- Services are thread-safe: the service must be able to sustain concrrent access from multiple clients.

- Services are reliable: the client will always know whether the service received the message.

- Services are robust: isolate its faults to prevent them from taking itself or other services down.

***** Optional Principles

- Interoperable from any client.

- Scale-invariable: the same code can be used regardless of the number of clients and the load on the service.

- Always available

- Responsive

- Disciplined: should not block the client.

* WCF Essentials

A runtime environment to expose CLR types as services and consume other services as CLR types.

Unlike DCOM and .NET Remoting, which tries to make a remote object a local one, WCF tries to make every service a remote one: all interactions are done via a proxy, requiring the same configuration and hosting.

- ABC(Address, Binding, Contract): an address defines where the service is; a binding defines how to communicate with the service; a contract defines what the service does

** Addressing

#+begin_src
# [transport]://[machine or domain][:optional port]/[optional URI]

http://localhost:8001
http://localhost:8001/MyService
net.tcp://localhost:8002/MyService
net.pipe://localhost/MyPipe
net.msmq://localhost/private/MyQueue
net.msmq://localhost/MyQueue
ws://localhost/MyService
soap.udp://localhost:8081/MyService
#+end_src

** Contracts

Platform-neutral and standard way of describing what the service does.

*** Service Contracts

what operations the client can perform on the service. =ServiceContract= maps a CLR interface or a class to a technology-neutral service contract. =OperationContract= opts in a method of that interface as a logical function of the service.

- The =Namespace= property should be provided to avoid collision.

#+begin_src csharp
[ServiceContract]
interface IMyContract
{
    [OperationContract]
    string MyMethod();
}

// Only the default constructor is used by WCF
class MyService : IMyContract
{
    public string MyMethod()
    {
        return "Hello WCF";
    }
}
#+end_src

*** Data Contracts

Explicitly opt in custom types.

*** Fault Contracts

Define errors and how the service handles and propagates errors to its clients.

*** Message Contracts

 Allo the service to interact directly with message. Not the usual case for common WCF applications.

** Hosting

*** IIS Hosting

Http-only. Services are  described by generated =.svc= files or in the =web.config= file.

*** WAS Hosting

A general purpose hsoting engine that supports any transport protocols, unlike IIS.

*** Self-Hosting

Any processes and any WCF transport protocols. The host process must explicitly register the service types at runtime and open the host for client calls. Each =ServiceHost= is associated with a particular service type. Multiple base addresses can be passed into the hosting instances instead of using the configuration file.

An opened host loads the WCF runtime and launches worker threads to monitor incoming requests.

#+begin_src csharp
public class ServiceHost<T> : ServiceHost
{
    public ServiceHost() : base(typeof(T))
    {}
    public ServiceHost(params string[] baseAddresses) : base(typeof(T),
                                                             baseAddresses.Select(address=>new Uri(address)).ToArray())
                                                             {}
    public ServiceHost(params Uri[] baseAddresses) : base(typeof(T),baseAddresses)
    {}
}
#+end_src

** Binding

WCF groups together sets of communication aspects in /binding/: a consistent, canned set of choices regarding the /transport protocol/, /message encoding/, /communication pattern/, /reliability/, /security/, /transaction propagation/ and /interoperability/. Bindings allow using the same service logic over drastically different plumbing. A single service can support multiple bindings on separate addresses.

*** Basic Binding =BasicHttpBinding=

A legacy ASMX web service.

- http(s), text/MTOM

*** TCP Binding =NetTcpBinding=

Requires both the client and the service to use WCF.

- tcp, binary

*** IPC Binding =NetNamedPipeBinding=

Uses named pipes as a transport for same-machine communication.

- ipc, binary

*** Web Service (WS) Bindign =WSHttpBinding=

Uses Http/Https for transport, designed to interoperate with any party that supports the WS-* standards

- http(s), text/MTOM

*** MSMQ Binding =NetMsmqBinding=

MSMQ offers support for disconnected queued calls.

- binary

*** Additional Bindings

- Context bindings: =BasicContextBinding=, =WSHttpContextBinding=, =NetTcpContextBinding=, able to pass out-of-band parameters to the service

- =WSDualHttpBinding=: two =WSHttpBinding= wired up against each other to support bidirectional duplex communication.

- =NetHttpBinding=: WebSocket but with limited interoperability with the industrial standard, not recommended.

- =UdpBinding=

- =WebHttpBinding=: accept simple calls over web protocols such as HTTP-GET using REST/POX/JSON patterns.

- =WSFederatedHttpBinding=, =WS2007FederationHttpBinding=, =MsmqIntergrationBinding=, =WS2007HttpBinding=

** Endpoint: the Fusion of the ABC

The endpoint is service's interface and is analogous to a CLR or COM interface. Each endpoint must expose at least one business endpoint, and each endpoint has exactly one contract. A single service can expose multiple endpoints.

*** Configuration File

#+begin_src xml
<system.serviceModel>
  <services>
    <service name = "MyService">
      <endpoint
          address = "net.tcp://localhost:8000/MyService"
          bindingConfiguration = "TransactionalTCP"
          binding = "netTcpBinding"
          contract = "IMyContract"
          />
      <endpoint
          address = "net.tcp://localhost:8001/MyService"
          bindingConfiguration = "TransactionalTCP"
          binding = "netTcpBinding"
          contract = "IMyOtherContract"
          />
    </service>
  </services>
  <bindings>
    <netTcpBinding>
      <binding transactionFlow = "true"/> <!-- nameless default binding -->

      <binding name = "TransactionalTCP"
               transactionFlow = "true"
               />
    </netTcpBinding>
  </bindings>
  <protocolMapping>
    <add scheme = "http" binding = "wsHttpBinding" />
  </protocolMapping>

</system.serviceModel>
#+end_src

*** Programmatic Configuration

#+begin_src csharp
ServiceHost host = new ServiceHost(typeof(MyService));
Binding wsBinding = new WSHttpBinding();
Binding tcpBinding = new NetTcpBinding();
host.AddServiceEndpoint(typeof(IMyContract),wsBinding,
                        "http://localhost:8000/MyService");
host.AddServiceEndpoint(typeof(IMyContract),tcpBinding,
                        "net.tcp://localhost:8001/MyService");
host.AddServiceEndpoint(typeof(IMyOtherContract),tcpBinding,
                        "net.tcp://localhost:8002/MyService");
host.Open();
#+end_src

** Metadata Exchange and Behavior Configuration

- Enable HTTP-GET to publish metadata

#+TODO


** Client Programming

- Generate the Proxy if using .NET

- Instantiate the proxy and call methods

- Close or dispose the proxy after using

- Timeout is controllable and deal with the timeout exception

*** Test Client and Host Server

=WcfTestClient.exe= and =WcfSvcHost=

** WCF architecture

Interception-based architecture. WCF intercepts the call on the client side and performing pre-call and post-call processing.

The proxy serializes the call stack frame to a message and sends the message down a chain of channels to further process the message (encoding, passing the security call context, propagating the client transaction, managing the reliable session, encrypting the message body) and finally passes to the transport channel.

On the host side, the message goes through decryption, decoding, joining the propaged transaction, setting the security principal, managing the session and activating the service instance. Finally, the dispatcher converts the message to a stack frame and calls the service instance.

The service was called by a local client - the dispatcher. The service instance executes the call and returns control to the dispatcher, which then converts the returned values and error information into a return message, through host-sdie channels to perform post-call processing is such as managing the transaction, deactivating the instance, encoding the reply, encrypting it and so on and finally go through the transport channel.

All the points in the architecture provide hooks for extensibility.

*** Host Architecture

Each host /process/ can have many /app domains/, with each hosting zero or more /service host instances/, and each host instances is dedicated to a particular service type. Each service host instance has zero or more /contexts/ (the innermost execution scope of the service). The host maps the message to a new or existing context and lets it process the call.

** Channels

Invoke operations on a service without ever resorting to using a proxy class.

TODO

** Transport-Level Sessions

The client and channel maintain a logical session at the transport level (optional, dependent on the binding configuration). A session can time out and then gets terminated.

** Reliability

Transport reliablilty guarantees delivery at the network packet leve and in-order delivery of the packets.

Message reliability provides end-to-end guaranteed delivery and order of messages, regardless of how many intermediaries are involved and how many network hops are required to deliver the message from the client to the service.

* Contracts

** Service Contracts

Method overloading on the client side is possible by manual rework on the proxy. Hierarchical service contracts can be reflected in the client code: the client can see the derived service as a base service. The client can implement the derived proxy out of the base proxy.

*** Service Contract Factoring and Designing

A service contract isa grouping of logically related operations (domain-specific). Proper contract factoring results in more specialized, loosely coupled, fine-tunedd and reusable contracts. Service contracts with just one operatons are possible but should be avoided since it shows the design issue of the entity invovled. The optimal number of service contract members is between three and five.

*** Contract Queries

The client can programmatically verify whether a particular endpoint supports a particular contract.
