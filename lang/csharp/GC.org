#+title: GC

The garbage collector is responsible only for restoring memory; it does not handle other resources such as database connections, handles (files, windows, etc.), network ports, and hardware devices such as serial ports.

.NET GC uses a mark-and-compact algorithm. It identifies all *root references*
to objects e.g. static variables, CPU registers, local variables, parameter
instances and f-reachable objects (objects to finalize) and searches recursively to determine all the
objects to which the root references point and creates a graph of all reachable
objects. The GC compacts all reachable objects next to each other and then
overwrite any memory consumed by objects that are inaccessible (garbage).

All managed threads are paused while the GC is running.

Garbage is not collected in one go. .NET GC is generational: short-lived objects
are more likely to need GC than long-standing objects. Objects are organized
into three generations. Each time an object survives a GC cycle, it is moved to
the next generation until it ends up in generation 2.

* .NET 1.0 Era: an Example

Refer to [[https://learn.microsoft.com/en-us/archive/msdn-magazine/2000/november/garbage-collection-automatic-memory-management-in-the-microsoft-net-framework][Garbage Collection Automatic Manage in the Microsoft .NET Framework]]

On startup of a process, the runtime reserves a large contiguous region of
address space (*managed heap*) that initially has no storage allocated for it. A
pointer that points to the next address =NextObjPtr= available is maintained. The runtime
allocates memory at the pointer's address and constructs a new object there if
requested. This process may allocate memory even faster than C's heap allocation
 as only a pointer modification and some infrequent allocations are made; there is
no maintaining linked lists.

If the =NextObjPtr= moves over the end of the managed heap's address space, the
GC kicks in and starts collecting.

Objects are seperated into generations. GC only starts when generation 0 is
completely full.

** Algorithm

When a new object is requested to be constructed, the garbage collector tries to
find some memory for it. If none available, it begins to walk from the root
references recursively to find all references it is able to reach and mark them
non-garbage. Any other objects are now garbage, pending for collection. The
collector then compacts non-garbage objects, modifies root references' pointer
values. After this, =NextObjPtr= is placed at an unoccupied memory address
and the collector tries to construct the new object again. If no memory
is available, then an =OutOfMemoryException= is thrown.

** Finalization

An additional feature that gracefully cleans up an object's resource right
before it is collected.
Garbage objects with a finalizer (=Object.Finalize=) will be put into the
f-reachable queue (a reachable root, thus the garbage object is no longer
considered a garbage) and get finalized before being GC-ed.
A special runtime thread is responsible to call any finalizer of the objects in
the f-reachable queue. If none, the thread sleeps. After finalization and
being removed from the f-reachable queue, finalized objects are
GC-ed the next time the collector runs.

In C#, the syntax is similar to C++'s destructor and it automatically calls the
base class's finalizer.

*** Caveats

- Objects containing a finalizer are promoted to older generations (including
  its referenced objects) and live longer, causing memory pressure.

- Finalizers are not called when an app terminates.

- Executing finalizers in itself hurts performance.

- Indeterministic execution

- No guarantee of order of execution is made for finalizers. A containing
  object's finalizer may clean up a contained finalizable object that is already
  finalized. That's why the dispose pattern put =Dispose(false)= in finalizers.

- When a finalizable object is constructed, its reference is put in the
  finalization queue, causing some performance loss.

- Collection of finalizable objects takes more than two cycles.

- A finalizable object may be resurrected if it makes itself reachable again
  inside the finalizer, causing unpredictable results, unless
  =ReRegisterForFinalizer()= is called. Resurrection is hardly desirable.

* Weak Refernces

=System.WeakReference=: does not prevent garbage collection. Designed for
reference objects that are expensive to create (good to have it alive to avoid re-creation) yet too expensive
to keep around (not expected to be around for too long if it is not being used).

#+begin_src csharp
// Here WeakReference serves as a cache handle.
public static class ByteArrayDataSource
{
  static private byte[] LoadData()
  {
      // Imagine a much lager number
      byte[] data = new byte[1000];
      // Load data
      // ...
      return data;
  }

  static private WeakReference<byte[]>? Data { get; set; }

  static public byte[] GetData()
  {
      byte[]? target;
      if (Data is null) // first time
      {
          target = LoadData(); // a strong ref before assigninng a weak ref
          Data = new WeakReference<byte[]>(target);
          return target;
      }
      else if (Data.TryGetTarget(out target)) // try to retrieve the loaded data by checking the weak reference
      {
          return target;
      }
      else
      {
          // Reload the data and assign it (creating a strong
          // reference) before setting WeakReference’s Target
          // and returning it.
          target = LoadData();
          Data.SetTarget(target);
          return target;
      }
  }
}
#+end_src

** Internal

Short and long weak references are maintained by the runtime in their respective
table. These two tables are not the roots.

After the reachable object graph is created, the runtime first scans the weak
reference table to
determine if the references stored within are reachable. If a scanned weak reference
is a short one and its related object is unreachable now, its =Target= is
immediately set to =null= (even if the object is still put into the f-reachable
queue and still alive and reachable again).

After finalizable unreachable objects are put into
the f-reachable queue, the runtime scans the long weak reference table to
determine whether the referenced object is reachable and sets =Target= of weak
references of unreachable object to =null=, that is, only after finalization and
the memory is reclaimed.

* Resource Cleanup

- *Managed resource*: a resource object that have a finalizer so that the
  runtime may call it for cleanup.

- *Unmanaged resource*: a resource that the runtime is not aware of. This
  resource may not be a native pointer or a handle (unmanaged ≠ native), but it does require explicit
  code for cleanup. e.g. =System.IO.FileStream= implements a finalizer to flush
  the buffer into the file and close the file handle. The runtime doesn't know
  how to flush a buffer automatically. However, this is not
  always the case: =System.IO.StreamWriter= holds a =FileStream= but also has its own
  buffer to flush into the =FileStream=. However, it does not have a finalizer to flush
  data because the order of finalization is indeterministic and the =FileStream=
  may be finalized before the =StreamWriter= flushes, so
  forgetting to close =SteamWriter= guarantees data loss.


** Finalizer

GC handles memory deallocation. Finalizers are not responsible for memory
deallocation. Objects waiting for finalization are put in the f-reachable queue
and their finalizers are executed in an unspecified thread other than the GC one.

Limiting the need for a finalizer to only objects that need resource cleanup
that the runtime isn't already aware of (resources that don't have finalizers)
is an important guideline that significantly reduces the scenarios where it is
necessary to implement a finalizer. The containing object needs not have a
finalizer if its contained objects all have a finalizer so that the runtime may
call their finalizers. If the containing object's cleanup depends on its
contained finalizable objects, do not implement a finalizer but explicit =Close=
or =Dispose= methods to avoid incorrect finalization order.

Finalizers serve the role of a backup mechanism for cleaning up resources not
explicitly cleaned up.

Avoid exceptions within finalizers since it might cause the application to crash at an undiagnizable time. Caatch all exceptions in the finalizer and report them via an alternate means than an unhandled exception.

If a constructor throws an exception, the instance is still created and eligible
for finalization. Do implement a finalizer for such objects that also hold
unmanaged resources.

Finalizers should be simple enough so as not to reference another finalized
object or let another object hold a reference to this object.

** Dispose Pattern

Unmanaged resources should always be cleaned up either explicitly or during
finalization. Contained managed resources need not to be cleaned up in the finalizer
since they are to be cleaned up by their own finalizers anyway.

=IDisposable= interface defines the details of the deterministic pattern with a single method =Dispose()=.
The =IDisposable= interface requires the implementation of a single parameterless method and a =virtual void Dispose(bool)= for any non-sealed class overload.

The disposing parameter should be false when called from a finalizer to avoid
clean up a managed resource that is already in the f-reachable queue, and true
when called from the =IDisposable.Dispose= method. Note that an unmanaged
resource need not to be a memory pointer or a system resource handle. It may be
a valid .NET managed object but its holding resource can only be properly
cleaned up manually based on its application and semantics.

#+begin_src csharp
  ~DisposableType()
  {
      Dispose(false);
  }

  public void Dispose()
  {
      Dispose(true);

      // Unregister from the queue since resources are
      // already cleaned up by Dispose(true) and should be GC-ed ASAP
      // instead of waiting in the queue before being GC-ed
      System.GC.SuppressFinalize(this);
  }

  public void Dispose(bool disposing)
  {
      // Do not dispose of an owned managed object (one with a
      // finalizer) if called by the finalizer,
      // as the owned managed object's finalize method
      // will be (or has been) called by the queue
      // processing already
      if (disposing)
      {
          Stream?.Close(); // managed. Finalization will deal with it if not called deterministically
      }

      // FileInfo may be a managed object but here it represents
      // a temporary file that needs deleting explicitly
      // otherwise FileInfo is totally managed
      try
      {
        File?.Delete(); // unmanaged, should be dispose anyway
      }
      catch (IOException exception)
      {
        ...
      }
      Stream = null;
      File = null;
  }
#+end_src


Use caution when implementing both =Close()= and =Dispose()= as it confuses
people on whether to call =Close()= or =Dispose()= or both.

In case of an abnormal process termination, register important cleanup
procedures at =AppDomain.CurrentDomain.ProcessExit=. The delegate may hold a reference to the object. Be careful not to let
=.ProcessExit= hold a strong reference to the object to clean up; use a weak
reference instead to avoid repeated cleanups. Unregister oneself from
=AppDoamin.CurrentDomain.ProcessExit= in the
=Dispose()= method so that no reference is contained in any delegate in the invocation list.

#+begin_src csharp
class SampleUnmanagedResource : IDisposable
{
    public SampleUnmanagedResource(string fileName)
    {
        WriteLine("Starting...", $"{nameof(SampleUnmanagedResource)}.ctor");
        WriteLine("Creating managed stuff...", $"{nameof(SampleUnmanagedResource)}.ctor");
        WriteLine("Creating unmanaged stuff...", $"{nameof(SampleUnmanagedResource)}.ctor");

        var weakReferenceToSelf = new WeakReference<IDisposable>(this);
        ProcessExitHandler = (_, __) =>
        {
             WriteLine("Starting...", "ProcessExitHandler");
             if (weakReferenceToSelf.TryGetTarget(out IDisposable? self))
             {
                 self.Dispose();
             }
             WriteLine("Exiting...", "ProcessExitHandler");
         };
         AppDomain.CurrentDomain.ProcessExit += ProcessExitHandler;
         WriteLine("Exiting...", $"{nameof(SampleUnmanagedResource)}.ctor");
    }

// Stores the process exit delegate so that we can remove
// it if Dispose() or Finalize() is called already.
private EventHandler ProcessExitHandler { get; }

~SampleUnmanagedResource()
{
    WriteLine("Starting...");
    Dispose(false);
    WriteLine("Exiting...");
}
public void Dispose()
{
     Dispose(true);
     System.GC.SuppressFinalize(this);
}

public void Dispose(bool disposing)
{
     WriteLine("Starting...");
     // Do not dispose of an owned managed object
     // (one with a finalizer) if called by member finalize,
     // as the owned managed objects finalize method
     // will be (or has been) called by finalization
     // processing already.
     if (disposing)
     {
          WriteLine("Disposing managed stuff...");
     }

    // Unregister from finalization
    AppDomain.CurrentDomain.ProcessExit -= ProcessExitHandler;
    WriteLine("Disposing unmanaged stuff...");
    WriteLine("Exiting...");
}
#+end_src
