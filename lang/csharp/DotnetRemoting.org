#+title: .NET Remoting
#+bibliography: dotnet_remoting.bib
#+cite_export: csl

A cohesive object model with extensibility hooks to support the kinds of systems
developers have built by using DCOM.

* The Ideas and Technologies Behind .NET Remoting
:PROPERTIES:
:ID:       a5858e22-40cd-4932-b996-66ae714aaa4b
:END:

- Ideas
  - *Modular Programming*: separating the functionality of a program into
    independent, interchangeable modules
  - *Distributed Architectures*
  - *Client/Server*
  - *N-Tier* e.g. Three tier, presentation tier - business tier - data tier
  - *Peer-to-Peer*: the Internet is traditionally organized with C/S architecture,
    but now also with some P2P applications, usually achieved by broadcast
    techniques or some predefined configuration settings.

- Technologies
  + *Socket*
  + *RPC*
    - /Interface Definition Language/
    - /Marshaling/, the process of passing parameters from one context to another.
    - /stub/

- Distributed Objects
  + have /identity/ and may have state. Virtually the same semantics as local
    objects.
  + component-based programming (a separate, binary-deployable unit of
    functionality, the evolution of object-oriented practice from white-box reuse to black-box reuse).
  + easily integrated with enterprise service support such as transactions,
    object pooling, concurrency management and object location that are commonly
    implemented separately as distributed objects.

- Benefits of Distributed Applications
  + *Fault tolerance* since redundancy can be achieved more easily.
  + *scalability* since functional components can be distributed to separate
    nodes and allow for parallel work.
  + *easy administration* since business rules are now centralized.

- Challenges of Distributed Applications
  + /Performance/: communication tends to be chunky. Properties access and
    callbacks require roundtrips and are expensive.
    - .NET Remoting: comparable to that of DCOM
  + /Network and Firewall/: the message should be easily passed across the
    Internet and various firewalls.
  + /Security/: authentication, cryptography, access control.
    - .NET Remoting: IIS can handle everything. .NET Remoting itself does not
      deal with any authentication or encryption.
  + /Location Independence/
  + /Interoperability/: interact with various other RPC technologies.
    - .NET Remoting supports various open standards (HTTP, SOAP, WSDL and XML). Extensible and pluggable with HTTP and TCP channels, binary
      or SOAP formatters or custom ones.
    - integrated with =System.EnterpriseServices.ServicedComponent= and thus .NET COM+  objects are automatically remotable.
  + /Configuration/: should be both programmatic and administratively.
    - .NET Remoting: XML-based configuration files instead of the Windows
      Registry; Programmatic;
  + /Object Lifetime Management/: networks are unreliable and client
    applications may crash. Server-side resources should be able to detect
    client failures and release resources.
    + .NET Remoting: lease-based lifetimes and sponsors instead of refcounting
      and are configurable.

* .NET Remoting Architecture
:PROPERTIES:
:ID:       79a33aac-bd7b-4ce7-ab81-653c9a8788c7
:END:

** Remoting Boundaries

.NET Framework (no longer in new .NET) is able to host multiple applications
within a single process and still provide the same isolation benefits as the
unmanaged application-per-process model.

.NET Remoting enables objects executing within the logical subdivisions of /application domains/ and /contexts/ to interact with one another across .NET Remoting boundaries.

- /Application Domains/ :: a logical process in .NET. Code and objects executing
  in one application domain cannot directly access code and objects executing in
  another application domain.

- /Contexts/ :: a further division within an application domain where a common
  set of constraints and usage semantics will govern all access to the objects
  within it.

A remotable object can be either *marshal-by-value* (=SerializableAttribute=),
*marshal-by-reference* (=System.MarshalByRefObject= subtypes)
or *context-bound* (=System.ContextBoundObject=).

** Object Activation

- /Object Activation/ :: Before an object instance of a remotable type can be accessed, it must be created and initialized by a process.
  + Marshal-by-reference types support [[#server_activation][*server activation*]] and [[#client_activation][*client activation*]].
  + Marshal-by-value types are copied via serialization and acivated upon
    deserialization.

*** Server Activation
:PROPERTIES:
:CUSTOM_ID: server_activation
:END:

By MS .NET Remoting[cite:@scott_mclean_microsoft_2002], the mechanism works like this.

#+begin_quote
The .NET Remoting infrastructure refers to server-activated types as well-known object types because the server application publishes the type at a well-known Uniform Resource Identifier (URI) before activating object instances. The server process hosting the remotable type is responsible for configuring the type as a well-known object, publishing it at a specific well-known endpoint or address, and activating instances of the type only when necessary.
#+end_quote

Objects can be either activated in /singleton-mode/ or /single-call mode/.

- /Singleton/ :: This singleton instance is activated when first accessed by a
  client if no other instance exists. A singleton does not mean it lives as long
  as the application.
  + stateful
  + lifetime can be configured.

- /Single Call/ :: a new instance of that type for every method invocation a
  client makes.
  + stateless, but still an OOP object though with a very limited lifetime.

*** Client Activation
:PROPERTIES:
:CUSTOM_ID: client_activation
:END:

This type of remotable objects works like a real client object (stateful,
different identities, URIs for different objects) but with lifetime
managed by the .NET remoting infrastructure.

** Lease-based Object Lifetime Management

#+begin_quote
.NET Remoting uses a lease-based form of distributed garbage collection to
manage the lifetime of remote objects.
The lease-based lifetime management system uses a combination of leases,
sponsors, and a lease manager.

Each application domain contains a lease manager. The lease manager holds
references to a lease object for each server-activated Singleton or each
client-activated remote object activated within the lease manager's application
domain. Each lease can have zero or more associated sponsors that are capable of
renewing the lease when the lease manager determines that the lease has expired.
#+end_quote

If a lease expires and is not renewed by any sponsor, the lease itself and its associated
remotable object are eligible for GC.

- *Lease Manager* :: the lease manager of each appdomain is responsible for
  managing the leases of each remotable object.
  + the lease manager polls periodically to manage all the leases: check if any
    lease has expired, remove any expired leases, dereference related remotable
    objects.
  + after all the references to a remotable object have been removed, it is eligible
    for GC.

- *Lease*, =ILease= :: basically a policy object that manages the lifetime of a
  remotable object.
  + Each =MarshalByRefObject= gives an =ILease= to the lease manager on
    activation for lifetime management.
  + A lease object has its remaining time (=CurrentLeaseTime=) set to
    =InitialLeaseTime= when its remotable object is activated.
  + its remaining time is renewed on a client call if it's below
    =RenewOnCallTime=.
  + A sponsor is assumed dead and removed from the list if it does not respond
    to a renewal request within =SponsorshipTimeout=.

- *Sponsor*, =ISponsor= :: an object that is able to renew a lease (possibly on
  clients and thus a =MarshalByRefObject=)
  + a sponsor registers itself on a lease.
  + the lease calls its sponsors to renew itself on expiration.
  + there is a simple =ClientSponsor= for clients to use.

** Messages =IMessage=

An in-process method call puts arguments on registers and stacks and expects
that the
callee understands the convention and takes the arguments. This can be
understood as some form of transport. .NET Remoting models method calls as *messages*.

#+begin_quote
Encapsulating the information about the method call in a message object
abstracts and models the method-call-as-message concept in an object-oriented
way. The message object conveys the method name, arguments, and other
information about the method call from the caller to the callee. .NET Remoting
uses such a scheme to enable distributed objects to interact with one another.
Message objects encapsulate all method calls, input arguments, constructor
calls, method return values, output arguments, exceptions, and so on.
#+end_quote

Everything placed in an =IMessage=, including object references, has to be serializable.

** Proxies

The client uses the proxy object to interact with the remote object.

Remotable =MarshalByRefObject= are represented and serialized as =ObjRef= to
cross .NET Remoting boundaries. The server sends an =ObjRef= to the client and
the client constructs a proxy based on the information (remotable object URI,
remotable type metadata including type name and the containing assembly's
identity info and the transport channel info)
provided in the =ObjRef= instance.
The receiver is expected to have access to the assembly defining the type's
implementation since only metadata is sent.

- *Transparent Proxy* ::  the one that the client directly access, generated on
  the fly with an =ObjRef=.
  + a transparent proxy converts a method call on itself to a message to =RealProxy=.

- =RealProxy= :: eventually deliver the message to the remote object.

** Transport Channels

A highly extensible communications transport mechanism that potentially can
support a wide variety of protocols and wire formats.

- =TcpChannel= ::
  + supports both sending and receiving data across .NET Remoting boundaries.
  + using binary wire format =BinaryFormatter= by default.

- =HttpChannel= ::
  + using SOAP wire format =SoapFormatter= by default

- *Channel Sinks* :: plug-in points that allow access to the underyling messages
  flowing through the channel as well as the stream used by the transport
  mechanism to send messages to a remote object.
  + a sink receives a stream and the message from the previous sink in the
    chain; performs some action on the message or stream and passes the result
    to the next sink in the chain.
  + the first sink (viewed from inside) in the chain handles the formatting and the last one handles
    transport protocol (sends headers, copies the serialized message stream to the wire).

* Bibliography

#+print_bibliography:
