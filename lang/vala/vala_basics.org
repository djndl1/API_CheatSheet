* Structure

- Source Code (UTF-8 vala source); =.vapi= (API bindings); =.deps= (dependency files that specify
  the dependencies of a certain binding).

* Basics
  :PROPERTIES:
  :CUSTOM_ID: basics
  :END:

- identifiers with the same name as keywords are prefixed with =@=.

- C#-style namespaces are available. The =global= namespace is similar to C++'s
  =::= namespace but is referenced as =global::=

- Enum types are similar to C#'s, with normal enum types and flag types but can
  contain functions (instance or static).
  + enum's =to_string()= returns its C identifier: =EnumName.A= is rendered =ENUM_NAME_A=

- /basics types/: =char=, =uchar=, =unichar=, =int=, =uint=, =long=, =ulong=,
  =short=, =ushort=, =(u)int8/16/32/64=, =float=, =double=, =bool=
  + basic types have =to_string()= and =parse(string str)= methods.
  + Many basic types have methods for parsing from and converting to strings.

- =string=: immutable UTF-8 character string.
  + Similar to C#, ==== and =!== compare the content of two strings.
  + Python-style slicing =[start:end]= is partially supported (the start and end parameters
    can not be left out). No run-time bounds checking is implemented.
  + =in= can be used to determine whether one string contains another.
  + string templates (interpolation), with implementation similar to =str.printf()=; verbatim string (escape sequences are not
    interpreted and supports multiline)
#+BEGIN_EXAMPLE vala
int a = 6, b = 7;
// string template
string s = @"$a * $b = $(a * b)";  // => "6 * 7 = 42"
#+END_EXAMPLE

- /array/: directly mapped to its C equivalent (not even =GArray=) with no
  run-time bounds checking.
  + multidimensional arrays are supported while jagged arrays (array of arrays) are not supported in vala.
  + Slicing an array results in a reference to the requested data.
    Assigning the slice to an owned variable results in a copy.
    Multi-dimensional arrays are like those in C#. A mono-dimensional
    array can't be obtained from a multidimensional array.
  + Use =+== to append an element to an array.

- /struct/: stack-allocated mutable compound value types
  + all its fields are always public
  + Structs can contain functions with =private= visibility by default.
  + =var a = Vector() { x = 1, y = 2, z = 3 }=, constructed without a =new=
    operator.
  + non-specified fields in =struct= are zero-initialized and constructed

- /class/
  + All classes are subclasses of =GLib.Object=.
  + All class types are reference types, regardless of whether they are
    descended from =GLib.Object= or not. Objects are ref-counted
  + Vala supports /named constructors/ with different names. Constructor
    dispatch is supported. Destructors are there if needed.

- /operators/
  + =sizeof=, =is=, =typeof=
  + =??=: null coalescing
  + =in=: works on arrays, strings, collections or any other type that has
  an appropriate =contain()= method.
  + Operators/functions/methods cannot be overloaded. Choose slightly
  different names to avoid a name clash. However, default argument is
  supported.
  + Index access are mapped to =get(index)=​/​=set(index, item)= methods.
  =[start:end]= is mapped to =slice(long start, long end)=. =in= is
  mapped to =contains()=; =foreach/in= loop is mapped to =iterator()=;
  string template is implemented with =to_string()=.

- /switch clause/
  + no fallthrough between cases. Each non-empty case must end with a
    =break=, =return= or =throw=.
  + applies also to =string=

- /value types/ and /reference types/
  + the underlying C code uses pointer for passing struct data but somehow
    maintain the semantics of value types.
  + reference types are by default not nullable.

- Nullability check can be added to a method parameter by postfixing the
  parameter with =?=. By default these parameters are non-nullable.
  + non-nullable objects are asserted non-null. Any violation causes a critical
    message being emitted or even worse.

- Structured Error Handling
  + for handling recoverable run-time errors.
  + Related errors are grouped into error domains. Vala error domains do not
    form a class hierarchy (=GError=​s are not =GObject=).

#+BEGIN_SRC vala
public errordomain MathError
{
    DivisionByZero,
    Overflow,
    //...
}

public int division(int dividend, int divisor) throws MathError
{
    if (divisor == 0) {
        throw new MathError.DivisionByZero("divided by zero");
    }

    return dividend / divisor;
}

try {
    var x = division(30, 20);
} catch (MathError.Overflow e) {
    ...
} catch (MathError e) {
    ...
} finally {
   ...
}
#+END_SRC

- /Method Contracts/
  + for unrecoverable errors
  + Every method can specify a boolean expression that it =requires= to be true (a precondition checked at runtime) before the control flow enters the code block. If evaluated to =false=, a critical warning is emitted that usually leads to program termination. Postconditions are specified using the =ensures= keyword.

* OOP
  :PROPERTIES:
  :CUSTOM_ID: oop
  :END:

- A class may or may not (pure/plain/lightweight class and compact class) inherit from
  =GLib.Object=.

- Construction
  + default constructor
  + named constructor
  + /construction blocks/ are only available only for =GLib.Object=.
  + /static construction block/: exactly once in a program where such a class is used.
  + constructor delegation is supported.
  + /class construct/: executed once at the first use of its class and once at each
    subclass of this class.

- Destructor: called by the runtime when an object loses all references.
  + =~ClassName() { ... }=

- /Signals/ (v. trigger, emit): a device for the loose coupling of
  unidirectional method calls.
  + disconnection requires either the returned handler id or the same
    parameter passed to =.connect()=.
  + no need to declare a delegate type before declare a signal, as in C#.

#+begin_src vala
class ... {
    public signal void ring(int a); // have to be public and everyone can trigger it

    public void trigger()
    {
        ring(counter++); // unlike C#, no need for a null check
    }
}

t.ring.connect((source, a) => { // the source and any trailing parameters can be omitted
    stdout.print("%d\n", a);
});
#+end_src

- /notification/: every =GLib.Object= has a signal called =notify=, emitted
  whenever a change of property occurs.
  + =obj.notify.connect()= or =obj.notify["name"].connect()=
  + any underscores in the property name is replaced by dashes =-=.

- /Interface/:
  + Method implementation in interfaces is allowed and a concret one is treated
    as a virtual method.
  + Implementing two interfaces that have methods with the same name is allowed.
  + vala interface may have a class as a prerequisite so that its implementation
    subclasses that class.

#+BEGIN_EXAMPLE vala
interface Foo {
    public abstract int m();
}

interface Bar {
    public abstract string m();
}

class Cls: Foo, Bar {
    public int Foo.m() {
        return 10;
    }

   public string Bar.m() {
        return "bar";
    }
}

void main () {
    var cls = new Cls();
    message("%d %s", ((Foo) cls).m(), ((Bar) cls).m());
}
#+END_EXAMPLE

- RTTI
  + =is=: check type
  + =get_type()=
  + =typeof()=
  + =Object.new(TypeInstance)=
  + =as= dynamic type casting

#+BEGIN_EXAMPLE vala
Type t = typeof(Foo);
Foo foo = (Foo) Object.new(t);
#+END_EXAMPLE

- Generics: Vala includes a runtime generics system. Vala's is similar to the system
  used by Java. There is no restriction on what type may be used in generics.
  + /generic class/, /generic structure/, /generic interface/

- /compact class/: =[Compact]=
  + not registered with the underlying glib type system
  + no refcount or private fields
  + reference-based

* DBus
  :PROPERTIES:
  :CUSTOM_ID: dbus
  :END:

An open IPC protocol, now the standard IPC on many UNIX-like platforms.

Based on the client/server paradigm. Two communication schemes
(/bidirectional/ (for interactions with a request/response pattern),
/unidirectional/(a subscription service where parties can broadcast
information to interested clients) ).

There is central process (dbus daemon) that provides the bus and the
distribution of messages. Most Unix-like systems distinguish between a
/DBus system bus/ (only one per machine, access to services provided by
the system bus is subject to matching authorization credentials) and a
/DBus session bus/ (every user session gets a dedicated session bus).

=mdbus2=: a cmd tool for communicating with DBus

This bus name is an /anonymous name/ (=:12.123=) or a /well-known/
(reverse domain name is used by default) name as a bus-wide unique
identification of any process communicating via DBus. When a process
connects to the bus, it is assigned an anonymous bus name (/unique
connection name/), never reused during the lifetime of the bus daemon. A
process may ask to own additional well-known bus names to offer
services.

/Object Paths/: communication addresses for DBus objects, which
implement services. =/org/freesmartphone/phone/0=

/Interface/: an interface describe the communication syntax of a
service.

- /Method Call/: point-to-point communication between processes

- /properties/: variables exposed by a service, whose values can be
  accessed via getter and setter method calls.

- /signals/: point-to-multipoint communication, initiated by one process
  and broadcasted to multiple other processes.

/marshaling/: converting a value from some other representation into the
/wire format/ (a sequence of bytes). DBus knows a number of types which
are mapped to the respective programming language's basic and compound
types.

Error handling is done by returning an error textual message.

** DBus in Vala
   :PROPERTIES:
   :CUSTOM_ID: dbus-in-vala
   :END:

Support for DBus is implemented in =gio=.
