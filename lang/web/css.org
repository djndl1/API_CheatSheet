#+title: Css

Rules that specify the content of an element should appear. CSS applies rules to HTML elements,
which governs how the content of specified elements should be displayed.

#+begin_src css
p { /* selector: the elements to which rules are applied, with some advanced rules */
    font-family: Arial; /* declarations: property: value */
}
#+end_src

If two selectors are the same, the last one is applied. If one is more specific,
it is applied.

Certain properties can be inherited by child elements while some others are not.

* Colors

Colors can be specified by RGB values, hex codes, color names or HSLA.

* Text

** Terminology

- Serif, Sans-Serif, Monospace

- /Baseline/: where most letters sit on;
  - /descender/: below the baseline, such as the lower part of the letter y
  - /X-height/: height of the letter x
  - /Cap Height/: top of flat letters
  - /ascender/: above the cap height

- /weight/: light, medium, bold, black

- /style/: Normal, /italic/, oblique

- /stretch/: Condensed, Regular, Extended

- /typeface/, /font/: a typeface is what is seen and a font is what is used.
  The term "fonts" has always been used to describe an instance of a particular
  weight or style of a typeface.

- /kerning/: =letter-spacing=, =word-spacing=

- text alignment: left, right center, justify
  + =vertical-align=: not really meant for text alignment in a block level element,
    but with =<img>=, =<em>=, =<strong>=.

- text indentation: =text-indent=

- pseudo-element: =:first-letter=, =:first-line=, =:link=, =:visited= (visited
  links), =:hover=, =:active=, =:focus=

* Box

Elements are treated like boxes.

- =width=, =height=: by default a box is sized just big enough to hold its contents.
  + unit by pixel, percentage (relative to the browser window) or em.

- =min-width=, =max-width=, =min-height=, =max-height=,

- =overflow=: overflowing content can be set to =hidden= or =scroll=.

- =border-width=, =border-top-width=, =border-right-width=, =border-bottom-width=, =border-left-width=

- =border[-top/left/right/bottom]-style=: =solid=, =dotted=, =dashed=, =double=, =groove=, =ridge=, =inset=, =outset=, =hidden=, =none=

- =border[-top/left/right/bottom]-color=

- =padding[-top/left/right/bottom]=

- =margin[-top/left/right/bottom]=
  + setting both the left and right margins to =auto= centers the box.

- =display=: =inline=, =block=, =inline-block=, =none= (hides an element from the page). Often used for displaying a list of menus horizontally.

- =visiblity=: =hidden=, =visible=; a blank space replaces the element

- =border-image=: applies an image to the border of any box

- =box-shadow=: a drop shadow around a box.

- =border[-top/bottom-left/right]-radius=: to specify rounded corners or even more complex shapes

* Lists

- bullet point styles: =list-style-type=, =list-style-image=,
  =list-style-position= (outside without indentation, or inside along with the
  text), =list-style= (a shorthand all these properties)

* Tables

- =empty-cell=, =border-spacing= (the distance between adjacent cells),
  =border-collapse= (if borders of adjacent cells collapse into one)

* Forms

- =cursor=: cursor over a form

* Layouts

CSS treats HTML elements as if they are in their own boxes. A /block-level/
starts on a new line and act as the main building blocks of any layout; a
/inline/ box flow between surrounding text.

** Positioning Schemes =position=

- /Normal Flow/ (the default): Every block-level element appears on a new line, causing each
  item to appear lower down the page than the previous one. =position: static=

- /Relative Positioning/: Moves an element from the position it would be in
  normal flow, shifting it to the top, right, bottom, or left of where it would
  have been placed. =position: relative=, together with offset properties =top=,
  =bottom=, =left=, =right=

- /Absolute Positioning/: the element is positioned in relation to its
  containing element. =position: absolute=, with =box-offset= or
  =top=, =bottom=, =left=, =right=.
  + /fixed positioning/: a form of absolute positioning that positions the
    element in relation to the browser window as opposed to the containing
    element. =position: fixed=

- /floating elements/: an element out of normal flow and positioned on the left
  or right side of its container, allowing text and inline elements to wrap
  around it. =float: left/right=
  + =float= can be used to place multiple elements side-by-side.
  + =clear=: no element within the same containing element should touch the left
    or right-hand sides of a box.
  + e.g. multicolumn content (with each column being a floating container)

- Elements out of normal flow may overlap. Use =z-index= (the /stacking
  context/) to specify the z-order.

** Layouts

- /Fixed Width Layouts/: do no change size as the user increases or decreases the
  size of the browser window. Works mostly for PCs. Easy to control size and
  positioning of elements in pixels.

- /Liquid Layouts/: stretch and contract as the user increases or decreases the
  size of the browser window.
  + mostly in percentages
  + having no control over the final view of the page.

- *Layout Grid*: layout involves the placement or arrangement of visual
  elements. Grid structure is a helper tool for layout.
  + 960 pixel-wide 12-column grid: 60 pixels wide column with 10-pixel
