#+SETUPFILE: /home/djn/Notes/CSNotes/tools/org-html-themes/setup/theme-readtheorg.setup

#+AUTHOR: djn\_dl

* Library Overview
  :PROPERTIES:
  :CUSTOM_ID: library-overview
  :END:

The facilities provided by the standard library can be

- /runtime language support/, e.g.Â for allocation and runtime type
  information;

- /the C standard library/ with very minor modifications to minimize
  violations of the type system;

- /Strings/ with support for international character sets, localization,
  and read-only views of substrings;

- support for /regex matching/;

- /I/O/ streams framework;

- a framework of /containers and algorithms/, conventionally called the
  STL;

- support for /numerical computation/;

- support for /concurrent programming/, include threads and locks;

- /parallel/ versions of most STL algorithms and some numerical
  algorithms;

- utilities to support template metaprogramming (type traits), STL-style
  generic programming, general programming (=variant= and =optional=)
  and =clock=;

- support for efficient and safe management of general resources, plus
  an interface to optional garbage collectors;

- /smart pointers/ for resource management;

- /Special-purpose containers/

- suffixes for popular units

* Strings and Regular Expressions
  :PROPERTIES:
  :CUSTOM_ID: strings-and-regular-expressions
  :END:

TODO

* Input and Output
  :PROPERTIES:
  :CUSTOM_ID: input-and-output
  :END:

The I/O stream library provides formatted and unformatted buffered I/O
of text and numeric values. An =ostream= converts typed objects to a
stream of characters (bytes); An =istream= converts a stream of
characters (bytes) to typed objects. The operations provided by them are
type-safe, type-sensitive, and extensible to handle user-defined types.
These streams can be used for binary I/O, be used for a variety of
character types, be locale specific, and use advanced buffering
strategies.

Using the formatted I/O operations is usually less error-prone, more
efficient, and less code than manipulating characters one by one. In
particular, istreams take care of memory management and range checking.
We can do formatting to and from memory using =stringsteam=.

An =iostream= has a state that we can examine to determine whether an
operation succeeded. In general, the I/O state holds all the information
needed to read or write, such as formatting information, error state
(e.g., has end-of-input been reached?), and what kind of buffering is
used. In particular, a user can set the state to reflect that an error
has occurred and clear the state if an error wasn't serious.

In addition to the I/O of built-in types and standard strings, the
=iostream= library allows programmers to define I/O for their own types.

#+BEGIN_SRC C++
    istream& operator>>(istream& is, Entry& e)
         // read { "name", number } pair. Note: formatted with { " ", and }
    {
         char c, c2;
         if (is>>c && c=='{' && is>>c2 && c2=='"') { // start with a { "
               string name;                   // the default value of a string is the empty string: ""
               while (is.get(c) && c!='"')    // anything before a " is part of the name
                     name+=c;

               if (is>>c && c==',') {
                     int number = 0;
                     if (is>>number>>c && c=='}') { // read the number and a }
                            e = {name,number};      // assign to the entry
                            return is;
                     }
               }
         }
         is.setstate(ios_base::failbit);      // register the failure in the stream
         return is;
    }
#+END_SRC

The =iostream= library provides a large set of operations for
controlling the format of input and output. The simplest formatting
controls are called /manipulators/.

In =<fstream>=, the standard library provides streams to and from a
file.

- =ifstream= for reading from a file;

- =ofstream= for writing to a file;

- =fstream= for reading from and writing to a file.

Testing that a file stream has been properly opened is usually done by
checking its state.

(Java =StringBuilder= ???)In =<sstream>=, the standard library provides
streams to and from a string:

- =istringstream= for reading from a string;

- =ostringstream= for writing to a string;

- =stringstream= for reading from and writing to a string.

One common use of an =ostringstream= is to format before giving the
resulting string to a GUI. Similarly, a string received from a GUI can
be read using formatted input operations by putting it into an
=istringstream=.

#+BEGIN_SRC C++
    template<typename Target =string, typename Source =string>
    Target to(Source arg)      // convert Source to Target
    {
      stringstream interpreter;
      Target result;

      if (!(interpreter << arg)                 // write arg into stream
          || !(interpreter >> result)           // read result from stream
          || !(interpreter >> std::ws).eof())   // stuff left in stream?
          throw runtime_error{"to<>() failed"};

      return result;
    }

    auto x1 = to<string,double>(1.2);   // very explicit (and verbose)
    auto x2 = to<string>(1.2);          // Source is deduced to double
    auto x3 = to<>(1.2);                // Target is defaulted to string; Source is deduced to double
    auto x4 = to(1.2);                  // the <> is redundant;
                                        // Target is defaulted to string; Source is deduced to double
#+END_SRC

call =ios_base::sync_with_stdio(false)= if C-style IO is not used.

** File System
   :PROPERTIES:
   :CUSTOM_ID: file-system
   :END:

 =<filesystem>= can portably

1. express file system paths and navigate through a file system

2. examine file types and the permissions associated with them.

* Containers
  :PROPERTIES:
  :CUSTOM_ID: containers
  :END:

A class with the main purpose of holding objects is commonly called a
/container/. An STL container is resource handler.

The standard library provides some of the most general and useful
container types to allow the programmer to select a container tha t best
serves the needs of an application:

- =vector<T>=: variable size vector

- =list<T>=: a doubly-linked list

- =forward_list<T>=: a singly-linked list

- =deque<T>=: a double ended queue

- =set<T>=: a set (a =map= wit just a key and no value)

- =unordered_set<T>=: a set using a hashed lookup

- =multiset<T>=: a set in which a value can occur many times

- =unordered_multiset<T>=: a multiset using a hashed lookup

- =map<K,V>=: an associative array

- =unordered_map<K,V>=: a map using a hashed lookup

- =multimap<K,V>=: a map in which a key can occur many times

- =unordered_multimap<K,V>=: a multimap using

In addition, container adaptors =queue<T>=, =stack<T>= and
=priority_queue<T>= are provided. The standard library also provides
more specialized container-like types, such as a fixed-size array
=array<T,N>= and =bitset<N>=.

The standard containers and their basic operations are designed to be
similar from a notational point of view. Furthermore, the meanings of
the operations are equivalent for the various containers. Basic
operations apply to every kind of container for which they make sense
and can be efficiently implemented:

- =.begin()=; =.end()=; =.size()=; =.cbegin()=; =.cend()=

- =.empty()=; =.capacity()=; =reserve()=; =.resize()=

- =[]=: no range checking; =at()=: throws =out_of_range= if out of range

- =push_back()=: add to the end; =emplace_back()=

- =insert()=; =erase()=

- ===; ====, =!==; =>=, =>==, =<=, =<==;

** =vector=
   :PROPERTIES:
   :CUSTOM_ID: vector
   :END:

The most useful standard library container is =vector=, a sequence of
elements of a given type. The elements are stored contiguously in
memory, suitable as a default container.

A typical implementation of =vector= consists of a handle holding
pointers to the first element, one-past-the-last element and extra
allocated space. It holds an allocator, from which the =vector= acquire
memory for its elements, defaulted to =new= and =delete=.

The standard-library =vector= implemented so that growing a =vector= by
repeated =push_back()= is efficient.

For classes that relies on =virtual= functions to get polymorphic
behavior, store a pointer (including smart pointers) instead of objects
itself in a container.

Many performance-critical applications use =vector= and checking all
subscripting implies a cost on the order of 10%. The standard library
=vector= does not guarantee range checking. The =at()= operation is a
vector subscript operation that throws an exception of type
=out_of_range= if its argument is out fo the =vector='s range. A
range-=for= avoids range errors at no cost through iterators in the
range.

** =list=
   :PROPERTIES:
   :CUSTOM_ID: list
   :END:

=list= is a doubly-linked list. We use =list= for sequences where we
want to insert and delete elements without moving other elements.

When we use a linked list, we tend not to access elements using
subscripting the way for vectors. Instead, we search the list. Unless
there is a compelling reason, use =vector=, which perform better for
traversal and for sorting and searching.

=forward_list= is a singly-linked list, which allows for only forward
iteration, has no element count.

** =map=
   :PROPERTIES:
   :CUSTOM_ID: map
   :END:

The standard library offers a balanced binary search tree (usually a
red-black tree, it thus has an order) called =map= . It is also known as
an associative array or a dictionary. It is a container of pairs of
values optimized for lookup.

The =[]= operator returns the value of the input key, but also returns a
default value for an invalid key.

** =unordered_map=
   :PROPERTIES:
   :CUSTOM_ID: unordered_map
   :END:

The standard library hashed containers are referred to as "unordered"
because they don't require an ordering function. Given a good hash
function, an =unordered_map= is much faster than a =map= for large
containers. However, the worst-case behavior of an =unordered_map= with
a poor hash function is far worse than that of a =map=.

The standard library provides a default hash function for built-ins and
standard-library types.We can avoid explicitly passing the hash
operation by defining it as a spcialization of the standard-library
=hash=

#+BEGIN_SRC C++
    namespace std { // make a hash function for Record

        template<> struct hash<Record> {
            using argument_type = Record;
            using result_type = std::size_t;

            size_t operator()(const Record& r) const
            {
                 return hash<string>()(r.name) ^ hash<int>()(r.product_code);
            }
        };
    }
#+END_SRC

* Algorithms
  :PROPERTIES:
  :CUSTOM_ID: algorithms
  :END:

A data structure is not very useful on its own. We need operations for
basic access such as adding and removing elements. The standard library
provides the most common algorithms for containers in addition to
providing the most common container types.

In the context of the C++ standard library, an algorithm is a function
template operating on sequences of elements.

** Iterators
   :PROPERTIES:
   :CUSTOM_ID: iterators
   :END:

Iterators are used to separate algorithms and containers. An algorithm
operates on its data through iterators and knows nothing about the
container in which the elements are stored. Conversely, a container
knows nothing about the algorithms operating on its elements; all it
does is to supply iterators upon request (e.g., =begin()= and =end()=).
This model of separation between data storage and algorithm delivers
very general and flexible software.

For a container, a few iterators referring to useful elements can be
obtained.

#+BEGIN_SRC C++
    template<typename C, typename V>
    vector<typename C::iterator> find_all(C& c, V v)
    {
         vector<typename C::iterator> res;          // typename, otherwise, ::iterator may be some constant
         for (auto p = c.begin(); p!=c.end(); ++p)
               if (*p==v)
                     res.push_back(p);
         return res;
    }

    void test()
    {
         string m {"Mary had a little lamb"};
         for (auto p : find_all(m,'a'))
               if (*p!='a')
                     cerr << "a bug!\n";
    }
#+END_SRC

A =vector= iterator might be a pointer or a pointer to the =vector= plus
an index. A =list= iterator might be a pointer to a link node. What is
common for all iterators is their semantics and the naming of their
operations. In fact, any object that obeys a few simple rules like these
is an iterator -- Iterator is a concept.

The notion of iterators can be usefully applied to input and output.

#+BEGIN_SRC C++
    ostream_iterator<string> oo {cout};    // write strings to cout
    *oo = "Hello, ";    // meaning cout<<"Hello, "
    ++oo;
    *oo = "world!\n";   // meaning cout<<"world!\n"
#+END_SRC

Typically, =istream_iterators= and =ostream_iterators= are not used
directly. Instead, they are provided as arguments to algorithms.

#+BEGIN_SRC C++
    int main()
    {
         string from, to;
         cin >> from >> to;             // get source and target file names

         ifstream is {from};            // input stream for file "from"
         ofstream os {to};              // output stream for file "to"

         set<string> b {istream_iterator<string>{is},istream_iterator<string>{}};     // read input
         copy(b.begin(),b.end(),ostream_iterator<string>{os,"\n"});                   // copy to output

         return !is.eof() || !os;           // return error state
    }
#+END_SRC

** Predicates
   :PROPERTIES:
   :CUSTOM_ID: predicates
   :END:

#+BEGIN_SRC C++
    struct Greater_than {
         int val;
         Greater_than(int v) : val{v} { }
         bool operator()(const pair<string,int>& r) const { return r.second>val; }
    };
#+END_SRC

#+BEGIN_SRC C++
    void f(map<string,int>& m)
    {
         auto p = find_if(m.begin(),m.end(),Greater_than{42});
         // ...
    }
#+END_SRC

Or we can use a lambda

#+BEGIN_SRC C++
    auto p = find_if(m.begin(), m.end(), [](const pair<string,int>& r) { return r.second>42; });
#+END_SRC

** (C++20) Concepts
   :PROPERTIES:
   :CUSTOM_ID: c20-concepts
   :END:

TODO

** Parallel Algorithms
   :PROPERTIES:
   :CUSTOM_ID: parallel-algorithms
   :END:

The standard library offers support for parallel execution and vectorized execution (SIMD) for computations in =<execution>=. Whether it is worthwhile to parallelize and/or vectorize depends on the algorithm, the number of elements in the sequence, the hardware, and the utilization of that hardware by programs running on it. Consequently, the execution policy indicators are just hints. A compiler and/or run-time scheduler will decide how much concurrency to use.

* Utilities
  :PROPERTIES:
  :CUSTOM_ID: utilities
  :END:

** Resource Management
   :PROPERTIES:
   :CUSTOM_ID: resource-management
   :END:

Besides RAII, the standard library provides two "smart pointers",
=unique_ptr= and =shared_ptr=, to deal with objects allocated on the
free store.

The most basic use of smart pointers is to prevent memory leaks caused
by careless programming.

A =unique_ptr= is a handle to an individual object (or an array) in much
the same way that a vector is a handle to a sequence of objects

#+BEGIN_SRC C++
    void f(int i, int j)    // X* vs. unique_ptr<X>
    {
         X* p = new X;                // allocate a new X
         unique_ptr<X> sp {new X};    // allocate a new X and give its pointer to unique_ptr
         // ...

         if (i<99) throw Z{};         // may throw an exception
         if (j<77) return;            // may return "early"
         // ... use p and sp ..
         delete p;                    // destroy *p
    }
#+END_SRC

A =unique_ptr= doesn't directly take away the ownership of a raw pointer

#+BEGIN_SRC C++
    int main(int argc, char *argv[])
    {
      string* p = new string("Can you see me?");

      cout << "raw pointer has this: " << *p << "\n";

      unique_ptr<string> sp{p};

      cout << "After there is a unique_ptr: p = " << p << " *p =  " << *p << endl;

      cout << "unique_ptr has: sp=" << sp.get() << " *sp = " << *sp << endl;

      unique_ptr<string> sp2{move(sp)}; // no way to copy-construct a unique_ptr from a unique_ptr because of unique ownership

      cout << "Let's see if the ownership is transferred: " << " sp= " << sp.get() << " sp2=" << sp2.get() << " p=" << p << endl;
      return 0;
    }
#+END_SRC

#+BEGIN_SRC sh
    raw pointer has this: Can you see me?
    After there is a unique_ptr: p = 0xb9ae70 *p =  Can you see me?
    unique_ptr has: sp=0xb9ae70 *sp = Can you see me?
    Let's see if the ownership is transferred:  sp= 0 sp2=0xb9ae70 p=0xb9ae70
#+END_SRC

Here, =sp= ensures the object is released. =unique_ptr= is a very
lightweight mechanism with no space or time overhead compared to correct
use of a built-in pointer. Its further uses include passing free-store
allocated objects in and out of functions:

#+BEGIN_SRC C++
    unique_ptr<X> make_X(int i)
         // make an X and immediately give it to a unique_ptr
    {
         // ... check i, etc. ...
         return unique_ptr<X>{new X{i}};
    }
#+END_SRC

The =shared_ptr= for an object share ownership of an object, which will
be destroyed only when the last of its =shared_ptr=s is destroyed.
=shared_ptr= provides a form of garbage collection that respects the
destructor-based resource management of the memory-managed objects. This
is neither cost free nor exorbitantly expensive, but it does make the
lifetime of the shared object hard to predict. Use =shared_ptr= only if
you actually need shared ownership.

The standard library provides functions for constructing an object and
returning an approoriate smart pointer, =make_shared()= and
=make_unique()=. Using =make_shared()= is not just more convenient than
separately making an object using =new= and then passing it to a
=shared_ptr=, it is also notably more efficient because it does not need
a separate allocation for the use count that is essential in the
implementation of a =shared_ptr=.

Still, pointer semantics are not always recommended. We use pointers
when

- we share an object, we need pointers (or references) to refer to the
  shared object;

- we refer to a polymorphic object in classical object-oriented code

- A shared polymorphic object typically requires =shared_ptr=.

** =move()= and =forward()=
   :PROPERTIES:
   :CUSTOM_ID: move-and-forward
   :END:

=std::move()= doesn't do anything more than casting its argument to an
rvalue reference.

#+BEGIN_SRC C++
    template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { 
        return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); 
    }
#+END_SRC

It can be used to implement =std::swap=:

#+BEGIN_SRC C++
    #define _GLIBCXX_MOVE(__val) std::move(__val)

    template<typename _Tp>
         inline
         typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
                                   is_move_constructible<_Tp>,
                                   is_move_assignable<_Tp>>::value>::type
         swap(_Tp& __a, _Tp& __b)
         noexcept(__and_<is_nothrow_move_constructible<_Tp>,
                         is_nothrow_move_assignable<_Tp>>::value)
         {
           __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
     
           _Tp __tmp = _GLIBCXX_MOVE(__a);
           __a = _GLIBCXX_MOVE(__b);
           __b = _GLIBCXX_MOVE(__tmp);
         }
#+END_SRC

The state of a moved-from object is in general unspecified, but all
standard-library types leave a moved-from object in a state where it can
be destroyed and assigned to. It would be unwise not to follow that
lead.

=std::forward()= differs from the simpler =std::move()= by correctly
handling subtleties to do with lvalue and rvalue.

#+BEGIN_SRC C++
    template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }
        
    template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
        static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        " substituting _Tp is an lvalue reference type");
        return static_cast<_Tp&&>(__t);
    }
#+END_SRC

** (C++20) =std::span=
   :PROPERTIES:
   :CUSTOM_ID: c20-stdspan
   :END:

TODO

** Specialized Containers
   :PROPERTIES:
   :CUSTOM_ID: specialized-containers
   :END:

- built-in containers

- =array<T,N>=: a fixed-size continuously allocated sequence of N
  elements of type T.

An =array= can be allocated with its elements on the stack, in an
object, or in static storage. The elements are allocated in the scope
where the =array= is defined. An array is best understood as a built-in
array with its size firmly attached, without implicit, potentially
surprising conversions to pointer types, and with a few convenience
functions provided. There is no overhead (time or space) involved in
using an array compared to using a built-in array. An array does not
follow the "handle to elements" model of STL containers.

An =array= can be explicitly passed a C-style function that expects a
pointer.

Occasionally, there is a significant performance advantage to be had by
directly accessing elements allocated on the stack rather than
allocating elements on the free store. On the other hand, the stack is a
limited resource (especially on some embedded systems), and stack
overflow is nasty.

An =array= knows its size, so it is easy to use with standard-library
algorithms, and it can be copied using ===. And it saves the programmer
from implicit conversion to pointers like the old built-in array and
thus avoid disasters of wrong offsets caused by wrong type information.

- =bitset<N>=: a fixed-size sequence of N bits. For sets of bits that
  don't fit into a =long long int=, using a =bitset= is much more
  convenient than using integers directly.

#+BEGIN_SRC C++
    bitset<9> bs1 {"110001111"};
    bitset<9> bs2 {0b1'1000'1111};
#+END_SRC

- =pair<T,U>=: two elements of types T and U

- =tuple<T...>=: a sequence of an arbitrary number of elements of
  arbitrary heteoregenous types, contiguously allocated. Accessing
  members of a tuple by their index is general, ugly, and somewhat
  error-prone. Fortunately, an element of a tuple with a unique type in
  that tuple can be "named" by its type.

- =basic_string<C>=: a sequence of characters of type =C=

- =valarray<T>=: an array of numeric values of type =T=; provides
  numeric operations.

** (C++17) Alternatives
   :PROPERTIES:
   :CUSTOM_ID: c17-alternatives
   :END:

TODO

** Allocators
   :PROPERTIES:
   :CUSTOM_ID: allocators
   :END:

By default, standard-library containers allocate space using =new=.
Operators =new= and =delete= provide a general free store (also called
dynamic memory or heap) that can hold objects of arbitrary size and
user-controlled lifetime.

The standard-library containers offer the opportunity to install
allocators with specific semantics where needed. This has been used to
address a wide variety of concerns related to performance (e.g., pool
allocators), security (allocators that clean-up memory as part of
deletion), per-thread allocation, and non-uniform memory architectures
(allocating in specific memories with pointer types to match).

** Time
   :PROPERTIES:
   :CUSTOM_ID: time
   :END:

=<chrono>= provides facilities for dealing with time.

#+BEGIN_SRC C++
    auto t0 = high_resolution_clock::now();
    do_work();
    auto t1 = high_resolution_clock::now();
    cout << duration_cast<milliseconds>(t1ât0).count() << "msec\n";
#+END_SRC

** Function Adaption
   :PROPERTIES:
   :CUSTOM_ID: function-adaption
   :END:

Use lambda expressions

#+BEGIN_SRC C++
    void draw_all(vector<Shape*>& v)
    {
         for_each(v.begin(),v.end(),[](Shape* p) { pâ>draw(); });
    }
#+END_SRC

Use =std::mem_fn=, which produces a function object that can be called
as a nonmember function. =std::mem_fn= generates wrapper objects for
pointers to members, which can store, copy, and invoke a pointer to
member. Both references and pointers (including smart pointers) to an
object can be used when invoking a =std::mem_fn=.

#+BEGIN_SRC C++
    void draw_all(vector<Shape*>& v)
    {
         for_each(v.begin(),v.end(),mem_fn(&Shape::draw));
    }
#+END_SRC

Use =std::function=, a type that can hold any object that can be invoked
using =()=. =function= is useful for callbacks, for passing operations
as arguments, for passing function objects, etc. it may introduce some
run-time overhead compared to direct calls, and a function, being an
object, does not participate in overloading. If you need to overload
function objects (including lambdas), consider =overloaded=.

#+BEGIN_SRC C++
    int f1(double);
    function<int(double)> fct1 {f1};                // initialize to f1

    int f2(string);
    function fct2 {f2};                             // fct2's type is function<int(string)>

    function fct3 = [](Shape* p) { pâ>draw(); };    // fct3's type is function<void(Shape*)>
#+END_SRC

** Type functions
   :PROPERTIES:
   :CUSTOM_ID: type-functions
   :END:

A type function is a function that is evaluated at compile time given a
type as its argument or returning a type. The standard library provides
a variety of type functions to help library implementers (and
programmers in general) to write code that takes advantage of aspects of
the language, the standard library, and code in general.

Such type functions are part of C++'s mechanisms for compile-time
computation that allow tighter type checking and better performance than
would otherwise have been possible. Use of such features is often called
metaprogramming or (when templates are involved) template
metaprogramming.

*** Tag dispatch
    :PROPERTIES:
    :CUSTOM_ID: tag-dispatch
    :END:

#+BEGIN_SRC C++
    template<typename Ran>                                             // for random-access iterators
    void sort_helper(Ran beg, Ran end, random_access_iterator_tag)     // we can subscript into [beg:end)
    {
         sort(beg,end);     // just sort it
    }

    template<typename C>
         using Value_type = typename C::value_type; // C's value type

    template<typename For>                                       // for forward iterators
    void sort_helper(For beg, For end, forward_iterator_tag)     // we can traverse [beg:end)
    {
         vector<Value_type<For>> v {beg,end};  // initialize a vector from [beg:end)
         sort(v.begin(),v.end());              // use the random access sort
         copy(v.begin(),v.end(),beg);          // copy the elements back
    }

    template<typename Iter>
        using Iterator_category = typename std::iterator_traits<Iter>::iterator_category; // Iter's category

    template<typename C>
    void sort(C& c)
    {
         using Iter = Iterator_type<C>;
         sort_helper(c.begin(),c.end(),Iterator_category<Iter>{});
    }
#+END_SRC

In =<type_traits>=, the standard library offers simple type functions,
called /type predicates/ that answers a fundamental question about
types. They are most useful when we write templates.

Obvious ways of using type predicates includes conditions for
=static_assert=, compile-time =if=, and =enable_if=. The
standard-library =enable_if= is a widely used mechanism for conditonally
introducing definitions. The syntax of =enable_if= is odd, awkward to
use, and will in many cases be rendered redundant by concepts. It relies
on a subtle language feature called SFINAE ("Substitution Failure Is Not
An Error").

#+BEGIN_SRC C++
    template<typename T>
    class Smart_pointer {
        T& operator*();
        std::enable_if<Is_class<T>(), T&> operator->(); // is defined iff T is a class
    };
#+END_SRC

* Numerics
  :PROPERTIES:
  :CUSTOM_ID: numerics
  :END:

TODO

* Concurrency
  :PROPERTIES:
  :CUSTOM_ID: concurrency
  :END:

Concurrency is widely used to improve throughput or to improve
responsiveness. The standard library supoort for concurrency is
primarily aimed at supporting system-level concurrency rather than
directly providing sophisticated higher-level concurrency models. The
features are built directly upon what operating systems offer and do not
incur performance penalties compared with those.

A computation that can potentially be executed concurrently with other
computation is a /task/. A thread is the system-level representation of
a task in a program.

#+BEGIN_SRC C++
    void f();                 // function

    struct F {                // function object
         void operator()();   // F's call operator (Â§6.3.2)
    };

    void user()
    {
         thread t1 {f};       // f() executes in separate thread
         thread t2 {F()};     // F()() executes in separate thread

         t1.join();           // wait for t1 to terminate
         t2.join();           // wait for t2 to terminate
    }
#+END_SRC

Inter-thread communication is typically controlled by locks or other
mechanisms to prevent data races (uncontrolled concurrent access to a
variable).

Besides passing an argument directly when constructing a thread, use a
functor and pass the argument through its constructor is another method.

There isn't more innovation than C does when returning values from a
thread.

#+BEGIN_SRC C++
    void f(const vector<double>& v, double* res);    // take input from v; place result in *res

    class F {
    public:
         F(const vector<double>& vv, double* p) :v{vv}, res{p} { }
         void operator()();          // place result in *res
    private:
         const vector<double>& v;    // source of input
         double* res;                // target for output
    };

    double g(const vector<double>&); // use return value

    void user(vector<double>& vec1, vector<double> vec2, vector<double> vec3)
    {
         double res1;
         double res2;
         double res3;

         thread t1 {f,cref(vec1),&res1};        // f(vec1,&res1) executes in a separate thread
         thread t2 {F{vec2,&res2}};             // F{vec2,&res2}() executes in a separate thread
         thread t3 {[&](){res3 = g(vec3);}};    // capture local variables by reference

         t1.join();
         t2.join();
         t3.join();

         cout << res1 << ' ' << res2 << ' ' << res3 << '\n';
    }
#+END_SRC

** Synchronization
   :PROPERTIES:
   :CUSTOM_ID: synchronization
   :END:

Use of resource handles, such as =scoped_lock= and =unique_lock=, is
simpler and far safer than explicitly locking and unlocking mutexes.

#+BEGIN_SRC C++
    mutex m; // controlling mutex
    int sh;  // shared data

    void f()
    {
         scoped_lock lck {m};        // acquire mutex
         sh += 7;                    // manipulate shared data
    } 
#+END_SRC

The correspondence between the shared data and a mutex is conventional:
the programmer simply has to know which mutex is supposed to correspond
to which data.

It is not uncommon to need to simultaneously access several resources to
perform some action. This can lead to deadlock. The =scoped_lock= helps
by enabling us to acquire several locks simultaneously.

One of the most common ways of sharing data is among many readers and a
single writer. This "reader-writer lock" idiom is supported be
=shared_mutex=. A reader will acquire the mutex "shared" so that other
readers can still gain access, whereas a writer will demand exclusive
access.

#+BEGIN_SRC C++
    shared_mutex mx;          // a mutex that can be shared

    void reader()
    {
        shared_lock lck {mx};       // willing to share access with other readers
        // ... read ...
    }

    void writer()
    {
        unique_lock lck {mx};       // needs exclusive (unique) access
        // ... write ...
    }
#+END_SRC

Locking and unlocking are relatively expensive operations. Modern
machines are very good at copying data. Don't choose shared data for
communication because of "efficiency" without thought and preferably not
without measurement.

The basic support for communicating using external events is provided by
condition variables found in =<condition_variable>=.

#+BEGIN_SRC C++
    // a producer-consumer problem
    class Message {    // object to be communicated
         // ...
    };

    queue<Message> mqueue;         // the queue of messages
    condition_variable mcond;      // the variable communicating events
    mutex mmutex;                  // for synchronizing access to mcond

    void consumer()
    {
         while(true) {
              unique_lock lck {mmutex};          // acquire mmutex
              mcond.wait(lck,[] { return !mqueue.empty(); });    // release lck and wait;
                                                                 // re-acquire lck upon wakeup
                                                                 // don't wake up unless mqueue is non-empty
              auto m = mqueue.front();           // get the message
              mqueue.pop();
              lck.unlock();                      // release lck
              // ... process m ...
         }
    }

    void producer()
    {
         while(true) {
              Message m;
              // ... fill the message ...
              scoped_lock lck {mmutex};      // protect operations
              mqueue.push(m);
              mcond.notify_one();            // notify
         }                                   // release lock (at end of scope)
    }
#+END_SRC

The standard library provides a few facilities to allow programmers to
operate at the conceptual level of tasks rather than directly at the
lower level of threads and locks:

- =future= and =promise= for returning a value from a task spawned on a
  separate thread. To deal with an exception transmitted through a
  =future=, the caller of =get()= must be prepared to catch it
  somewhere.

#+BEGIN_SRC C++
    void g(future<X>& fx)       // a task: get the result from fx
    {
         // ...
         try{
              X v = fx.get();  // if necessary, wait for the value to get computed
              // ... use v ...
         }
         catch (...) {         // oops: someone couldn't compute v
              // ... handle error ...
         }

    }
#+END_SRC

- =packaged_task= to help launch tasks and connect up the mechanisms for
  returning a result. It is provided to simplify setting up tasks
  connected with =future= and =promise= to be run on =thread=. A
  =packaged_task= provides wrapper code to put the return value or
  exception from the task into a =promise=. It is a wrapper around a
  callable object with its =future= and =promise=.

- =async()= for launching of a task in a manner very similar to calling
  a function. It serves well for a wide range of needs. Basically,
  =async()= separates the "call part" of a function call from the "get
  the result part" and separates both from the actual execution of the
  task.

#+BEGIN_SRC C++
    double comp4(vector<double>& v)
         // spawn many tasks if v is large enough
    {
         if (v.size()<10000)      // is it worth using concurrency?
               return accum(v.begin(),v.end(),0.0);

         auto v0 = &v[0];
         auto sz = v.size();

         auto f0 = async(accum,v0,v0+sz/4,0.0);          // first quarter
         auto f1 = async(accum,v0+sz/4,v0+sz/2,0.0);     // second quarter
         auto f2 = async(accum,v0+sz/2,v0+sz*3/4,0.0);   // third quarter
         auto f3 = async(accum,v0+sz*3/4,v0+sz,0.0);     // fourth quarter

         return f0.get()+f1.get()+f2.get()+f3.get(); // collect and combine the results
    }
#+END_SRC

With =async()= you don't even know how many threads will be used because
that's up to =async()= to decide based on what it knows about the system
resources available at the time of a call. Don't even think of using
=async()= for tasks that share resources needing locking.
