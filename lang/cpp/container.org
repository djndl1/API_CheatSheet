* Overview
  :PROPERTIES:
  :CUSTOM_ID: overview
  :END:

All but the unordered containers support:

1. The overloaded assignment operator. (supported by unordered
   containers)

2. equality: ====, =!==;

3. ordering operators: =<=, =<==, =>==, =>=

A type stored in a container must at least support

- a default value;

- the equality operator (====)

- the less-than operator (=<=)

Virtually all containers support copy construction.

Normally containers should not contain pointers to data.

* =std::pair= in =<utility>=
  :PROPERTIES:
  :CUSTOM_ID: stdpair-in-utility
  :END:

#+BEGIN_SRC C++
    pair<string, string> piper("PA28", "PH-AHI");
    pair<string, string> cessna("C172", "PH-ANG");

    cout << piper.first;
    cessna.second = "PH-ANW";
    cessna = pair<string, string>("C152", "PH-ANW");
#+END_SRC

=std::pair= is a basic ingredient of =std::map=, =std::multimap= and
=hash_map=.

* =std::tuple= in =<tuple>=
  :PROPERTIES:
  :CUSTOM_ID: stdtuple-in-tuple
  :END:

A generalized pair container. A tuple can be considered the 'template's
answer to C's =struct='.

#+BEGIN_SRC C++
    typedef std::tuple<int, double&, std::string, char const*> tuple_idsc;
    double pi = 3.14;
    tuple_idsc idsc(59, pi, "hello", "fixed");
    std::get<2>(idsc) = "hello world";
#+END_SRC

Type-based tuple addressing can be used for tuple types used once in a
tuple definition (if the same type is used repeatedly referring to that
type introduces an ambiguity).

#+BEGIN_SRC C++
    std::tuple_size<Tuple>::value // obtain the size of tuple at compile time
    std::tuple_element<idx, Tuple>::type // obtains the type of the specified element
#+END_SRC

The unpack operator can also be used to forward the arguments of a
constructor to a tuple data member.

#+BEGIN_SRC C++
    template <typename ...Params>
    class Wrapper {
        std::tuple<Params...> d_tuple;
    public:
        Wrapper(Params&& ...params) : d_tuple{std::forward<Params>(params)...}
        {}
    }
#+END_SRC

* Structured Bindings with =std::tuple= and =std::pair=
  :PROPERTIES:
  :CUSTOM_ID: structured-bindings-with-stdtuple-and-stdpair
  :END:

TODO

* Allocators
  :PROPERTIES:
  :CUSTOM_ID: allocators
  :END:

Most containers use a special object for allocating the memory that is
managed by them. This object is called an allocator, and it's type is
(usually by default) specified when a container is constructed.

#+BEGIN_SRC C++

    // allocate raw memory for holding count values of the container's value_type
          pointer
          allocate(size_type __n, const void* = static_cast<const void*>(0))
          {
        if (__n > this->max_size())
          std::__throw_bad_alloc();

    #if __cpp_aligned_new
        if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
          {
            std::align_val_t __al = std::align_val_t(alignof(_Tp));
            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
          }
    #endif
        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
          }

    // calls operator delete to delete object's memory, previously allocated by `allocate`
          void
          deallocate(pointer __p, size_type)
          {
    #if __cpp_aligned_new
        if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
          {
            ::operator delete(__p, std::align_val_t(alignof(_Tp)));
            return;
          }
    #endif
        ::operator delete(__p);
          }      
#+END_SRC

#+BEGIN_SRC C++
        vector<string> vs;

        auto allocator = vs.get_allocator();        // get the allocator

        string *sp = allocator.allocate(3);         // alloc. space for 3 strings

        allocator.construct(&sp[0], "hello world"); // initialize 1st string
        allocator.construct(&sp[1], sp[0]);         // use the copy constructor
        allocator.construct(&sp[2], 12, '=');       // string of 12 = chars

        cout << sp[0] << '\n' <<                    // show the strings
                sp[1] << '\n' <<
                sp[2] << '\n' <<
                "could have allocated " << allocator.max_size() << " strings\n";

        for (size_t idx = 0; idx != 3; ++idx)
            allocator.destroy(sp + idx);            // delete the string's
                                                    // contents

        allocator.deallocate(sp, 3);                // and delete sp itself again.
#+END_SRC

* =std::array= in =<array>=
  :PROPERTIES:
  :CUSTOM_ID: stdarray-in-array
  :END:

A fixed-size array. The elements of an array are stored contiguously.

Using an array rather than a standard C style array offers several
advantages:

- All its elements are immediately initialized

- Introspection is possible

- can be used with generic algorithms

#+BEGIN_SRC C++
    // how the elements are stored, note the weird typedef _Tp _Type[_Nm], that's how array typedef is done
    // the elements are actually stored on the stack
      template<typename _Tp, std::size_t _Nm>
        struct __array_traits
        {
          typedef _Tp _Type[_Nm];
          typedef __is_swappable<_Tp> _Is_swappable;
          typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
          ...
        }
        
      template<typename _Tp, std::size_t _Nm>
        struct array
        {
        ...
          typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
          typename _AT_Type::_Type                         _M_elems;
        ...
        }
#+END_SRC

In general, when looking for a sequential data structure, the =array= or
=vector= should be the 'weapon of choice'.

* =std::vector= in =<vector>=
  :PROPERTIES:
  :CUSTOM_ID: stdvector-in-vector
  :END:

An expandable array.

#+BEGIN_SRC C++
    iterator emplace(const_iterator position, Args&& ...args); 
    /** Inserts a new element into the container directly before position. The element is constructed through std::allocator_traits::construct, which typically uses placement-new to construct the element in-place at a location provided by the container. */

    void emplace_back(Args&& ...args);
    vector::iterator erase(); // erase a specific range of elements in the vector.
#+END_SRC

* =std::list= in =<list>=
  :PROPERTIES:
  :CUSTOM_ID: stdlist-in-list
  :END:

It is usually implemented as a doubly-linked list. This container
provides bidirectional iteration capability while being less space
efficient. At present lists aren't as useful anymore as they used to be
(when computers were much slower and more memory-constrained). Except
maybe for some rare cases, a vector should be the preferred container;
even when implementing algorithms traditionally using lists.

#+BEGIN_SRC C++
    void splice(pos, object); 
    // Transfers elements from one list to another. No elements are copied or moved, only the internal pointers of the list nodes are re-pointed.

    void unique();
    // operating on a sorted list to remove all consecutively identical elements from the list
#+END_SRC

* =std::queue= in =<queue>=
  :PROPERTIES:
  :CUSTOM_ID: stdqueue-in-queue
  :END:

It is most often used in situations where events should be handled in
the same order as they are generated.

The queue does not support iterators or an index operator. The only
elements that can be accessed are its front and back element.

* =std::priority_queue= in =<queue>=
  :PROPERTIES:
  :CUSTOM_ID: stdpriority_queue-in-queue
  :END:

The priority queue uses =operator<= of the data type stored in the
priority queue to decide about the priority of the data elements. The
smaller the value, the lower the priority. So, the priority queue could
be used to sort values while they arrive.

#+BEGIN_SRC C++
    #include <queue>
    #include <iostream>
    #include <string>

    class Text {
        std::string d_s;

    public:
        Text(std::string const &str) : d_s{str} {};
        operator std::string const &() const
            {
                return d_s;
            }

        bool operator<(Text const &right) const
            {
                return d_s > right.d_s;
            }
    };

    using namespace std;

    int main(int argc, char *argv[])
    {
        priority_queue<Text> q;
        string word;
        while (cin >> word)
            q.push(word);

        while (q.size()) {
            word = q.top();
            cout << word << '\n';
            q.pop();
            
        }
        return 0;
    }
#+END_SRC

* =std::deque= in =<deque>=
  :PROPERTIES:
  :CUSTOM_ID: stddeque-in-deque
  :END:

A doubly ended data structure. It allows for reading and writing at both
ends. A deque is a combination of a vector and two queues, operating at
both ends of the vector. In situations where random insertions and the
addition and/or removal of elements at one or both sides of the vector
occurs frequently using a deque should be considered.

* =std::map= in =<map>=
  :PROPERTIES:
  :CUSTOM_ID: stdmap-in-map
  :END:

A sorted associative container with unique keys, usually implemented as
a rb-tree.

A map sorts its keys, the key's =operator<= must be defined.

#+BEGIN_SRC C++
    template <class _Key, class _Tp, class _Compare = less<_Key>,
              class _Allocator = allocator<pair<const _Key, _Tp> > >
    class _LIBCPP_TEMPLATE_VIS map
    {
    public:
        // types:
        typedef _Key                                     key_type;
        typedef _Tp                                      mapped_type;
        typedef pair<const key_type, mapped_type>        value_type;
        typedef typename __identity<_Compare>::type      key_compare;
        typedef typename __identity<_Allocator>::type    allocator_type;
        typedef value_type&                              reference;
        typedef const value_type&                        const_reference;
    ...
#+END_SRC

The map supports, in addition to the standard operators for containers,
the index operator. The index operator may be used to retrieve or
reassign individual elements of the map.

#+BEGIN_SRC C++
    // an iterator to the element having the given key
    map::iterator find(key);

    // insers a new `value_type` into the map.
    pair<map::iterator, bool> insert(value_type);

    // returns a copy of the objeect used by the map to compare keys
    key_compare key_comp()

    // the first element that is not less than key
    map::iterator lower_bound(key);
    // the first element whose key is greater than the specified key
    map::iterator upper_bound(key);
    // [lower_bound, upper_bound]
    pair<iterator, iterator> equal_range(key);
#+END_SRC

* =std::multimap= in =<map>=
  :PROPERTIES:
  :CUSTOM_ID: stdmultimap-in-map
  :END:

A sorted associative container with multiple identical keys. It does not
support the index operator.

* =std::set= in =<set>=
  :PROPERTIES:
  :CUSTOM_ID: stdset-in-set
  :END:

A sorted collection of values. (Apparently implemented as a red-black
tree).

* =std::multiset= in =<set>=
  :PROPERTIES:
  :CUSTOM_ID: stdmultiset-in-set
  :END:

A sorted collection of values with multiple identical entries.

* =std::stack= in =<stack>=
  :PROPERTIES:
  :CUSTOM_ID: stdstack-in-stack
  :END:

FILO, LIFO. Implemented using a deque. Only the basic set of container
operators are supported by the stack.

* =std::unordered map=, =std::unordered_multimap= in =<unordered_map>=
  :PROPERTIES:
  :CUSTOM_ID: stdunordered-map-stdunordered_multimap-in-unordered_map
  :END:

Hash is a far faster way to store and retrieve data. The efficiency of a
=unordered_map= in terms of speed should greatly exceed the efficiency
of the =map=.

#+BEGIN_SRC C++
    hasher key_eq() const; // a copy of the `key_equal` function

    float load_factor() const; // the container's current load factor

    size_t max_bucket_count(); // returns the maximum number of buckets this `unordered_map` may contain

    size_t bucket(key_type,const &key); //  the index location where key is stored

    size_t bucket_count(); // the number of slots used by the containers.

    size_t bucket_size(size_t index); // the number of objects stored at a bucket

    hasher hash_function() const; // a copy of the hash function used by the container

    void rehash(size_t size); // 
#+END_SRC

The =unordered_multimap= allows multiple objects using the same keys to
be stored in an unordered map. It does not support =operator[]= and
=at()=.

* =std::unordered_set=, =std::unordered_multiset= in =<unordered_set>=
  :PROPERTIES:
  :CUSTOM_ID: stdunordered_set-stdunordered_multiset-in-unordered_set
  :END:

Elements stored in the =unordered_set= are immutable but they can be
inserted or removed. The unordered\_multiset allows multiple objects
using the same keys to be stored in an unordered set.

* (C++14) Heteregenenous Lookup
  :PROPERTIES:
  :CUSTOM_ID: c14-heteregenenous-lookup
  :END:

Since the C++14 standard arbitrary lookup key types can be used provided
a comparison operator is available to compare that type with the
container's key type. Thus, a =char const∗ key= (or any other type for
which an =operator<= overload for =std::string= is available) can be
used to lookup values in a =map<std::string, ValueType>=. This is called
/heterogeneous lookup/.

* =std::complex= in =<complex>=
  :PROPERTIES:
  :CUSTOM_ID: stdcomplex-in-complex
  :END:

Several mathematical functions are available for the complex container,
such as =abs=, =arg=, =conj=, =cos=, =cosh=, =exp=, =log=, =norm=,
=polar=, =pow=, =sin=, =sinh= and =sqrt=. All these functions are free
functions, not member functions, accepting complex numbers as their
arguments. Complex numbers may be extracted from =istream= objects and
inserted into =ostream= objects.
