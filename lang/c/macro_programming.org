#+title: Macro Programming

* Object-Like Macro

A simple identifier which will be replaced by a code fragment.

* Function-Like Macro

A function-like macro may contain no arguments. Parameters must be valid C
identifiers. Parenthese within each argument must balance and a comma within
such parentheses does not end the argument.Empty argument is
not an error but the resulted code may be.

All arguments to a macro are completely macro-expanded before they are
substituted into the macro body. After substitution, the complete text is
scanned again for macros to expand, including the arguments.

#+begin_src c
#define macro_func() (...) // totally legit

macro_func_with_args((a, b, c)) // legit since the argument is surrounded by parentheses
#+end_src

** Variadic Arguments

Unlike =va_arg=, arguments in =__VA_ARGS__= cannot be extracted.

An empty variadic argument list is difficult to fit in until the introduction of
=__VA_OPT__= in C23/C++20 as there would be an redundant comma where the argument
list is used. In GNU C, this is accomplished by an extension =##= to eliminate
the comma.

* Recursive Macro Expansion

C macros does not support recursive macro calls. However, macro expansions are
recursive until the expanded result contains some macro previously expanded to
prevent infinite recursion.

#+begin_src c
#define INIT_VALUE init_value,
#define INIT_VALUE_2 INIT_VALUE INIT_VALUE
#define INIT_VALUE_4 INIT_VALUE_2 INIT_VALUE_2
#define INIT_VALUE_8 INIT_VALUE_4 INIT_VALUE_4

value_t arr[8] = {
     INIT_VALUE_8
};
#+end_src

* Macro Definition Order

The definition order does not matter as long as the dependent macros are defined
before the depending macro is used.

#+begin_src c
#include <stdio.h>

#define TEST_PRE TEST_POST

int main()
{
#define TEST_POST 1
    printf("TEST_PRE %d\n", TEST_PRE);
#undef TEST_POST
#define TEST_POST 2
    printf("TEST_PRE %d\n", TEST_PRE);
    return 0;
}
#+end_src

#+begin_src shell
TEST_PRE 1
TEST_PRE 2
#+end_src


* Stringify/Stringizing

the directive =#symbol= turns the symbol name into a string constant. The
symbol argument is not macro-expanded first.

#+begin_src c
#define xstr(s) str(s)
#define str(s) #s
#define foo 4
str (foo)
     → "foo"
xstr (foo)
     → xstr (4)
     → str (4)
     → "4"
#+end_src

* Token Concatenation/Pasting

When a macro is expanded, the two tokens on either side of each =##= operator
are combined into a single token, which then replaces the =##= and the two
original tokens in the macro expansion. Concatenation succeeds only if the
result is a valid token, otherwise the two tokens are still separated.
The token next to =##= is not macro-expanded first.

#+begin_src c
#define EXPANDABLE 1
#define CONCAT(a, b) a ## b

CONCAT(EXPANDABLE, _2) // expands to EXPANDABLE_2 instead of 1_2
#+end_src


* X Macro

X macros are used to construct and use tables. A table consists of rows of
related fields, put as arguments of a macro. The macro is not defined until
later some columns are used, where the use is defined by the macro.

#+begin_src c
#define _STRINGIFY(s) #s
#define STRINGIFY(s) _STRINGIFY(s)

#define A_TABLE \
    X(A, 1) \
    X(B, 2) \
    X(C, 3)

#define X(a, b) a = b,
enum an_enum {
    A_TABLE
};
#undef X

#define X(a, b) [a] = STRINGIFY(a),
char *an_array[] = {
     A_TABLE
};
#undef X
#+end_src

To avoid long lines, the table may be even defined as a header and included
where it is used.
To avoid the repeated use of a certain token as the macro
name or the =define=/=undef= pair, the X macro may be even used as an argument.

#+begin_src c
#define A_TABLE(row) \
    row(A, 1) \
    row(B, 2) \
    row(C, 3)

#define ARR_ELM(a, b) [a] = STRINGIFY(a),
#define ENUM_ELM(a, b) a = b,

enum an_enum {
    A_TABLE(ENUM_ELM)
};

char *an_array[] = {
     A_TABLE(ARR_ELM)
};
#+end_src

One may take advantage of X macro to define smart enum types.

One way to count the number of entries of the table is to expand each row into
an array element and use =sizeof(arr) / sizeof(element)= to count the size. The
downsize is that a helper array is generated with actually being used. It is
expected that the table is relatively small that it doesn't actually occupy much
space or that the compiler may eliminate the helper array. Otherwise, the table and
the size should be probably generated using a more capable macro processor.

** Use

- As a code generator
   + a list of initializers
   + a list of declarations
   + smart enums

