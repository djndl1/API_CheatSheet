#+title: Linkage Visibility Lifetime

This note is not about ELF symbol visibility and linkage.

Microsoft has some nice [[https://learn.microsoft.com/en-us/cpp/c-language/lifetime-scope-visibility-and-linkage?view=msvc-170][articles]] about lifetime, visibility and linkage.
A [[https://learn.microsoft.com/en-us/cpp/c-language/summary-of-lifetime-and-visibility?view=msvc-170][summary table]] is available.

- *Lifetime* of a variable or an object determined by storage classes can be
  *static* (for the duration of the execution of a program) or *automatic* (valid
  only within the block where the identifier is defined or declared).

- *Visibility* determines the portions of the program (*scope*) in which an identifier can be
  referenced.
  + file scope, function scope (only for labels, variables may be block-scope),
    block scope, function-prototype scope.

- *Linkage*: how identifiers that look the same are /linked/ together to refer
  to the same entity.

#+begin_quote
An identifier declared in different scopes or in the same scope more than once
can be made to refer to the same object or function by a process called linkage.
#+end_quote

  + *internal linkage*: translation unit level. Any other declaration
    of the same identifier name refers to a different entity.
    - =static= at tranlation-unit level
  + *external linkage*: accessible through other identifier of the same name
    - by default for functions and global variables.
    - =extern= forces the symbol has *external linkage*.
    - C99 =inline= has external linkage but an undefined symbol and another
      definition is expected to be supplied.
  + *no linkage*: no other way to reference the entity except through a certain identifier.
