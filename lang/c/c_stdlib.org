* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

For those library that are defined as functions, C STDLIB permits
implementations to provide a function-like macro of the same name in
addition to the true function. the macro might provide a faster
implementation of a simple function or it might call a function of a
different name.

To bypass such macros

#+BEGIN_SRC C
  double (*p)(double) = &cos; double a = p(b);
  double a = (cos)(b);

  #undef cos
  double a = cos(b);
#+END_SRC

Library headers or file names may be built into the implementation.

Do not use identifiers that begin with an underscore. They are used by
an implementation.

Besides the common way, another way to provide compatibility with C++ is

#+BEGIN_SRC C++
  extern "C" {
  #include "c_lib.h"
  }
#+END_SRC

* Standard Language Additions
  :PROPERTIES:
  :CUSTOM_ID: standard-language-additions
  :END:

Certain Standard C libraries can be considered part of the language.
They provide standard definitions and parameterization that help make C
programs more portable. They must be provided by freestanding
implementations even the other libraries are not provided.

- =stddef.h=: Fundamental types defined by the language, additional
  basic types and convenience macros.
  [[https://unix.stackexchange.com/questions/451232/where-is-stddef-h-defined-in-linux][On
  why I cannot find stddef.h]]

#+BEGIN_SRC C
  #ifdef __cplusplus
  #define NULL 0L
  #else
  #define NULL ((void*)0)
  #endif

  #ifndef __PTRDIFF_TYPE__
  #define __PTRDIFF_TYPE__ long int
  #endif
  typedef __PTRDIFF_TYPE__ ptrdiff_t;

  #ifndef __SIZE_TYPE__
  #define __SIZE_TYPE__ long unsigned int
  #endif
  #if !(defined (__GNUG__) && defined (size_t))
  typedef __SIZE_TYPE__ size_t;

  size_t    // unsigned integer type returned by `sizeof`
  ptrdiff_t // signed integer type returned when subtracting two 
  pointers
  max_align_t //
  offsetof   // byte offset from the beginning of a struct type to specified member
#+END_SRC

- =stdbool.h= C99 supports Boolean arithmetic with the built-in type
  =_Bool=

#+BEGIN_SRC C
  #define true 1
  #define false 0
  #define bool _Bool
#+END_SRC

- =iso646.h=

#+BEGIN_SRC C
  #ifndef _ISO646_H
  #define _ISO646_H

  #ifndef __cplusplus // in C++, these identifiers are keywords

  #define and    &&
  #define and_eq &=
  #define bitand &
  #define bitor  |
  #define compl  ~
  #define not    !
  #define not_eq !=
  #define or     ||
  #define or_eq  |=
  #define xor    ^
  #define xor_eq ^=

  #endif

  #endif
#+END_SRC

- =errno.h=: error report

#+BEGIN_SRC C
  #define EPERM        1  /* Operation not permitted */
  #define ENOENT       2  /* No such file or directory */
  #define ESRCH        3  /* No such process */
  #define EINTR        4  /* Interrupted system call */
  #define EIO      5  /* I/O error */
  #define ENXIO        6  /* No such device or address */
  #define E2BIG        7  /* Argument list too long */
  #define ENOEXEC      8  /* Exec format error */
  #define EBADF        9  /* Bad file number */
  #define ECHILD      10  /* No child processes */
  #define EAGAIN      11  /* Try again */
  #define ENOMEM      12  /* Out of memory */
  #define EACCES      13  /* Permission denied */
  #define EFAULT      14  /* Bad address */
  #define ENOTBLK     15  /* Block device required */
  #define EBUSY       16  /* Device or resource busy */
  #define EEXIST      17  /* File exists */
  #define EXDEV       18  /* Cross-device link */
  #define ENODEV      19  /* No such device */
  #define ENOTDIR     20  /* Not a directory */
  #define EISDIR      21  /* Is a directory */
  #define EINVAL      22  /* Invalid argument */
  #define ENFILE      23  /* File table overflow */
  #define EMFILE      24  /* Too many open files */
  #define ENOTTY      25  /* Not a typewriter */
  #define ETXTBSY     26  /* Text file busy */
  #define EFBIG       27  /* File too large */
  #define ENOSPC      28  /* No space left on device */
  #define ESPIPE      29  /* Illegal seek */
  #define EROFS       30  /* Read-only file system */
  #define EMLINK      31  /* Too many links */
  #define EPIPE       32  /* Broken pipe */
  #define EDOM        33  /* Math argument out of domain of func */
  #define ERANGE      34  /* Math result not representable */

  ...
#+END_SRC

An thread-local =int ``errno= holds implementation defined error codes
from library routine and is never cleared by library routines.

#+BEGIN_SRC C
  /* The error code set by various library functions.  */
  extern int *__errno_location (void) __THROW __attribute_const__;
  # define errno (*__errno_location ())
#+END_SRC

The typical way of using =errno= is to clear it before calling a library
function and check it afterwards. =strerror=, =perror= interpretes
=errno=.

- =stdarg.h=: a portable way to access variable argument lists

#+BEGIN_SRC C
  TYPEDEF __builtin_va_list va_list;

  #define va_start(v,l)   __builtin_va_start(v,l) // initializes a va_list
  #define va_end(v)       __builtin_va_end(v)     // called after all the argument have been read

  #define va_arg(v,l)     __builtin_va_arg(v,l)  // returns the value of the next parameter in the argument
  #define va_copy(d,s)    __builtin_va_copy(d,s) // duplicates the current state of a va_list
#+END_SRC

=va_copy= can be used to retain a pointer into the argument list

* Character Processing =<ctype.h>= =<wctype.h>=
  :PROPERTIES:
  :CUSTOM_ID: character-processing-ctype.h-wctype.h
  :END:

There are two kinds of facilities for handling characters:
classification (=is*=)and conversion (=to*=). Every character conversion
facility has a name beginning with =to= and returns a value of type
=int= representing a character or =EOF=. =EOF= is not necessarily
distinguishable form a real character if nonstandard character values
appear (Standard character values are always non-negative even if the
type =char= is signed).

The formulation of the facilities in C STDLIB takes into account the
possibility that several locales will be supported.

- =isalnum=, =isalpha=, =iscntrl= and their wide character counterparts,
  =isascii= (a BSD and SVID extension).

#+BEGIN_SRC C
  bool is_legal_cid(const char *s)
  {
      char ch;
      if ((ch = *s++) == '\0') return true;
      if (!(isalpha(ch) || ch == '_')) return false;
      while ((ch = *s++) != '\0') {
          if (!(isalpha(ch) || ch == '_')) return false;
      }
      
      return true;
  }
#+END_SRC

- =isdigit=, =isxdigit= and their wide character counterparts

- =isgraph=, =ispunct=, =isprint= (any character that is not a control
  character) and their wide character counterparts. A space is a
  printing character. =isprint= and =isgraph= differ only in how they
  handle the space character.

- =islower=, =isupper= and their wide character counterparts

- =isblank=, =isspace= and their wide character counterparts. Space
  characters are =\t=, =\v=, =\r=, =\n=, =\f=, =' '=. Blank characters
  are characters used to separate words within a line of text, including
  standard blank characters, space and horizontal tab, and they may
  include additional locale-specific characters for which =isspace= is
  true.

- =tolower=, =toupper= and their wide character counterparts

* String and Character Processing
  :PROPERTIES:
  :CUSTOM_ID: string-processing-string.h-stdlib.h
  :END:

** Null Terminated String

 Due to historical consideration of performance, C chose to use null-terminated
 character array as the default string type (in constrast to alternatives such
 as length-prefixed Pascal P-String). In retrospect, this caused a few
 memory-related security, performance and design issues:
- no memory is allocated for the final =NUL= character and the =NUL= is written
  over adjacent memory, potentially causing data corruption or invalid memory access.
- no =NUL= is written.
- Inability to store zeros within a string.
- =O(n)= cost to find the length.
- functions are duplicated to handle text strings and binary data differently.

** Encoding and Character Set

=char= are uninterpreted bytes and =wchar_t= are implementation-defined and they
are subject to compiler options. Recent
C has added =char8_t= (UTF-8, C23), =char16_t= (16-bit character, typically UTF-16
but not necessarily, C11; C23 mandates UTF-16), =char32_t= (32-bit character, typically UTF-32 but not
necessarily, C11; C23 mandates UTF-32), along with their literal prefix =u8=, =u=, =U= (C11).

Character sets are discussed in terms of input character set (of the source
file), source character set (of the internal representation before feeding into
the compiler), execution character set (how characters are stored in the
binary). String and character literals stored in the input character set are
first converted into the source character set after reading, preprocessed and
then converted into the execution character set during compilation.

ISO C requries a C program start with the "C" locale, which is meant to be the
simplest locale may or may not support UTF-8 and is probably restricted to ASCII.

** String Types

- Byte string :: each byte is assumed to be one character in some encoding.

- Multibyte string :: an extension to byte string. Locale-dependent character
  string that is layout-compatible with byte strings and uses the same
  facilities except for length calculation.

- Wide string :: implementation-defined wide-length character string, typically
  UTF-16 or UTF-32.

- =strcat= =strncat= (n characters ('\0' excluded)) and their wide
  character counterparts: semantically, =dest = dest + src=;

- =strcmp=, =strncmp=

- =strcpy=, =strncpy= (it may add additional '\0's )

#+BEGIN_SRC C
  char *strcat(char *dest, const char  *src)
  {
      char *s = dest + strlen(dest);
      strcpy(s, src);
      return dest;
  }
#+END_SRC

- =strlen=

- =strchr=, =strrchr=: finds the first/last occurrence of a character

#+BEGIN_SRC C
  int how_many(const char *s, int c)
  {
      int n = 0;
      if (c == 0) return 0;
      while (s) {
          s = strchr(s, c);
          if (s) n++, s++;
      }
      
      return n;
  }
  ``

  - `strspn`, `strcspn`, `strpbrk`: search a null terminated string for occurrences of characters specified by whether they are included in a second NTBS.

  ```c
  #include <stdbool>
  #include <stddef.h>
  #include <string.h>

  int is_id(const char *s)
  {
          static char *id_chars =
                  "abcdefghijklmnopqrstuvwxyz"
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                  "0123456789_";
          if (s == NULL) return false;
          if (strspn(s, id_chars) != strlen(s)) return false;

          return !isdigit(*s);
  }
#+END_SRC

- =strtok= (finds the next token), =strstr=: C++ =string.find()=

#+BEGIN_SRC C
          char input[] = "A bird   came down the walk";
          printf("Parsing the input string '%s'\n", input);
          char *token = strtok(input, " ");
          while(token) {
                  puts(token);
                  token = strtok(NULL, " ");
          }
#+END_SRC

- =strcoll, strxfrm=: provide locale-specific string-sorting facilities.

- =atof=, =atoi=, =atol=, =atoll=: convert the initial portion of a
  string to numbers

- =strtod=, =strtof=, =strtold=; =strtol=, =strtoll=, =strtoul=,
  =strtoull=: These functions provide more control over conversions than
  the corresponding facilities of =sscanf=.

* Memory Functions
  :PROPERTIES:
  :CUSTOM_ID: memory-functions
  :END:

In STD C, memory is interpreted as an array of objects of type
=unsigned char=. Block of memory are designated by a pointer of type
=void *=.

- =memchr=: searches for the first occurrence of a value in the first
  =len= characters beginning at a certain place

- =memcmp=: compare the first few bytes of two memory block

- =memcpy=, =memmove=: the difference is that =memmove= will work
  correctly for overlapping memory regions.

- =memset=: copies a value into a certain number of bytes beginning at a
  memory location.

* Time Support

** Concept

Defined by glibc documentation.

- *calendar time*, *absolute time* :: a point in the time continuum.

- *interval*, :: a contiguous part of the time continuum between two
  calendar times
  + *elapsed time* :: the length of an interval
  + *period* :: an interval between two events

- *simple calendar time* :: a calendar time represented as an elapsed time since
  a fixed, implementation-specific calendar time (the *epoch*).

- *broken-down time* :: a calendar time represented by its components in the
  Gregorian calendar, relative to a specific time zone.

- *CPU time* :: the amount of time that a single process has actively used a CPU
  to perform computations.

- *processor time* :: the amount of /any/ CPU has been in use by /any/ process.
  + a basic system resource indicator

** ISO

=time_t= (simple calendar time) is not necessarily the number of seconds since
the Unix epoch (mandated by the POSIX) but is
almost always the case (even On Windows).

C11 provides =struct timespec= (a simple calendar time or an elapsed time) and =timespec_get()= for
high resolution calendar time (without any utility functions. One has to resort
to =time_t='s).

=ctime= and =asctime= format time in a fixed format, use =strftime= and
=wcsftime= instead.

- To break down a time, use =gmtime_*= (for UTC) and =localtime_*= (for local
  time)
  + there is no way in ISO C to convert a broken down UTC time back into a Unix time.

- Unix time -> local time, use =localtime_*=, use =mktime()= for the other way around.

- Note that =clock()= returns a CPU time, not a monotonic clock time.

** Unix

*** glibc

- =struct timeval= :: an older simple calendar time with microsecond resolution

The system may have several clocks of different resolutions, epochs and mechanisms.

- =clockid_t= :: system clock ID that represents several system clocks
  - used with =clock_gettime()=​/​=clock_settime()= and =clock_getres()=
  - =CLOCK_REALTIME= :: since the POSIX epoch
  - =CLOCK_MONOTONIC= :: useful for measuring elapsed times

=clock_settime()= sets the time of a certain clock. To avoid discontinuous
change in the calendar time of =CLOKC_REALTIME=, use =ntp_*= API to monitor and
discipline the clock.

glibc's =struct tm= is extended with an offset and a timezone name. It also
offers =timelocal()=, =timegm()= to extende ISO C.

In addition to =sleep()=, there is a thread-safe high-precision =nanosleep()=.

Timezone info is set by the =TZ= environment variable and =tzset()= into the
=tzname= variable. The timezone settings are process-global.

The [[man:time(1)][time]] program probably uses =times()= to measure CPU time.

** Windows

*** UCRT

=clock()= under UCRT does not conform to ISO C's CPU time requirement. It
returns wall clock time. Very limited on Windows, use =GetProcessTimes()= and
=QueryPerformanceCounter()= instead.

=_ftime*()= returns millisecond-level local time with timezone info.
=_mkgmtime()= is basically the Windows version of =timegm()=.

=_tzset()= is similar to POSIX =tzset()= but does not support the same =TZ= format.

* Signals

A signal is a notification to a process that an event has occurred. It may
result from a hardware exception, a user operation, a software event. It could be
used as a synchronization technique or a primitive form of IPC. After a signal
hander is executed, execution returns where it is interrupted.

=signal= is not required to be thread-safe but POSIX requires so.

Calling =abort= or =raise= forces the current execution to turn to a handler and
thus synchronous. Synchronous signal handlers cannot raise a signal again. An
asynchronous handler may not (undefined behavior) call most of the standard
library functions and access any static/thread-local object that is not
lock-free atomic (=sig_atomic_t= is atomic even in the presence of async signals)

** Windows

=SIGINT= is not natively supported and =Ctrl-C= is handled by a new thread in the
process. =SIGILL= and =SIGTERM= are not generated by Windows but user code's
=raise=. =SIGINT= seems the only signal that can be generated externally to a process.

The handler for a signal is reset to the default before the custom
handler is executed. Signal dispositions are not inherited by child processes.
