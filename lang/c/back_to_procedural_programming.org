#+title: Back To Procedural Programming

Zig, Rust, Go, Odin, JAI, Carbon: recent programming languages that does not
emphasize OOP.

Procedural programming uses procedures over GOTOs, with strcutured flow control.

* What is OOP

As programs became complex with more and more shared state, two approaches have
to proposed to solve this issue:

- functional programming: minimize state

- object-oriented programming: segregate state
  + we use objects and objects contain other objects.

** What is an Object

An object is a bundle of encapsulated states, with which any interaction is
performed through /messaging/. The object has a predefined set of messages as
its public interface, with its private states hidden behind the public
interface. Objects may contain other objects and objects interact with each
other by sending messages.

** Alan Kay's OOP

- /messaging/: send a message to tell an object to act (calling a method). The
  object looks at the message and decides what action to take based on current
  state. A method is seen as a message type allowed by an object. Calling an method
  sends a message of the type.
  + comparable to HTTP request
  + modern OOP languages move away from messaging.

- /encapsulation/: local retention and protection and hiding of state-process

- extreme /late-binding/ of all things: objects attributes, behaviors and methods
  are completely determined and changeable at runtime.
  + at odds with modern static-typed OOP languages.

C++ didn't take flight because of OOP.
Even functional languages nowadays combine data and actions together, even
without classes (with modules).

** The Pillars of OOP

- Abstraction: don't depend on implementation

- Encapsulation: prevent depending on implementation

- Polymorphism: implementation determined by type at runtime or compile-time

- Inheritance: OOP-unique, hierarchical code sharing, in contrast with
  composition (non-hierarchical code sharing, basically every language, e.g. nesting
  structs in C)
  + method overriding might accidentally break other code due to implicitness of inheritance.

Every modern language has the first three.
Hierarchical code sharing seems to be the actual essence of classical OOP.

* Why OOP Succeeds

The paradigm itself may have some merits but it came to dominate the industry
probably due to the simplicity of early Java's API, its C-like syntax, platform
independence, GC,
its method call syntax =subject.verb(object)= (and IDE autocompletion of the syntax).

* The Problem of OOP

Patterns, SOLID, DI, agile development and so on are all bandages to the
original OOP.

** Encapsulation does not work at a fine-grained level.

Originally messages send only copies of state, not object references. To send
messages to another object, the sender has to have a reference to the receiver
since the inception, and thus the receiver is part of the sender's private
state.

Messaging modifies the internal state of an object. As long as messages are sent
to an object by many other objects, this object becomes the shared global state.
To strictly enforce encapsulation, objects has to form a tree-like hierarchy,
where only the parent is able to send messages to an object. If an object wants
to send a message to an object on another branch, it has to modify its own
private state to notify its parent, and ancestors and then down the
other branch until a message reaches the other object. *No one writes code like
this*. If this is not to be followed, then an object may be modified by multiple
others, which is equally bad.

Too much encapsulation adds unnecessary barriers to the architecture of a
program and actually hinders change.
Absence of structure is more structured than bad structure.

** OOP Represents No Real-World Objects

The relationship between types and behaviors are difficult to decide and
sometimes even random. There is no real-world relationship between the behavior
code and its belonging class name. Various "manager", "factory", "service", doer classes
represents no real-world notions. Behaviors are split into various objects
(nouns).
Here programming abstraction reduces no complexity but adds more abstract code.
An object's behavior is then put into numerous objects, leading to code
fragmentation (single responsibility). The problem here is that OOP forces
behaviors into a certain object.

* Procedural: Functions and Data

Let data just be data and actions just be actions.
Some languages force users to envision everything as a thing even if it
originates as an action, a process. Not everything is an object.
Also, hierarchical classification is not unique to OOP.

Interfaces are there in Go, Rust and even Haskell. There are various ways to
accept abstract data:

- interfaces

- traits,

- type classes

-  closures: Javascript, where a closure may even refer to the object currently being defined, to which
it belongs, to capture the =self= parameter. The actual behavior depends on the
object definition by duck typing)

- non-closure functions: the =self= parameter is explicitly passed in

- function pointers

Encapsulation, type hierarchy, abstraction are not unique to OOP. Many OOP's
features are not exclusive to it and some are out of favor now. Language
paradigms are not about what styles are possible, more about how those styles
are supported and what styles the ecosystem embraces.

Procedural style is programming with /less hierarchy/,
/organizing code into data and procedures/ and /using modules for modularity/.

** Still Need OOP?

Only behaviors strongly associated with a certain data type should be modeled as
object methods. Most procedures handle cross-cut behaviors.

** Handle Shared State

- Favor pure functions.

- When in doubt, parameterize

- Bundle globals into structs/records/classes, creating subnamespaces.

- Encapsulate at the level of namespaces/packages/modules.

- A Long function of a sequence of coupled logic steps should be not be split blindly.
  + prefer section comments over extracting code into separate helper functions.
  + prefer nested functions to indicate the helpers' usage (if the language
    offers the feature). Use anonymous functions and call them immediately.
  + constraint scope of local variables. (C-like) when in doubt, embrace
    variables in curly braces. Using anonymous functions (expressions) also avoids variables
    shared within the scope and the enclosing function.

* Reference

- [[https://www.youtube.com/watch?v=vQPHtAxOZZw][The Return Of Procedural Programming]]

- [[https://www.youtube.com/watch?v=69edOm889V4][The Design Of C++]]

- [[https://www.youtube.com/watch?v=IRTfhkiAqPw&feature=youtu.be][Object Oriented Programming is Embarassing]]

- [[http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html][Execution in Kingdomn of Nouns]]

- [[https://www.youtube.com/watch?v=0iyB0_qPvWk][Object Oriented Programming is Good*]]

- [[https://www.youtube.com/watch?v=QM1iUe6IofM&t=146s][Object Oriented Programming is Bad]]

- [[https://www.youtube.com/watch?v=V6VP-2aIcSc][Object Oriented Programming is Garbage]]

- [[https://www.youtube.com/watch?v=hxGOiiR9ZKg][The Flaws of Inheritance]]

- [[https://www.youtube.com/watch?v=aq365yzrTVE][Why Inheritance Sucks]]
