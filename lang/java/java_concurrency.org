Multithreading is extremely useful in practice. Graphical user interface
(GUI) programs have a separate thread for gathering user interface
events from the host operating environment

* Thread States
  :PROPERTIES:
  :CUSTOM_ID: thread-states
  :END:

Threads can be in one of six states:

- new: created but not yet running. A certain amount of bookkeeping
  needs to be done before a thread can run.

- runnable: after invoding =.start()=, the thread is in the runnable
  state. A runnable thread may or may not actually be running. A thread
  can =yield= its control.

- blocked: when a thread tries to acquire an intrinsic object lock and
  the lock is currently held by another thread, it becomes blocked.

- waiting: when a thread waits for another thread to notify the
  scheduler of a condition

- timed waiting: several methods have a timeout parameter.

- terminated: the =run= method exits normally or an uncaught exception
  terminates the =run= method.

When a thread is blocked or waiting (or, of course, when it terminates),
another thread will be scheduled to run. When a thread is reactivated
(for example, because its timeout has expired or it has succeeded in
acquiring a lock), the scheduler checks to see if it has a higher
priority than the currently running threads. If so, it preempts one of
the current threads and picks a new thread to run.

#+BEGIN_SRC sh
      +--------+
      |        |
      |  new   |                                +---------+
      |        |                                |         |
      +---|----+     acquiring a lock           |  bloked |
          | +---------------------------------->+         |
          | |  +-------<------------------------|---------+
  start   | ^  |   lock acquired
          | |  |
          | |  |
          | |  v
      +---v-|--+                                +---------+
      |        | waiting for notification       |         |
      |runnable+------------------------------> | waiting |
      |        |    notification occurred       |         |
      +---|--|-+ <------------------------------|---------+
          |  ^ |
          |  | |  waiting for timeout or notification
  run     |  | +------------------------------>+---------+
  method  |  |                                 |  timed  |
  exits   |  +---------------------------------+         |
          | timeout or notification occurred   | waiting |
          v                                    +---------+
      +---|------+
      |          |
      |terminated|
      |          |
      +----------+
#+END_SRC

* Thread Properties
  :PROPERTIES:
  :CUSTOM_ID: thread-properties
  :END:

** Interrupting
   :PROPERTIES:
   :CUSTOM_ID: interrupting
   :END:

the =interrupt= method can be used to request termination of a thread.
When the =interrupt= method is called on a thread, the /interrupted
status/ of the thread is set. Each thread should occasionally check
whether it has been interrupted.

#+BEGIN_SRC java
  while (!Thread.currentThread().isInterrupted() && more work to do)
  {
     do more work
  }
#+END_SRC

When the =interrupt= method is called on a thread that blocks on a call
such as =sleep= or =wait=, the blocking call is terminated by an
=InterruptedException=.

There is no language requirement that a thread which is interrupted
should terminate. Interrupting a thread simply grabs its attention. The
interrupted thread can decide how to react to the interruption. Some
threads are so important that they should handle the exception and
continue. But quite commonly, a thread will simply want to interpret an
interruption as a request for termination

#+BEGIN_SRC java
  Runnable r = () -> {
     try {
        . . .
        while (!Thread.currentThread().isInterrupted() && more work to do)
        {
           do more work
        }
     }
     catch(InterruptedException e) {
        // thread was interrupted during sleep or wait
     }
     finally {
        cleanup, if required
     }
     // exiting the run method terminates the thread
  };
#+END_SRC

if your loop calls =sleep=, don't check the interrupted status. Instead,
catch the exception.

** Daemon Threads
   :PROPERTIES:
   :CUSTOM_ID: daemon-threads
   :END:

=.setDaemon(true)=. A daemon is simply a thread that has no other role
in life than to serve others. Examples are timer threads that send
regular "timer ticks" to other threads or threads that clean up stale
cache entries. When only daemon threads remain, the virtual machine
exits. There is no point in keeping the program running if all remaining
threads are daemons.

** Handlers for Uncaught Exceptions
   :PROPERTIES:
   :CUSTOM_ID: handlers-for-uncaught-exceptions
   :END:

The =run= method of a thread cannot throw any checked exceptions, but it
can be terminated by an unchecked exception. In that case, the thread
dies. Before the thread dies, the exception is passed to a handler for
uncaught exceptions. The handler implements
=Thread.UncaughtExceptionHandler=. If you don't install a handler for an
individual thread, the handler is the thread's =ThreadGroup= object (A
thread group is a collection of threads that can be managed together).

** Thread Priorities
   :PROPERTIES:
   :CUSTOM_ID: thread-priorities
   :END:

A thread inherits the priority of the thread that constructed it. You
can increase or decrease the priority of any thread with the
=setPriority= method. You can set the priority to any value between
=MIN_PRIORITY= (defined as 1 in the Thread class) and =MAX_PRIORITY=
(defined as 10). =NORM_PRIORITY= is defined as 5.

Thread priorities are highly system-dependent. When the virtual machine
relies on the thread implementation of the host platform, the Java
thread priorities are mapped to the priority levels of the host
platform, which may have more or fewer thread priority levels.

Thread priorities may have been useful in early versions of Java that
didn't use operating systems threads. You should not use them nowadays.

* Synchronization
  :PROPERTIES:
  :CUSTOM_ID: synchronization
  :END:

The problem is that access to shared data is not atomic, it can be
interrupted in the middle.

** Lock Objects
   :PROPERTIES:
   :CUSTOM_ID: lock-objects
   :END:

=ReentrantLock=: It is critically important that the unlock operation is
enclosed in a =finally= clause. If the code in the critical section
throws an exception, the lock must be unlocked. Otherwise, the other
threads will be blocked forever.

#+BEGIN_SRC java
  myLock.lock();
  try {
  // critical section
  } finally {
  myLock.unlock();
  }
#+END_SRC

The lock is called reentrant because a thread can repeatedly acquire a
lock that it already owns. The thread has to call unlock for every call
to lock in order to relinquish the lock. Because of this feature, code
protected by a lock can call another method that uses the same locks.
See the [[https://en.wikipedia.org/wiki/Reentrant_mutex][motivation
behind it]].

** Condition Object/Variables
   :PROPERTIES:
   :CUSTOM_ID: condition-objectvariables
   :END:

Often, a thread enters a critical section only to discover that it can't
proceed until a condition is fulfilled. Use a condition object to manage
threads that have acquired a lock but cannot do useful work.

#+BEGIN_SRC java
  // inferior solution

  public void transfer(int from, int to, int amount) {
     bankLock.lock();
     try {
        while (accounts[from] < amount) {
           // unlock and wait
           . . .
        }
        // transfer funds
        . . .
     }
     finally {
        bankLock.unlock();
     } 
#+END_SRC

A lock object can have one or more associated condition. There is an
essential difference between a thread that is waiting to acquire a lock
and a thread that has called =await=. Once a thread calls the =await=
method, it enters a wait set for that condition. The thread is not made
runnable when the lock is available. Instead, it stays deactivated until
another thread has called the =signalAll= method on the same condition.
When a thread calls =await=, it has no way of reactivating itself.

=signal()= notifies one thread, which can be dangerous since if this
thread's condition has not been satisfied, the whole system deadlocks.

#+BEGIN_SRC java
     public void transfer(int from, int to, double amount) throws InterruptedException
     {
        bankLock.lock();
        try {
             while (accounts[from] < amount)
                sufficientFunds.await();
             System.out.print(Thread.currentThread());
             accounts[from] -= amount;
             System.out.printf(" %10.2f from %d to %d", amount, from, to);
             accounts[to] += amount;
             System.out.printf(" Total Balance: %10.2f%n", getTotalBalance());
             sufficientFunds.signalAll();
          }
          finally {
             bankLock.unlock();
          }
       }
#+END_SRC

Every object in Java has an intrinsic lock. If a method is declared with
the =synchronized= keyword, the object's lock protects the entire
method. That is, to call the method, a thread must acquire the intrinsic
object lock. The instrinsic lock has a single associated condition.

#+BEGIN_SRC java
  class Bank
  {
     private double[] accounts;
     public synchronized void transfer(int from, int to, int amount) 
           throws InterruptedException {
        while (accounts[from] < amount)
           wait(); // wait on intrinsic object lock's single condition
        accounts[from] -= amount;
        accounts[to] += amount;
        notifyAll(); // notify all threads waiting on the condition
     }
     public synchronized double getTotalBalance() { . . . }
  }
#+END_SRC

It is also legal to declare static methods as synchronized. If such a
method is called, it acquires the intrinsic lock of the associated class
object. This locks the class object.

Do not use lock, conditions or =synchronized= if possible. There are
other mechanism in =java.util.concurrent=. Use =synchronized= first if
sufficient. Use Lock/Condition for additional power.

Another way to use the intrinsic lock is to use the =synchronized=
block.

#+BEGIN_SRC java
  synchronized (obj) {
  // critical section
  }
#+END_SRC

It's possible to use an ad-hoc lock

#+BEGIN_SRC java
  public class Bank
  {
     private double[] accounts;
     private var lock = new Object();
     . . .
     public void transfer(int from, int to, int amount) {
        synchronized (lock) // an ad-hoc lock, RAII simulation! {
           accounts[from] -= amount;
           accounts[to] += amount;
        }
        System.out.println(. . .);
     }
  }
#+END_SRC

** The Monitor Concept
   :PROPERTIES:
   :CUSTOM_ID: the-monitor-concept
   :END:

A monitor, with all its fields being private, has an associated lock,
which locks all methods in the class, and can have any number of
associated conditions. The Java designer loosely adapted the monitor
concept. Every object in Java has an intrinsic lock and an intrinsic
condition. If a method is declared with the synchronized keyword, it
acts like a monitor method. The condition variable is accessed by
calling =wait=/=notifyAll=/=notify=.

** =volatile= and =final=
   :PROPERTIES:
   :CUSTOM_ID: volatile-and-final
   :END:

Computers with multiple processors can temporarily hold memory values in
registers or local memory caches. As a consequence, threads running in
different processors may see different values for the same memory
location! Compilers can reorder instructions for maximum throughput.
Compilers won't choose an ordering that changes the meaning of the code,
but they make the assumption that memory values are only changed when
there are explicit instructions in the code. However, a memory value can
be changed by another thread.

/Compilers are required to respect locks by flushing local caches as
necessary and not inappropriately reordering instructions/. The
=volatile= keyword offers a lock-free mechanism for synchronizing access
to an instance field.

#+BEGIN_SRC java
  private volatile boolean done;
  public boolean isDone() { return done; }
  public void setDone() { done = true; }
#+END_SRC

The compiler will insert the appropriate code to ensure that a change to
the done variable in one thread is visible from any other thread that
reads the variable. It does not provide any atomicity. You can declare
shared variables as volatile provided you perform no operations other
than assignment.

#+BEGIN_SRC java
  final var accounts = new HashMap<String, Double>();
#+END_SRC

Other threads get to see the accounts variable after the constructor has
finished. Without using =final=, there would be no guarantee that other
threads would see the updated value of accounts---they might all see
null, not the constructed =HashMap=.

** Atomics
   :PROPERTIES:
   :CUSTOM_ID: atomics
   :END:

There are a number of classes in the =java.util.concurrent.atomic=
package that use efficient machine-level instructions to guarantee
atomicity of other operations without using locks. There are methods for
atomically setting, adding, and subtracting values, but if you want to
make a more complex update, you have to use the =compareAndSet= method.

#+BEGIN_SRC java
  largest.updateAndGet(x -> Math.max(x, observed));
#+END_SRC

When multiple threads update a common sum that is used only for later
use not for synchronization, use =LongAdder= to avoid high contention.
Multiple threads can update different summands, and new summands are
automatically provided when the number of threads increases.

#+BEGIN_SRC java
  var adder = new LongAdder();
  for (. . .) 
     pool.submit(() -> {
        while (. . .) {

           . . .
           if (. . .) adder.increment(); 
        }
     });
  . . . 
  long total = adder.sum();
#+END_SRC

The =LongAccumulator= generalizes this idea to an arbitrary accumulation
operation. In the constructor, you provide the operation, as well as its
neutral element. When accumulate is called with value v, then one of
them is atomically updated as =ai = ai op v=, where =op= is the
accumulation operation written in infix form.

** Deadlock
   :PROPERTIES:
   :CUSTOM_ID: deadlock
   :END:

Unsatisfied conditions blocks all threads and the program eventually
hang. Unfortunately, there is nothing in the Java programming language
to avoid or break these deadlocks. You must design your program to
ensure that a deadlock situation cannot occur.

** Thread-Local Variables
   :PROPERTIES:
   :CUSTOM_ID: thread-local-variables
   :END:

Sometimes it is possible to avoid sharing by giving each thread its own
instance, using the =ThreadLocal= helper class.

#+BEGIN_SRC java
  public static final ThreadLocal<SimpleDateFormat> dateFormat
     = ThreadLocal.withInitial(() -> new SimpleDateFormat("yyyy-MM-dd"));

  String dateStamp = dateFormat.get().format(new Date());
#+END_SRC

The first time you call get in a given thread, the lambda in the
constructor is called. From then on, the get method returns the instance
belonging to the current thread.

* Thread-Safe Collections
  :PROPERTIES:
  :CUSTOM_ID: thread-safe-collections
  :END:

You can protect a shared data structure by supplying a lock, but it is
usually easier to choose a thread-safe implementation instead.

** Blocking Queues
   :PROPERTIES:
   :CUSTOM_ID: blocking-queues
   :END:

Many threading problems can be formulated elegantly and safely by using
one or more queues. Producer threads insert items into the queue, and
consumer threads retrieve them. Instead of having every thread transfer
data, insert transfer object into a queue and let one thread handlle the
transfers, no synchronization needed.

A blocking queue causes a thread to block when you try to add an element
when the queue is currently full or to remove an element when the queue
is empty. Blocking queues are a useful tool for coordinating the work of
multiple threads. Worker threads can periodically deposit intermediate
results into a blocking queue. Other worker threads remove the
intermediate results and modify them further. The queue automatically
balances the workload.

Use =put= and =take= when using the queue as a thread management tool.

The =java.util.concurrent= package supplies several variations of
blocking queues. By default, the =LinkedBlockingQueue= has no upper
bound on its capacity, but a maximum capacity can be optionally
specified. The =LinkedBlockingDeque= is a double-ended version. The
=ArrayBlockingQueue= is constructed with a given capacity and an
optional parameter to require fairness. The =PriorityBlockingQueue= is a
priority queue, not a first-in/first-out queue. Elements are removed in
order of their priority. A =DelayQueue= contains objects that implement
the =Delayed= interface. Elements can only be removed from a
=DelayQueue= if their delay has elapsed. Java 7 adds a =TransferQueue=
interface that allows a producer thread to wait until a consumer is
ready to take on an item.

** Efficient Maps, Sets and Queues
   :PROPERTIES:
   :CUSTOM_ID: efficient-maps-sets-and-queues
   :END:

The =java.util.concurrent= package supplies efficient implementations
for maps, sorted sets, and queues: =ConcurrentHashMap=,
=ConcurrentSkipListMap=, =ConcurrentSkipListSet=, and
=ConcurrentLinkedQueue=. These collections return /weakly consistent
iterators/, meaning that these iterators may not reflect all
modifications that are made after they were constructed. The concurrent
hash map can efficiently support a large number of readers and a fixed
number of writers.

To atomically update an entry of a map, use =compute= method:

#+BEGIN_SRC java
  map.compute(word, (k, v) -> v == null ? 1 : v + 1);
#+END_SRC

Also, there are =computeIfPresent= and =computeIfAbsent=.

#+BEGIN_SRC java
  map.computeIfAbsent(word, k -> new LongAdder()).increment(); // lazy evaluation
#+END_SRC

The =.merge()= has a parameter for the initial value if not present in
the map. Otherwise the function passed is called, combining the existing
value and the initial value.

#+BEGIN_SRC java
  map.merge(word, 1L, Long::sum);
#+END_SRC

The Java API provides bulk operations on concurrent hash maps that can
safely execute even while other threads operate on the map. The bulk
operations traverse the map and operate on the elements they find as
they go along.

- =search=

- =reduce=: combines all keys and/or value, using a provided
  accumulation function

- =forEach=: applies a function to all keys and/or values

It is possible to specify a parallelism threshold so that the bulk
operation is parallelized when the map contains more elements than the
threshold.

#+BEGIN_SRC java
  String result = map.search(threshold, (k, v) -> v > 1000 ? k : null);
  map.forEach(threshold, (k, v) -> k + " -> " + v, System.out::println);
  Long sum = map.reduceValues(threshold, Long::sum);

  Integer maxlength = map.reduceKeys(threshold,
     String::length, // transformer
     Integer::max); // accumulator
#+END_SRC

There is no =ConcurrentHashSet= class, The static =newKeySet= method
yields a =Set<K>= that is actually a wrapper around a
=ConcurrentHashMap<K, Boolean>=. (All map values are =Boolean.TRUE=).

#+BEGIN_SRC java
  Set<String> words = ConcurrentHashMap.<String>newKeySet();
#+END_SRC

The =CopyOnWriteArrayList= and =CopyOnWriteArraySet= are thread-safe
collections in which all mutators make a copy of the underlying array so
that iterators have consistent view that it can access without any
synchronization expense.

The =Arrays= class has a number of parallelized operations. The static
=Arrays.parallelSort= method can sort an array of primitive values or
objects. The =parallelSetAll= method fills an array with values that are
computed from a function. =parallelPrefix= method replaces each array
element with the accumulation of the prefix for a given associative
operation.

* Tasks and Thread Pools
  :PROPERTIES:
  :CUSTOM_ID: tasks-and-thread-pools
  :END:

Constructing a new thread is somewhat expensive because it involves
interaction with the operating system. If your program creates a large
number of short-lived threads, you should not map each task to a
separate thread, but use a /thread pool/ instead. A thread pool contains
a number of threads that are ready to run. You give a =Runnable= to the
pool, and one of the threads calls the run method. When the run method
exits, the thread doesn't die but stays around to serve the next
request.

** =Callable=s and =Future=s
   :PROPERTIES:
   :CUSTOM_ID: callables-and-futures
   :END:

A =Runnable= encapsulates a task that runs asynchronously. A =Callable=
is similar to a =Runnable= but returns a value.

#+BEGIN_SRC java
  public interface Callable<V>
  {
     V call() throws Exception;
  }
#+END_SRC

A =Future= returns the results of a function, allows determination of
whether execution has completed, and provides a means to cancel
execution. A =Future= holds the result of an asynchronous computation. A
computation is started and the =Future= is given. The owner of the
=Future= object can obtain the result when it is ready.

#+BEGIN_SRC java
  V get()                             // blocks until the computation is finished
  V get(long timeout, TimeUnit unit)  // blocks until the computation is finished or throws a TimeoutExecutation if timed out before the computation finished.
  void cancel(boolean mayInterrupt)   // 
  boolean isCancelled()
  boolean isDone()
#+END_SRC

If the running thrad is interrupted, both =get=s throw an
=InterruptedException=. Also, it is possible to =cancel= the
computation. Canceling a task involves two steps. The underlying thread
must be located and interrupted. And the task implementation (in the
call method) must sense the interruption and abandon its work. If a
=Future= object does not know on which thread the task is executed, or
if the task does not monitor the interrupted status of the thread on
which it executes, cancellation will have no effect.

One way to execute a =Callable= is to use a =FutureTask=, which
implements both the =Future= and =Runnable= interfaces:

#+BEGIN_SRC java
  Callable<Integer> task = . . .;
  var futureTask = new FutureTask<Integer>(task);
  var t = new Thread(futureTask); // it's a Runnable
  t.start();
  . . .
  Integer result = task.get(); // it's a Future
  // somewhat like a std::packaged_task in C++ except that Future is not explictly got.
#+END_SRC

** Executors
   :PROPERTIES:
   :CUSTOM_ID: executors
   :END:

=Executor= is a simple standardized interface for defining custom
thread-like subsystems, including thread pools, asynchronous I/O, and
lightweight task frameworks. =ExecutorService= provides a more complete
asynchronous task execution framework. An =ExecutorService= manages
queuing and scheduling of tasks, and allows controlled shutdown.

The =Executors= class has a number of static factory methods for
constructing thread pools.

- =newCachedThreadPool=: new threads are created as needed; idle threads
  are kept for 60 seconds;

- =newFixedThreadPool=: The pool contains a fixed set of threads; idle
  threads are kept indefinitely;

- =newWorkStealingPool=: A pool suitable for "fork-join" tasks in which
  complex tasks are broken up into simpler tasks and idle threads
  "steal" simpler tasks;

- =newSingleThreadExecutor=: A "pool" with a single thread that executes
  the submitted tasks sequentially;

- =newScheduledThreadPool=: A fixed-thread pool for scheduled execution;

- =newSingleThreadScheduledExecutor=: A single-thread "pool" for
  scheduled execution.

Submit a =Runnable= or =Callable= to an =ExecutorService= with one of
the following methods:

#+BEGIN_SRC java
  Future<T> submit(Callable<T> task)
  Future<?> submit(Runnable task)
  Future<T> submit(Runnable task, T result)
#+END_SRC

=shutdown= initiates the shutdown sequence for the pool. An executor
that is shut down accepts no new tasks. When all tasks are finished, the
threads in the pool die. If =shutdownNow= is called, the pool then
cancels all tasks that have not yet begun.

The =ScheduledExecutorService= interface has methods for scheduled or
repeated execution of tasks. It is a generalization of =java.util.Timer=
that allows for thread pooling.

An executor can be used to control a group of related tasks. =invokeAny=
method submits all objects in a collection of =Callable= objects and
returns the result of a completed task. =invokeALl= executes the given
tasks, returning a list of =Future=s holding their status and results
when all complete.

#+BEGIN_SRC java
  List<Callable<T>> tasks = . . .;
  List<Future<T>> results = executor.invokeAll(tasks);
  for (Future<T> result : results)
     processFurther(result.get()); // blocks until the result of the first task is available
#+END_SRC

A better way is to use =ExecutorCompletionService= manages a blocking
queue of =Future= objects, containing the results of the submitted tasks
as they become available.

#+BEGIN_SRC java
  var service = new ExecutorCompletionService<T>(executor);
  for (Callable<T> task : tasks) service.submit(task);
  for (int i = 0; i < tasks.size(); i++)
     processFurther(service.take().get()); // take the Future once the result is available
#+END_SRC

*** The Fork-Join Framework
    :PROPERTIES:
    :CUSTOM_ID: the-fork-join-framework
    :END:

The fork-join framework is designed to support computationally intensive
tasks such as image or video processing. Suppose a problem like

#+BEGIN_SRC java
  if (problemSize < threshold) 
     solve problem directly
  else {
     break problem into subproblems
     recursively solve each subproblem
     combine the results
  }
#+END_SRC

#+BEGIN_SRC java
  class Counter extends RecursiveTask<Integer> {
     . . .
     protected Integer compute() {
        if (to - from < THRESHOLD)
        {
           solve problem directly
        }
        else {
           int mid = (from + to) / 2;
           var first = new Counter(values, from, mid, filter);
           var second = new Counter(values, mid, to, filter);
           invokeAll(first, second);
           return first.join() + second.join();
        }
     }
  }
#+END_SRC

Read more at [[https://en.wikipedia.org/wiki/Work_stealing][Work
Stealing]]

** Asynchronous Computations
   :PROPERTIES:
   :CUSTOM_ID: asynchronous-computations
   :END:

*** Computable Futures
    :PROPERTIES:
    :CUSTOM_ID: computable-futures
    :END:

A callback can be registered at =ComputableFuture= and it will be
automatically called once the result is available to process without
blocking.

#+BEGIN_SRC java
  public CompletableFuture<String> readPage(URL url) {
     return CompletableFuture.supplyAsync(() -> {
           try {
              return new String(url.openStream().readAllBytes(), "UTF-8");
           }
           catch (IOException e) {
              throw new UncheckedIOException(e);
           }
        }, executor);
  }
#+END_SRC

A =CompletableFuture= can complete in two ways: either with a result, or
with an uncaught exception. In order to handle both cases, use the
=whenComplete= method.

#+BEGIN_SRC java
  f.whenComplete((s, t) -> {
     if (t == null) { Process the result s; }
     else { Process the Throwable t; }
  });
#+END_SRC

The =CompletableFuture= is called completable because you can manually
set a completion value. (In other concurrency libraries, such an object
is called a promise.)

#+BEGIN_SRC java
  var f = new CompletableFuture<Integer>();
  executor.execute(() ->
     {
        int n = workHard(arg);
        f.complete(n);
     });
  executor.execute(() ->
     {
        int n = workSmart(arg);
        f.complete(n);
     });

  Throwable t = . . .;
  f.completeExceptionally(t);
#+END_SRC

the computation of a =CompletableFuture= is not interrupted when you
invoke its =cancel= method. Canceling simply sets the =Future= object to
be completed exceptionally, with a =CancellationException=. In general,
this makes sense since a =CompletableFuture= may not have a single
thread that is responsible for its completion.

Nonblocking calls are implemented through callbacks. The programmer
registers a callback for the action that should occur after a task
completes. Of course, if the next action is also asynchronous, the next
action after that is in a different callback. The CompletableFuture
class provides a mechanism for composing asynchronous tasks into a
processing pipeline.

#+BEGIN_SRC java
  CompletableFuture<String> contents = readPage(url);
  CompletableFuture<List<URL>> imageURLs = contents.thenApply(this::getLinks);
#+END_SRC

There are many variants of methods for composing completable futures:
=thenApply=, =thenAccepts=, ...

TODO

*** Long-Running Tasks in User Interface Callbacks
    :PROPERTIES:
    :CUSTOM_ID: long-running-tasks-in-user-interface-callbacks
    :END:

User interfaces such as Swing, JavaFX, or Android are not thread-safe.
You cannot manipulate user interface elements from multiple threads, or
they risk becoming corrupted. Each user interface library provides some
mechanism to schedule a Runnable for execution on the UI thread. It is
tedious to implement user feedback in a worker thread, so each user
interface library provides some kind of helper class for managing the
details. After each work unit, update the UI to show prograss. After the
work is finised, make a final stage to the UI.

#+BEGIN_SRC java
  @Override public StringBuilder doInBackground() throws IOException, InterruptedException {
     int lineNumber = 0;
     var in = new Scanner(new FileInputStream(file), StandardCharsets.UTF_8);
     while (in.hasNextLine()) {
        String line = in.nextLine();
        lineNumber++;
        text.append(line).append("\n");
        var data = new ProgressData();
        data.number = lineNumber;
        data.line = line;
        publish(data);
        Thread.sleep(1); // to test cancellation; no need to do this in your programs
     }
     return text;
  }
#+END_SRC

** Processes
   :PROPERTIES:
   :CUSTOM_ID: processes
   :END:

=Process= class executes a command (which cannot be a shell built-in) in
a separate operating system process and intereacts with its own standard
input, output and error streams. =ProcessBuild= class configures a
=Process= object.

#+BEGIN_SRC java
  var builder = new ProcessBuilder("gcc", "myapp.c");
#+END_SRC

=.directory()= changes the =directory= method. =getOutputStream()=,
=getInputStream()= and =getErrorStream()= returns stdout, stdin and
stderr by default. =.redirectIO= is possible.

To modify the environment variables of the process, get the
=environment= from the builder and put or remove entries.

(Java 9) offers a =startPipeline= (shell =|=), which accepts a list of
process builders and chains them together.

=start= fires up a process and =waitFor= waits for the process to finish
and returns its exit value.

=ProcessHandle= gets more information about a process that the program
started. It can get its process ID, its parent process, its children,
and descendants.
