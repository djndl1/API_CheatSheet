#+TITLE: Maven

* Quote Arguments under any Windows shell

* POM Outline

#+begin_src xml
<project>
  <modelVersion>4.0.0</modelVersion>

  <groupId></groupId>
  <artifactId></artifactId>
  <version></version>
  <name></name>

  <properties>
  </properties>

  <dependencies>
    <dependency>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
        </plugin>
    </pluginManagement>
  </build>
</project>
#+end_src

* [[https://maven.apache.org/plugins/index.html][Plugins]]

Maven is not a single monolithic build tool but a plugin execution framework: all work is done by plugins.

** Compiler Plugin

Used to compile the sources of the project using =javax.tools.JavaCompiler=. This plugin has two goals:

- =compiler:compile=: the =compile= phase, compile the main source files

- =compiler:testCompile=: the =test-compile= phase, used to compile the test source files.

*** Set language version and target VM version

=maven.compiler.source= and =maven.compiler.target= in properties.

=maven.compiler.release= (Since JDK 9): Java SE framework version, i.e. usable API.

*** Pass Javac arguments

#+begin_src xml
<configuration>
  <compilerArgs>
    <arg>...</arg>
  </compilerArgs>
</configuration>
#+end_src

*** Set Toolchain

#+begin_src xml
<configuration>
  <verbose>true</verbose>
  <fork>true</fork>
  <executable><!-- path-to-javac --></executable>
  <compilerVersion>1.3</compilerVersion>
</configuration>
#+end_src

Or use the toolchain plugin.

* Create Projects

use archetypes =mvn archetype:generate=, basically templates. Archetypes are additive in that another archetype can be added to an existing project.

* Build

- =mvn validate=: validate the project

- =mvn clean=: clean up artifacts generated by maven

- =mvn compile=: compiler plugin, compile source files

- =mvn test=: run the unit test code

- =mvn integration-test=: run the integration test code

- =mvn package=: take the source code and package into a distribution format

- =mvn verify=: verify the generated package

- =mvn install=: install the package into the local repository for other projects to use

- =mvn deploy=: deploy the package to a remote repository

- =mvn site=: generate a site documentation
