#+TITLE: Database

* JDBC =java.sql=

** JDBC Driver Types

- *type 1*: translates JDBC to ODBC, which requires a ODBC driver and related configuration.

- *type 2*: partly Jasva nad partly in native code.

- *type 3*: pure Java library that uses database-independent protocol to communicate with database requests to a server component, which then translates the requests into a database-specific protocol.

- *type 4*: a pure Java library that translates JDBC requests directly to a database-specific protocol.

** JDBC Configuration

- Database URLs: ~jdbc:subprotocol:other stuff~ e.g. ~jdbc:derby://localhost:1527/COREJAVA;create=true~

- Registration
  + automatically if there is a file in ~META-INF/services/java.sql.Driver~.
  + ~Class.forName("org.postgresql.Driver")~; ~java. -Djdbc.drivers=org.postgresql.Driver ProgramName~; ~System.setProperty("jdbc.drivers", "org.postgresql.Driver")~

** JDBC Connection

- use =java.sql.DriverManager=

- A ~Statement~ has at most one *open* result set. Do not fuss with multiple concurrent result sets (~Statements~) (there's a limit to the number of statements per connection).

- Closing a =Connection= closes =Statement=​s, which in turn closes =ResultSet=​s.

** Error Handling

Each ~SQLException~ has a change of ~SQLException~ objects that are retrieved with ~getNextException~.

- ~SQLException~ implments the ~Iterable<Throwable>~ for easy retrival.

- ~SQLException~ is orgainized into a hierarchy.

** Oracle JDBC

Use thin client driver.

- Thin Client Driver: type 4 pure Java implementation, supports only TCP/IP.

- OCI Client Driver: type 2 driver, supports IPC, named pipes, TCP/IP, IPX/SPX.

- Server-Side driver: type-2 and type-4, for use with Java on the database.

** Basic steps

- Open Connection =DataSource.getConnection()=

- Create a Statement =Connection.createStatement()= or a prepared statement =Connection.prepareStatement=

- prepare parameters =pstmt.setXXX=

- execute SQL
  + =executeQuery=: query
  + =executeUpdate=: DDL or DML that returns an update count
  + =execute=: other

- Processing the result set: =while (resultSet.move()) { resultSet.getXXX(); }=

- close the result set, the statement and the connection.

** SP Calls

- =Connection.prepareCall=

 #+begin_src java
// JDBC escape syntax
CallableStatement cs1 = conn.prepareCall
                       ( "{call proc (?,?)}" ) ; // stored proc
CallableStatement cs2 = conn.prepareCall
                       ( "{? = call func (?,?)}" ) ; // stored func
// PL/SQL block syntax
CallableStatement cs3 = conn.prepareCall
                       ( "begin proc (?,?); end;" ) ; // stored proc
CallableStatement cs4 = conn.prepareCall
                       ( "begin ? := func(?,?); end;" ) ; // stored func
 #+end_src

** Transactions

- by default auto-commit mode. no =commit= or =rollback= is allowed. =Connection.setAutoCommit()=

- implicit commit (oracle)
  + auto-commit disabled and connection closed
  + any DDL

** Common Concepts

*** =java.sql.ResultSet=

A table of data representing a query result, a cursor pointing to a row in the result.

- Column indices are one-based, column names are case-insensitive.
