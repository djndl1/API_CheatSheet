#+TITLE: Database

* JDBC =java.sql=

** Oracle JDBC

Use thin client driver.

- Thin Client Driver: type 4 pure Java implementation, supports only TCP/IP.

- OCI Client Driver: type 2 driver, supports IPC, named pipes, TCP/IP, IPX/SPX.

- Server-Side driver: type-2 and type-4, for use with Java on the database.

** Basic steps

- Open Connection =DataSource.getConnection()=

- Create a Statement =Connection.createStatement()= or a prepared statement =Connection.prepareStatement=

- prepare parameters =pstmt.setXXX=

- execute SQL
  + =executeQuery=: query
  + =executeUpdate=: DDL or DML that returns an update count
  + =execute=: other

- Processing the result set: =while (resultSet.move()) { resultSet.getXXX(); }=

- close the result set, the statement and the connection.

** SP Calls

- =Connection.prepareCall=

 #+begin_src java
// JDBC escape syntax
CallableStatement cs1 = conn.prepareCall
                       ( "{call proc (?,?)}" ) ; // stored proc
CallableStatement cs2 = conn.prepareCall
                       ( "{? = call func (?,?)}" ) ; // stored func
// PL/SQL block syntax
CallableStatement cs3 = conn.prepareCall
                       ( "begin proc (?,?); end;" ) ; // stored proc
CallableStatement cs4 = conn.prepareCall
                       ( "begin ? := func(?,?); end;" ) ; // stored func
 #+end_src

** Transactions

- by default auto-commit mode. no =commit= or =rollback= is allowed. =Connection.setAutoCommit()=

- implicit commit (oracle)
  + auto-commit disabled and connection closed
  + any DDL

** Common Concepts

*** =java.sql.ResultSet=

A table of data representing a query result, a cursor pointing to a row in the result.

- Column indices are one-based, column names are case-insensitive.
