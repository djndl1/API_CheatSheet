#+title: Bash Basics

* Features Particular to Bash

- =[[= conditional

- shell arithmetic with one of the shell expansions or =let=

- =alias= and =unalias=: aliases are expanded upon a command/function is read.

- one-dimensional non-contiguous array variable declared by =declare=

- directory stack with =pushd=, =popd=, and =dirs=

- POSIX mode =set -o posix=, =--posix= or the envvar =POSIXLY_CORRECT= makes =bash= try to behave as compliant as possible
to the POSIX stnadard.

- restricted shell: certain operations and features are disallowed or disabled

* Startup Files

A shell may be a login shell or a non-login one and interactive or
non-interactive at the same time.

- Login Shells
  + =/etc/profile= the system login file
  + =~/.bash_profile=, =~/.bash_login=, =~/.profile=: the user login files. First readable file is read
  + =~/.bash_logout= upon logout
  + OpenSSH opens a non-login shell with a following command argument

- Interactive Non-Login Shells
  + =~/.bashrc= the environment file. A login shell may read this file inside =.profile=
  + It does not read =/etc/profile=, but usually it inherits a login shell.

- Non-Interactive Shell reads an additional =BASH_ENV= file
  + a shell may be non-interactive and login or non-login. So it may reads
    =/etc/profile= and others.

- As POSIX =sh=
  + login: =/etc/profile= + =~/.profile=
  + interactive: =$ENV=

* Interactive Shells

echo =$-= to check if the current shell is interactive (the result contains an
=i=).
An interactive shell has some features enabled:

- /job control/ enabled

- prompts are set

- commands are read from the command line with =readline=

- the =ignoreeof= option is checked instead of exiting immediately upon EOF.

- /command history/ and /history expansion/ enabled

- /alias expansion/ enabled

- in the absence of traps, =SIGTERM= is ignored, =SIGINT= is caught and handled.

- =SIGHUP= to all jobs on exit is configured with =huponexit=.

- Redirection errors of built-in commands do not cause the shell to exit

- Failure of =exec= do not exit the shell.

- Parser syntax errors do not cause the shell to exit.

* Commands

** Classification

*** Builtin Commands

Contained within the shell itself.

POSIX-mode bash requires special builtins be found before shell functions during command
looup; if a special builtin returns an error status, a non-interactive shell
exits; variable assignments before a (special builtin ???) command stay in effect after the command completes.

TODO

*** Scripts

A new bash process is forked to execute a script. A script name as an argument
to =bash= is searched first in the current directory and then in the =PATH= variable.

*** Functions

Executed in the current shell context.

*** Other Programs

Executed in a new process.

** Execution Steps

Input is separated by /metacharacters/ and tokenized. Then alias expansion is
performed. Various shell expansions are then performed. Redirection is performed
if necessary. Variable assignments are saved. Commands are then executed and the
shell waits for them to complete.

*** Command Search

- search in the known function list

- search in the builtins

- search the =PATH=, cached in a hash table (=hash=).

- error 127 if not found

- executes the command in a separate execution environment; if the file is not
  executable and not a directory, it is assumed a shell script.

** Command History

- =fc=, =history= show history

- =fc -s event_number= reexecute the numbered command.

- =^R=, =^S= searches the history, for the next candidate, press =^R= or =^S= again.

* Shell Expansions

** Brace Expansion

TODO

** Tilde Expansion

TODO

** Parameter and Variable Expansion

TODO

** Command Substitution

TODO

** Arithmetic Expansion

TODO

** Word Splitting

TODO

** Filename Expansion

TODO

* Developing Good Scripts

Pay attention to:

- User interaction

- Information storage

- Possible file creation

- Commands to use

- User notification

** Debugging

*** Verbose Output and Traces

Traces of each command plus its arguments are printed to stdout after the
commands have been expanded but before execution. This option may also be
enabled with =set -x= or =set -o xtrace= and disabled with =set +x= or =set +o xtrace= to trace only part of a script.
Other options such as =-v= (=verbose=) are also avaiable.

*** Source-Level Debugger

bash supports extended debugging mode by loading the debugger profile.

- [[https://github.com/rocky/bashdb][bashdb]] :: a full-fledged debugger

* Job Control

Enabled by the =monitor= option. Job control is a shell feature to allow
multiple processes to run in a single shell: foreground/background (=fg=, =bg=,
=&=), suspend (=suspend=, =^Z=), status (=jobs=, =ps=). =$$= displays the current
shell PID, =$!= shows the the PID of the last command moved to the background.

Each command (job) entered is identifiied by a /job number/, (/job ID/). A job
refers to all the processes that are necessary to interpret an entire command
line. Jobs are controlled by the shell.

A foreground job may be suspended by =^Z=, then resumed by =fg=. When the user
logs out, all suspended jobs are terminated automatically. The current shell may
be suspended with =suspend= if it is not a login shell. =bg= is useful when the
command is not started with a =&= but later needs moving to the background (by
first suspending it).
