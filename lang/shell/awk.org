#+title: Awk

A sequence of patterns and actions that tell what to look for in the input data
and what to do when it's found. A set of files arae searched for lines matched by
any of the patterns and the corresponding action is performed on a matching line.

* Basics

- Pattern-action statement: =pattenr { action }=. Each awk program is a sequence of one or more pattern-action statements.
  + a pattern without an action prints all lines matching the pattern
  + actions are separated by newlines or semicolons

#+begin_src awk
ip a | awk '$1 == "inet" { print $2} '
awk -f programFile inputfiless...
#+end_src

- =$1=, =$2= ... fields; =$0= the entire line; =NF=: the number of fields; =$NF=: the last field. Any expression can be used after =$= to denote a field number; =NR=: number of lines

#+begin_src awk
{ print } # or
{ print $0 }
#+end_src

- the C-style =printf= format print is also supported.

- =BEGIN= matches before the first line of the first input file; =END= matches after the last line of the last file;
  Used to do anything before/after the actual matching.

- declaration is not necessary for variables

  #+begin_src awk
{ pay += $2 * $3 }; END { printf "total pay %.2f\n", pay } # pay is defined the first time it's used and is used afterwards
  #+end_src

- string are concatenated by a blank between them.

#+begin_src awk
'{ names = names $1 " " }; END { print names }'
#+end_src

- NR retains its value in an =END= action, =$0= does not (but =gawk= and =mawk= does preserve =$0=)

#+begin_src awk
# show the last line
{ last = $0 }; END { print last } # END { print $0 } works for some implementation
#+end_src

- C-style if-else, while and for clauses are available.

- Arrays are more powerful than C arrays, with automatic resizing.

#+begin_src awk
{ line[NR] = $0 }
END {
    for (i = NR; i > 0; i--) {
        print line[i]
    }
}
#+end_src


** Some Oneliners

#+begin_src awk
END {print NR } # print line count

NR = 10 # print the tenth line

# print the count of lines containing "Beth"
/Beth/ { nlines += 1 }
END { print nliens }
#+end_src

* Language

- The opening brace of an action muyst be on the same line as the pattern it accompanies.

- statements can be broken after backslashes, commas.

** Patterns

- =BEGIN=, =END=: a way to gain control for initialization and wrapup.
  + =FS= can be changed at =BEGIN=.

- /expression/: statements are executed at each input line where the expression evaluates to true.

- =/regex/=: lines are matched when they conbtain a string matched by the regex.

- compound pattern: expressions with =&&=, =||=, =!= and parentheses.

- =pattern1, pattern2=: a range pattern that starts from the line matched by =pattern1= to the line matched by =pattenr2= inclusively.

*** Regex Matching

- =/regex/=: matches the input line. In a matching expression, a quoted string can normally be used interchangeably with a regex enclosed in slashes. However, in quoted strings, =\\= is needed to escape a character.One level of protecting backslashes is removed when a quoted string is parsed by awk.

- =expression ~ /regex/=: matches the string value of the expression

=expression !~ /regex/=: matches if the string value of the expression does not contain a substring matched by the regex.

Gawk uses the POSIX extended regex.

- metacharacters: =\=, =^=, =$=, =.=, =[=, =]=, =|=, =(=, =)=, =*=, =+=, =?=

- A basic regex
  + a nonmetacharacter that matches itself
  + an escape character e.g. =\t=
  + a quoted metacharacter: =\*=
  + =^= and =$= that matches the beginning and the end of a string
  + =.=: any single character
  + a character class. Quoting metacharacters is not always needed inside a character class.

- operators conmbine regexes into larger ones (=A= and =B= are regexes): ordered by precedence from the lowest to the highest
  + alternation: =A|B= matches =A= or =B=
  + concatenation: =AB=
  + closure =*=: matches zero or more of the previous regex.
  + positive closure =+=: one or more of the previous regex.
  + zero or one =?=
  + grouping =(r)=: matches the same strings as the pattern =r= does.
    parentheses can often be omitted since groupings take precedence.

- =$1 ~ $2= is a useful way to test regexes.

*** Range Pattern

A range pattern matches multiple lines. If the second pattern is not found, the match goes on.

** Action

- expression:
  + variables:
    - builtin: =FNR=, =NF= (reset when =$0= changes or when a new field is created by assigning to a field variable), =NR=. =RLENGTH=/=RSSTART= change as a result of =match= call.
    - variables are initialized by defaut to =""= or =0=freebird
  - arithemtic operators: =^=: exponentiation
  - =i in arr= is supported.

- Arrays are string-subscripted associative arrays. An array element may be deleted with =delete array[subscript]=.

- Control flow: all C constructs are supported
  + =next=: the next iteration of main input loop
  + =exit=: to the =END= action; exit the program if already within the =END= action.

- user defined function
  + scalars are passed by values while arrays are passed by reference.
  + function-local variables are only created through the paramter list (strange design).

- output
  + =>= and =>>= are used with =print=/=printf= to write into files.
  + =|= pipes are also used with printing functions.
  + files are pipes are identified by their names (file name or pipe command string)  inside a awk program.
  = =close= a file/pipe is necessary if the file is read later.

- multiline record
  + =RS=: record separator, by default =\n=

* Data Processing

** Sum numbers of each column

#+begin_src awk
function isnum(n) { return n ~ /^[+-]?[0-9]+\.?[0-9]*$/ }
NF > 0 && maxfld == 0 {
    maxfld = NF
    for (i = 1; i <= NF; i++) {
        numcol[i] = isnum($i)
    }
}
NF > 0 {
    for (i = 1; i  <= NF; i++) {
#        if (numcol[i]) {
            sum[i] += $i
 #       }
    }
}
    END {
        for (i = 1; i <= maxfld; i++) {
            if (numcol[i]) {
                printf("%g", sum[i]);
            } else {
                printf("--")
            }
            printf("%s", i == maxfld ? "\n" : "\t")
        }
    }
#+end_src

** Histogram of Integers

#+begin_src awk
function replicate(n, s, t) {
    while (n-- > 0) {
        t = t s
    }
    return t
}

NF > 0 && minidx == 0 {
    minidx = $1
    maxidx = $1
}

{
    x[int($1)]++
    if ($1 > maxidx) maxidx = int($1)
    if ($1 < minidx) minidx = int($1)

    if (x[$1] > maxcnt) maxcnt = x[$1]
    if (x[$1] < mincnt) mincnt = x[$1]
}

END {
    segment = (maxidx - minidx) / 10
    scale = (maxcnt - mincnt) / 10

    printf("Max %d, Min %d\n", maxidx, minidx)

    for (i = minidx; i <= maxidx; i += segment) {
        cnt = 0
        for (j = int(i); j < i + segment; j++) {
            cnt += x[j]
        }
        printf("%2d - %2d: %d %s\n", i, i + segment - 1, cnt, replicate(cnt / scale, "*"))
    }
    cnt = 0
    for (j = i; j < maxidx ; j++) {
            cnt += x[j]
    }
    if (i < maxidx)
        printf("%2d - %2d: %s\n", i, maxidx, replicate(cnt / scale, "*"))
}

#+end_src

** Numbers and commas

#+begin_src awk
function addcomma(x, num) {
    if (x < 0)
        return "-" addcomma(-x)

    num = sprintf("%.2f", x)
    while (num ~ /[0-9][0-9][0-9][0-9]/) {
        sub(/[0-9][0-9][0-9][,.]/, ",&", num)
    }
    return num
}

function checkcomma(x, num) {
    if (x ~ /^,/ || x ~ /,$/) return 0
    if (x < 0) return checkcomma(-x)

    num = x
    while (num ~ /,[0-9][0-9][0-9]/) {
        sub(/,[0-9][0-9][0-9]/, "", num)
    }

    if (num ~ /^[0-9][0-9][0-9][0-9]/) {
        return 0
    } else {

        return num ~ /^[0-9]{0,3}\.?[0-9]*$/
    }
}
#+end_src
