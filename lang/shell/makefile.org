#+TITLE: MakeFile

* Overview

Make acts according to the relationships between the elements of the program and
the timestamps of source files, intermediate files and final products to redo
and produce the desired output.

a makefile consists of rules: how and when to remake certain files
which are the targets of the particular rule.

#+begin_src makefile
# target is by default a file to be made, not a target status unless it is a phony target
target ... : [prerequisites] # prerequisite: file used as input to create the target.
	recipe                 # an action that make carries out, tab indented
	...
	...
#+end_src

by default =make= starts with the first target not prefixed with =.= (the default goal).

The compilation must be done if the prerequisite file is more recent than the target file.

Make has an implicit rule for updating a =.o= file from a correspondingly named =.c= file using
a =cc -c= command. It also supports the =-l= dependency to find appropriate libraries.

* The =Makefile= File

** Structure

- /explicit rules/: when and how to remake one or more targets with specified prerequisites
  using recipes.

- /implicit rules/: when and how to remake a class of files based on their names.

- /variable definitions/: a text string value for a variable that can be substituted into the text later

- /directives/: an special instruction
  + reading another makefile with the =include= directive.
  + control flow

- /comments/:

** Process

Make runs in two passes:

1. all makefiles are read: variables and values, implicit and explicit rules. Then a dependency graph is constructed.

2. Make uses these internal structures to determine what targets will need to be rebuilt and what rules to invoke.

This two-phase process has some impact on how variables are expanded: expansion during the first phase is /immediate/ while in the second phase or in a later immediate context is /deferred/.

- the target and prerequisite sections are expanded immediately

- the recipe used to construct the target is always deferred.

** Rules

#+begin_src makefile
targets : prerequisites [; recipe]
	recipe
	...
#+end_src

- rule:
  - rules can be /explicit rules/, /implicit rules/ (builtin pattern rules or
    suffix rules) or /pattern rules/ (target matching are based on
    wildcards instead of explicit filenames)
  - wildcard may seem useful but may be misleading: e.g. =*.o: abc.h= doesn't
    work as expected if no object files are there.
  - /static pattern rules/: =targets : target_pattern : preq_pattern=; differ
    from normal pattern rules only in that the rule is limited to the specified targets.
  - /double-colon rules/ (obscure and not useful): rules with the same target are executed independently
    in the order they appear in the makefile.
    If a rule has no prerequisites, it always gets executed.
  - /suffix rules/: legacy rules, apply to only a list of suffixes =.SUFFIXES=.
    + double suffix rule: =.c.o= means =%.o : %.c=
    + single suffix rule: =.p:= means =%: %.p=
  - /make depend/: some C compilers provide =-M= or =-MM= to generate a dependency list on included files.
    Some =Make= generates a =depend= file before compilation. A rule can be written that generates a =source.d=
    makefile for each source file and include them.

#+begin_src makefile
# The built-in rules are all instances of pattern rules.
%.o: %.c
        $(COMPILE.c) $(OUTPUT_OPTION) $<
%.c: %.l
        @$(RM) $@
        $(LEX.l) $< > $@
%: %.o
        $(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@


#+end_src

*** Pattern

- =%=: any number of any characters; =%= in the prerequisites refers to the
  matching stem.

*** Target

- A target is out of date if it does not exist or
  if it is older than any of the prerequisites (by comparison of last-modification times).
  + /phony target/: one that is not really the name of a file rather than a name for a recipe
    to be executed. Otherwise, if a file with the target name is present, no
    action will be performed. A phony target should not be the prerequisite of a
    real target since it's always out of date, otherwise it would be
    unnecessarily executed.
    + use cases: cleanup, message output
  + /empty target/: does have an output file so that it is not always updated
    but the main purpose is still to take
    some action.
  + a target without prerequisites and recipes are always considered updated and can be used
    as a replacement for the =.PHONY= target.
  + a single rule can contain multiple targets that shares the same recipe with only a different
    target variable =$@=. It does not mean these two targets are the same but
    just a shorthand to avoid defining the same rule multiple times.
  + a target can have only one recipe. An extra rule with just prerequisites can be used to give
    a few extra prerequisites to many files at once.

#+begin_src makefile
# an empty target that only reprints if the source changes
print: *.[hc]
        lpr $?
        touch $@
#+end_src

*** Recipes

- recipes:
  + each line must start with a tab.
  + each line is executed by invoking a new subshell chosen with =SHELL= (the use of =cd= inside a recipe is thus dubious).
  + For =@=-prefixed lines, the echoing of the content of that line is suppressed
    since normally each line of a recipe is printed. Typically used only with =echo=.
  + parallel execution with =-j= executes many recipes simultaneously.
  + prefix a recipe line with =-= to ignore any error of that line.
  + to invoke a make inside a makefile, always use the =MAKE= variable. =make= automatically passes down
    variable values that were defined on the command line by putting them in =MAKEFLAGS=. =-j= is automatically included
    and only the specified number of jobs are being executed altogether for all running =make=.

** Variables

=$(variable)=, =${variable}= and =$variable= work but =$(variable)= has been the norm.

*** Automatic Variables

Variables that are set by =make= after a rule is matched, which provides access
to elements from the target and prerequisite lists.

- =$@=: the target

- =$<=: the first prerequisite

- =$^=: the filenames of all prerequisites separated by spaces with duplicates
  removed. =$+= retains the duplicates. =$?= are those of the updated prerequisites.

- =$*=: the stem of the target filename (without its suffix).

They have the =D= variant and the =F= variant that extract the
directory/filename portion of the filename.

*** VPATH

- the =VPATH= variable: a list of directories to search when =make= needs a file
  (targets and prerequisites). Different directories may contains synonymous files.

- the =vpath= directive: works with patterns

#+begin_src makefile
vpath %.c src
vpath %.l src
vpath %.h include
#+end_src
