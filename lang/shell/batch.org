#+title: Batch

* Basics

- =%COMSPEC%= for the full path of =cmd.exe=; Run the script with =cmd.exe=
  to start a child process and use =/C= (run the command and then close,
  here to prevent =EXIT= closes the host window)

- Use =.cmd= instead of =.bat=

- =REM= for comments but =::= can also be employed most of the time.

- =@ECHO OFF= to suppress printing and restore with =ECHO ON=

- print-debugging is the only debugging.

** CMD Tricks

- =ESC= to clear history recall

- =F8=: completes the recall

- =F7=: show history

- =doskey=: make macros (aliases)
  + =/macrofile=macrofile=
  + =Alt-F10= to delete all macros, =doskey macro== deletes a single macro
  + =/macros= list all macros
  + =/history=: show history

- =HKCU:software\Microsoft\Command Processor\AutoRun= configures the profile script.

*** Editing Tips

- Hold =SHIFT= and use arrow keys, =HOME=, =END=, =PageUp=, =PageDown= to select text. =Ctrl-M= starts the mark mode.
  Press =ENTER=, =Ctrl-Shift-C=, =Ctrl-Insert= to copy the selection to the clipboard. =ESC= cancel the selection.
  Left click to select and right click to paste. =Ctrl-V= or =Shift-Insert= to paste.

- =Ctrl-Up=, =Ctrl=Down=: scroll the console window up/down.

- =Ctrl-End=, =Ctrl-HOME=: delete to the end/beginning of the line

- =Ctrl-Z=/=F6=: end-of-file character

*** Useful Commands

- =type=: cat

- =assoc= (the associated file type with an extension) and =ftype= to determine the path that can execute a certain type of files

- =clip=: redirect the output of a command or the contents of a file to the clipboard

- =runas=: run a command as another user (typically the administrator)

- =dir=, =copy= (strange behavior!!!), =xcopy=, =move=, =rename=, =del=

- =pushd=, =popd=; =cd=/=chdir=

- =wmic=: WMI operations from the command line

- =reg=: manipulate the registry key

- =taskkill=: find processes and kill them; =tasklist=: list running processes. The two can be used together.

- =echo=: commands and keywords in a batch file are normally echoed to stdout. Prefixing a command with =@= turns the echo off. =@echo off= turns the global echo off. =echo.= prints an empty line. To dislay a string without printing the final newline, =set /p "=string" < nul=

- =exit=: =/B= exit from only the current batch file or function. The =ErrorLevel= variable is set by =exit= with an error code. =verify >nul= can set the =ERRORLEVEL= to zero.

- =setlocal enableextensions/disableextensions=: additional language features

- =(stmt1 stmt2 stmt3)=: compound statements. The error code of the compound statement is the error code of the last command.

- conditionally chaining commands: =&&= the second runs if the first succeeds; =||= the second runs if the first fails. =&= unconditionally joins two commands.

- batch uses =^= to escape special characters.

** Variables

Undeclared/uninitialized variables is an empty string.
To delete a variable, set it to nothing ~set variableName=~

#+begin_src shell
REM set clobbers any existing variables
set foo=bar

set /A four=2*2

REM without an argument, `set` lists all existing variables
REM with an argument but without the assignment, it lists the argument variable
#+end_src

- By default, variables in a script are automatically exported to its parent CMD. =setlocal= starts a local scope and =endlocal= ends the scope. One of the uses of local scopes is to override a global variable like =PATH=.

*** Some Common Variables

**** Current Context

- =CD=: current directory

**** User Environment

- =USERPROFILE=: the home directory; =USERNAME=; =USERDOMAIN=; =APPDATA=; =LOCALAPPDATA=

- =HOMEDRIVE=, =HOMEPATH=

**** System Variables

- =OS=;

- =ProgramFiles=, =ProgramFiles(x86)=: the Program Files folder

- =ProgramData=

- =windir=, =SystemRoot=: the windows directory

- =SystemDrive=, =SystemRoot=

- =TMP=, =Temp=

**** PATH

- =PATH=;

- =PATHEXT=: executable file types without the need to type the extension suffix.

**** Argument Variables

- =%0=, =%1= ... are arguments. Arguments after =$9= is only accessible by first =SHIFT= the arguments. =$*= For all arguments
  + =SHIFT= shifts arguments to the left.

#+begin_src shell
@echo %*
@echo off
:repeat_shift
	if "%1" == "" goto shift_end
	echo %1

	shift

	goto repeat_shift
:shift_end
#+end_src

**** Hardware

- =NUMBER_OF_PROCESSORS=

- =PROCESSOR_ARCHITECTURE=

- =PROCESSOR_IDENTIFIER=

- =PROCESSOR_REVISION=, =PROCESSOR_LEVEL=

**** Batch-Specific

- =ComSpec=: the full path of the current =cmd.exe= or =COMMAND.COM= (on DOS).

-  =DATE=, =TIME=

*** Delayed Variable Expansion

By default, variables are evaluated on reading the statements, not on executing the statements. Thus, it is problematic to modify a variable inside a compound statement and evaluate it immediately since it's evaluated when reading the clause before the modification is even executed.

#+begin_src shell
@echo off

set value=1 (1)

if "%value%"=="1" ( (2)
   set value=2 (3)
   echo The value inside the IF block is '%value%' (4)  REM echoes 1
   echo Delayed expansion into '!value!'
) (5)

echo The value after the IF block is '%value%' (6)
#+end_src

To use a more natural evaluation order, =setlocal ENABLEDELAYEDEXPANSIION= or =CMD /V:ON= and expand a variable with =!VarName!=.

*** Two-Level Expansion

#+begin_src shell
set VARNAME=Name
set Name=Albert

call echo %%VARNAME%%
#+end_src

*** Variable Substitution

The command line arguments and the =FOR= loop variables can be expanded differently by using certain modifiers =%~{Modifier}{ArgumentNumber or VariableName}=.

+ see =FOR /?= or =CALL /?= for some variable substitution

+ =%~I=: removing any surrounding quotes

+ =%~fI=: fully qualified path name

+ =%~dI=: drive letter

+ =%~pI=: path

+ =%~nI=: filename

+ =%~xI=: file extension

+ =%~sI=: short names

+ =%~aI=: file attributes

+ =%~tI=: date/time of file

+ =%~$PATH:I=: get the fullpath of the file if it's in the =PATH=.

These substitutions can be combined: =%~dpI= to get the parent path.

#+begin_src shell
@echo off

echo The first argument as is: %1

REM Start modifiers example
echo 1. without quotes: %~1
echo 2. fully qualified path name: %~f1
echo 3. drive letter: %~d1
echo 4. path part: %~p1
echo 5. just the file name part: %~n1
echo 6. just the extension part: %~x1
echo 7. file's attributes: %~a1
echo 8. file's date and time: %~t1
echo 9. file's size: %~z1
echo 10. file path in the PATH environment variable search: %~$PATH:1
echo 11. file's full path: %~dp1
echo 12. file's name and extension part: %~nx1
echo 13. 'dir' like modifier: %~ftza1
echo 14. fully qualified script path: %~dpnx0
#+end_src

#+begin_src shell
djn_dl@DJN D:\CodeSpace\batch>variable_substitution.cmd "variable_substitution.cmd"
The first argument as is: "variable_substitution.cmd"
1. without quotes: variable_substitution.cmd
2. fully qualified path name: D:\CodeSpace\batch\variable_substitution.cmd
3. drive letter: D:
4. path part: \CodeSpace\batch\
5. just the file name part: variable_substitution
6. just the extension part: .cmd
7. file's attributes: --a--------
8. file's date and time: 2022/09/21 22:15
9. file's size: 596
10. file path in the PATH environment variable search: D:\CodeSpace\batch\variable_substitution.cmd
11. file's full path: D:\CodeSpace\batch\
12. file's name and extension part: variable_substitution.cmd
13. 'dir' like modifier: --a-------- 2022/09/21 22:15 596 D:\CodeSpace\batch\variable_substitution.cmd
14. fully qualified script path: D:\CodeSpace\batch\variable_substitution.cmd
#+end_src

** Return Codes

- =%ERRORLEVEL%=

#+begin_src bat
IF %ERRORLEVEL% NEQ 0 (
    REM do something to handle an error
)

IF %ERRORLEVEL% EQU 9009 (
    REM handle a certain error
)

SomeCommand.exe && echo Success

REM execute under failure
SomeCommand.exe || Exit /B 1  REM /B exit the current script
SomeCommand.exe || GOTO :EOF        REM jump to the end of the file and return 1
#+end_src

#+begin_src bat
@echo off
setlocal enableextensions

REM error codes of 2's power allows for easy bitwise combination
set /A errno=0
set /A ERROR_HELP_SCREEN=1
set /A ERROR_COMMAND_NOTFOUND=2
set /A ERROR_OTHERCOMMAND_FAILED=4

SomeCommand.exe
IF %ERRORLEVEL% NEQ 0 SET /A errno^|=%ERROR_SOMECOMMAND_NOT_FOUND%

OtherCommand.exe
IF %ERRORLEVEL% NEQ 0 (
    SET /A errno^|=%ERROR_OTHERCOMMAND_FAILED%
)

EXIT /B %errno%
#+end_src

** stdio

- =stdin= (0), =stdout= (1), =stderr= (2)

- =>=: redirects, =>>= appends

- =2>&1=: combine =stderr= and =stdout=

- =<=: =stdin= redirection

- =NUL=: a pseudofile similar to =/dev/null=

- =|=: piping
  + =type con > output.txt=: =type= (=cat= under Unix) the console input and output to a file

** IF-Conditional

#+begin_src bat
REM IF /? for help

IF EXIST "dfdfasf.txt" ECHO FOUND

IF NOT EXIST "dfdfasf.txt" ECHO NOT FOUND

IF EXIST "DFa" (
         ...
   ) ELSE (
     ...
   )

IF "%var%"=="" (...)   REM if set

IF NOT DEFINED var (...)

IF "%var%" == "a string" ( ... )

IF "%var%" EQU/NEQ/GEQ/LEQ "1" (  )

IF /I "%ERORRLEVEL%" NEQ "0" ( ... ) REM case insensitive string comparison
#+end_src


** Loop

- =GOTO= and =:label= are there but not used much anymore.

- =FOR=: =%I= in the command and =%%I= in a batch file

#+begin_src bat
FOR /D %I IN ("%USERPROFILE%"\*) DO @ECHO %pI      REM looping through directories
FOR /R "%TEMP%" %I IN (*) DO @ECHO %I        REM recursive loop through subfolder
#+end_src

** Function

There is no strict functions, but labels and the =call= keyword can emulate it.
Put an =EXIT /B= before any function to avoid falling through. There is not way to return anything other than an error code. A function is more like a script.

#+begin_src bat
@ECHO OFF
SETLOCAL

:: script global variables
SET me=%~n0
SET log=%TEMP%\%me%.txt

:: The "main" logic of the script
IF EXIST "%log%" DELETE /Q %log% >NUL

:: do something cool, then log it
CALL :tee "%me%: Hello, world!"

:: force execution to quit at the end of the "main" logic
EXIT /B %ERRORLEVEL%

:: a function to write to a log file and write to stdout
:tee
ECHO %* >> "%log%"
ECHO %*
EXIT /B 0
#+end_src

** Logging

Use the =tee= implementation above. Use the =DATE= and =TIME= variables for time and add a prefix to any logging message =script: some message=.freebird
