#+title: Posix Shell
#+bibliography: posix_shell_ref.bib


#+begin_quote
Writing shell scripts requires more than just a knownledge of the shell
language. It also requires familiarity with the individual Unix programs.
[cite:@robbins2005classic]
#+end_quote

* History

- Thompson Shell (Ken Thompson, Unix Version 1 throughout 6), modeled after the Multics shell =RUNCOM=,
  hence the =rc= configuration.

- Bourne Shell (Stephen Bourne, Unix Version 7). There are some modern alternatives:
  + Almquist Shell (ash), a clone of the original Bourne shell (FreeBSD, NetBSD, Busybox, dash)
  + Bourne-Again Shell: the GNU shell as a superset, the default interactive
    shell on most Linux distros.
  + KornShell (ksh), the POSIX shell is a subset of Korn shell, an enhanced
    version the Bourne shell.
  + Public domain Korn shell (pdksh)
    - MirBSD Korn shell (mksh), used by Android as =/system/bin/sh=.
  + Z shell: a relatively modern shell compatible with bash.

- C shell: modelled after the C programming language. The TENEX C shell as an
  improved version is a modern alternative.

* Dash

This note uses =dash= as the POSIX shell due to its availability on Debian-based
Linux distros and its fully POSIX compliance. On Debian, Ubuntu and termux, =dash= is not configured with
=libedit= and thus gives no support for vi-mode line editing and history.

* Login & Non-Login Shell

A login shell (=-l=) first reads commands from the files =/etc/profile= and =.profile=.
It also reads =$ENV= if defined.

* =expr= Expression Evaluator

=expr= performs /arithmetic/, /logical/, /relational/ or /string/ operations.

- Equality test is done by ~=~ not ~==~

- Some operators (=*=, =&=, =|=, =<=, =>=, =(=, =)=) are special metacharacters
  and they must be quoted or escaped.

- If only one expression is given, then =expr= simply echos it.

- to avoid some variables that are themselves an operator string, append an =x= to them
  and another operand
  before string comparison.

* Variables

- No space before and after ===

- =set= prints all current variables

- Environment variables are exported variables, which propagate to subprocesses.
  Environment variables in inherited by child processes and they cannot be
  propagated back to the parent.
  + =env= prints all current environment variables

- to append strings to a variable, use =${x}appended=, =$x"appended"=.

- ~var=~ assigns null to =var=; =unset var= unsets it.

** Common Environment Variables

- =PATH= :: the command search path

- =HOME= :: the user home

- =CDPATH= :: a list of directories for =cd= to find the destination directory in, in addition to
  =PWD=.

- =PS1=, =PS2= :: normal propmt before each command and the secondary prompt in
  a multiline command.

** Parameter Substitution

- =${var?error_message}= :: complain with =error_message= if undefined

- =${var-default_option}= :: use =default_option= if undefined
  + =default_option= may be a variable, a quoted string, a command substitution
    etc. Any command inside =default_option= is lazily executed.

- =${var+option_on_defined}= :: use the new value if defined
  + this form may be used to add a debug message.

- =${var=new_definition_if_undefined}= :: use and define new value if undefined

The special expression in the back is executed in the current shell rather than
a subshell.

 Most scripts don't care about the difference between undefined variable and a
null variable. =:?=, =:-=, =:+=, =:== variations of the above forms check
whether the variable is null or undefined instead of simply undefined.

* Filename Expansion

Wildcards (=*=, =?=, =[=, =]=) in POSIX shells expands only filenames, not
random strings. They are not simplified regexp. They are expanded automatically when
they occurs in a shell.

- Files whose name starts with a dote are not normally listed and various
  shells, utilities follow this convention.

* Quoting

Metacharacters are commonly used in shell. They must be quoted or escaped to be
treated as regular characters. But quoted characters do not have a
special meaning. Double quotes are weak in that most metacharacters except =$=,
=`=, =\= retain their special meanings. The easiest way to quote a quotation
mark is to
use another type of quotation marks.

POSIX shells supports multiline strings with ='= and ="=.

The quotation marks in the shell are not used to define a string: they are used
to disable or enable interpretation of meta-characters.

#+begin_src shell
echo 'string1'"string2"'string3' # string1string2string3
echo 'My home directory is '"$HOME"', and my account is '"$USER"
#+end_src


* Command Substitution

=$(command)= or =`command`=: Execute a command in a /child process/ and return its result as a
string. The new version =$()= supports nesting.

* Control Flow Structure

- list :: a series of command that ends with a semicolon or ends with a newline character.
  A list can have more than one command: the last one is used to make a
  decision.  A list cannot be empty: empty statement =:= must be used.

** Conditional

*** if

#+begin_src shell
if list then list fi
if list then list else list fi
if list then list elif list then list fi
if list then list elif list then list elif list then list fi
if list then list elif list then list else list fi
#+end_src

=if= may be nested.

*** case

#+begin_src shell
case word in esac
case word in pattern ) list ;; esac
case word in pattern | pattern) list ;; esac
#+end_src

#+begin_src shell
echo answer yes or no
read word
case "$word" in
    yes | YES )
        echo you answered yes
        ;;
    no | NO )
        echo you answered no
        ;;
esac
#+end_src

** Iteration

*** while

#+begin_src shell
while list do list done
#+end_src

#+begin_src shell
while read msg
do
    echo "$msg"
done
#+end_src

*** until

#+begin_src shell
until list do list done
#+end_src

*** for

#+begin_src shell
for name do list done # use positional arguments
for name in word ... do list done # use the word list
#+end_src

#+begin_src shell
for args in "a A" "b B" "c C"
do
  set $args
  echo lower case is $1, upper case is $2
done
#+end_src

** break & continue

They work the way as in C.


* Bibliography

#+print_bibliography:
