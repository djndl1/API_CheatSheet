#+title Modern Perl

Flexible, Forgiving, Malleable

#+begin_quote
Modern Perl is a mindset. It’s an approach to writing great software with the
Perl programming language. It’s how effective Perl programmers write powerful,
maintainable, scalable, concise, and excellent code. It takes advantage of
Perl’s extensive library of free software (the CPAN) and language features
designed to multiply your productivity.
#+end_quote

* Philosophy

- /Expressivity/
  + there is more than one way to do it.
  + do what I mean (least astonishment)

- /Context/:  each expression is part of a larger context. The behavior of how data are treated depends on the context. Context helps determine how much word a function should do.
  + /Amount Context/ :: how many items an operation is expected to produce
    - /void context/ :: a function never use its return value and thus may not
      even perform any actual work.
    - /scalar context/ :: a function return value to a single item and thus it may
      stops when the first result is returned.
    - /list context/ :: a function returns a list
  + /Value Context/ :: How a piece of data is interpreted. Types are not
    explicitly declared. Value contexts provide hints about how to treat the
    data. Perl coerces values
    to specific proper types depending on the operators in use.
    + numeric add =+=, string concatenation =.=, boolean context =!!=

- /Implicit Ideas/ ::
  + /default scalar variable/ =$_=. Many operators and constructs work on the contents of =$_=
    in the absence of an explicit variable. This variable is like the "it"
    pronoun: convenient to use, confusing when overused.
  + /default array variable/ =@_=, implicit arguments used by functions.
    =@ARGV= the command-line arguments.

* Documentation

=perldoc= is a tool display the docs of Perl modules. Start reading with =perltoc=.

- =-q= :: search the FAQ

- =-f= :: built-in Perl function.

- =-v= :: built-in variable

- =-l= :: list doc paths

- =-m= :: the entire contents of the module, code and all

* Ecosystem and Community

** CPAN (Comprehensive Perl Archive Network)

A uploading and mirroring system for redistributable, reusable Perl code. CPAN
services provide automated testing and reporting (ticket queue) across platforms
and Perl versions.

- /distribution/ :: a collection of reusable Perl code, containing one or more /moduels/.

- /module/ :: self-contained library of Perl code.

- =cpan.pm= :: a client to connect to, search, download, build, test and install
  CPAN distributions.

  #+begin_src perl
install Modern::Perl
  #+end_src

Other CPAN clients includes =App::cpanminus=, =App::perlbrew=. The =local::lib= CPAN distribution offers management of multiple Perl installations.

** Microsoft Windows

CPAN distributions often requires a C compiler and some development tools.
[[https://strawberryperl.com/][Strawberry Perl]] includes a GCC and is designed to be close to unix-like
environments or [[https://www.activestate.com/products/perl/][ActiveState Perl]].

** Events, Conferences

- [[https://yapc.org/][Yet Another Perl Conference]]

- [[https://www.pm.org/][Perl MOngers]]: Perl User Groups

** REPL

- [[https://metacpan.org/pod/Devel::REPL][Devel::REPL]]

** Modern Perl

- [[https://metacpan.org/pod/Modern::Perl][Modern::Perl]]: one =use= to include all modern features.

* Language Basics

** Variables

#+begin_quote
The relationship between variable types, sigils, and context is key to Perl.
Perl’s type system deals with value types and container types. While a
variable’s container type—scalar, array, or hash—cannot change, Perl is flexible
about a variable’s value type. Performing an operation on a variable that imposes a specific value type may
cause coercion of the variable’s existing value type.
#+end_quote

Variables names are prefixed with a sigil: =$= for scalars, =@= for arrays and
=%= for hashes. Sigils are not part of a variable name but they represent different
namespaces: variables with the same name but different sigils are different variables.

The sigils of a variable changes depending on its use, called /variant sigils/.
Sigils behave like contexts. Using a scalar element of an aggregaste as an lvalue
imposes scalar context on the rvalue. =@keys= imposes list context on a hash
and slices the hash.

#+begin_src perl
# assign a list to a slice of array
@values[@indices] = some_function();
# access an array element
$valeus[0];
# coerced
my $element = @values[@indices];
# evaluating an array as a scalar produces its length
my $len = @values;
#+end_src

*** Scope

Most variables in modern Perl programs have a /lexical scope/, either the
contents of blocks delimited by curly braces or entire files but not a =package=
declaration.

** Namespaces

Perl allows multilevel namespaces joined by =::=. User-defined packages start
with uppercase letters and lowercase package names for core pragmas.
