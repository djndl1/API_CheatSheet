#+title: VB Classic OOP

- No parameterized constructors, initializer methods and factory methods are used.

- Properties can have arguments

- Public variables have default property implemented by the compiler.

* Constructor & Destructor

There is no constructor in VBA. There are some events that are triggered during
construction and destruction. See [[Class Events]]

* Class Type Accessibility

Handled by =VB_Exposed= and =VB_Creatable=, See [[Class Module Attributes]].

* Class Module Attributes

#+begin_src vba
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = ""
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
' Attribute VB_Customizable = True/False
#+end_src

Class attributes are optional and assumed to be their default values if missing
(=False=)

- =VB_Name=: class name

- =VB_PredeclaredId=: if =True=,  the default instance
  variable is given the name of the class as its name
  + not a singleton, as the user may still =New= another instance.

- =VB_GlobalNameSpace=: if =True=, as a global class module, it has a default
  instance and all its members may be accessed via simple name expressions, i.e.
  as if imported into the global namespace.

The default instance is created by default with module extent and automatically instantiated.

- =VB_Exposed=: class module accessibility of the type

- =VB_Creatable=: whether external projects can create instances of the class,
  i.e. the accessibility of the constructor

- =VB_Description=: =ComponentModel.DescriptionAttribute= in C#, used by COM to show documentation.

* Auto-Instancing

=Dim a As New ObjectType()= declares all the objects in the array as automatic instantiated.

The problem with auto-instancing is not about performance: the reference is
checked for nothing in any case. Auto-instancing is not declartion along with
initialization. It doesn't initialize the variable on the spot and this variable
is guaranteed not to be =Nothing= even if it has been set to =Nothing=.
Auto-instancing prevents the user from initializing and assigning to the
variable explicitly.

* Properties

Properties are not limited to class modules: ordinary code modules may have
properties, similar to static properties in C# e.g.  =Now= is a property of
=DateTime=, which is imported into the global namespace.

#+begin_src vba
Private m_BirthDate As Date

Property Get BirthDate() As Date
    BirthDate = m_BirthDate
End Property
Property Let BirthDate(ByVal newValue As Date)
    If newValue >= Now Then Err.Raise 1001, , "Future Birth Date !"
    m_BirthDate = newValue
End Property
#+end_src

To implement a init-once property, use =Variant= and =IsEmpty=.

- A property can take an argument
  + the rightmost parameter of a setter (LHS property) is the value assigned to it.
  + =ByVal= is used regardless for any setter's value parameter.

  #+begin_src vba
Private m_Notes(1 To 10) As String

Property Get Notes(Index As Integer) As String
    Notes = m_Notes (Index)
End Property
Property Let Notes(Index As Integer, ByVal newValue As String)
    ' Check for subscript out of range error.
    If Index < LBound(m_Notes) Or Index > UBound(m_Notes) Then Err.Raise 9
    m_Notes(Index) = newValue
End Property
  #+end_src

- Every =Public= member variables are accessed through a pair of hidden
  procedures from outside the class or with
  =Me.property=, which causes the following code invalid

#+begin_src vba
Sub ToCentimeters (value As Single)
    ' Value is received by reference, therefore it can be changed.
    value = value * 2.54
End Sub

ToCentimeters pers.Height                ' pers.Height returns a rvalue, not a reference
#+end_src

#+begin_src vba
Dim m_HomeAddress As CAddress      ' A module-level private variable.

Property Get HomeAddress() As CAddress
    Set HomeAddress = m_HomeAddress
End Property
Property Set HomeAddress(ByVal newValue As CAddress)
    Set m_HomeAddress = newValue
End Property
#+end_src

- =Property Set= accepts object parameter (=Object=, =Variant= or a named class)
  and =Property Let= accepts value types. Property procedures of the same type and
  the same name allows overloading with the same number of parameters and
  parameter names.

#+begin_src vba
Private m_CurrentAddress As Variant

Property Get CurrentAddress() As Variant
    If IsObject(m_CurrentAddress) Then
        Set CurrentAddress = m_CurrentAddress   ' Return a CAddress object.
    Else
        CurrentAddress = m_CurrentAddress       ' Return a string.
    End If
End Property

Property Let CurrentAddress(ByVal newValue As Variant)
    ' Check that it is a string value
    If VarType(newValue) <> vbString Then Err.Raise 5
    m_CurrentAddress = newValue
End Property

Property Set CurrentAddress(ByVal newValue As Variant)
    ' Check that it is a CAddress object.
    If TypeName(newValue) <> "CAddress" Then Err.Raise 5
    Set m_CurrentAddress = newValue
End Property

' in case only one type of object may be accepted'
Property Set CurrentAddress(ByVal newValue As CAddress)
    Set m_CurrentAddress = newValue
End Property
#+end_src

** Property In Procedural Module

#+begin_src vba
Dim m_Percent As Integer

Property Get Percent() As Integer
    Percent = m_Percent
End Property
Property Let Percent(newValue As Integer)
    If newValue < 0 Or newValue > 100 Then Err.Raise 5
    m_Percent = newValue
End Property

'Implement a special global constant'
Property Get DoubleCrLf() As String
    DoubleCrLf = vbCrLf &; vbCrLf
End Property
#+end_src

* Class Events

** Lifecycle Handlers

- =Class_Initialize=: literally, not subtituted for a class name.

- =Class_Terminate=: finalizer. fired before releasing the data instance block and
  terminating the object's life.
  + useful for RAII or debug tracing (a special =Tracer= class created at the
    entry of a procedure)

** Custom Event Implementation

#+begin_src vba
' implementation
' define an event
' Public is implicit if not specified
[Public] Event FileCopied(file As String, DestPath As String)

Public Sub StartCopy(filespec As String)
    ...
    RaiseEvent FileCopied(thisFile, thisDestPath) ' raise the event
End Sub
#+end_src

*Warning*: An event name must not have an underscore

To subscribe to an event, declare the event source with =WithEvents=,
the event handler should be named as =EventSourceVariable_EventName=.
Raising events are not asynchronous.

#+begin_src vba
' subscribe to an event
Dim WithEvents Fop As CFileOp ' declare the event source object with WithEvents

Private Sub Fop_FileCopied(file As String, DestPath As String)
    ...
End Sub
#+end_src

=ByRef= parameters passed to event handlers are used by the handlers one by one
and any modification of a previous handler is reflected in the next one.

* Object Structure and Memory Management

- Reference Counting

- Structure:
  - *VTable pointer*: The first seven entries are =IUnknown= and =IDispatch=
    methods. All public instance functions, procedures, properties are
    virtual (that's how COM works).
    + /early VTable binding/: The compiler produces VTable offsets that are then
      efficiently used at run time to access the object's properties and
      methods.
    + /early ID binding/: the compiler can't derive the actual offset in the
      VTable, but at least it can check that the property or method is there. If
      so, the compiler stores a special ID value in the executable code. At run
      time, Visual Basic uses this ID for a very quick look in the object's list
      of methods (used by ActiveX controls).
    + /late binding/: the compiler can't deduce which type of object such a
      variable will contain and can therefore store only information about the
      property's or the method's name and arguments.
  - refcounter
  - module variables and static variables.

#+begin_src vba
Dim obj As Object
If n > = 0.5 Then
    Set obj = New CPerson
Else
    Set obj = New CCustomer
End If
Print obj.CompleteName 'late binding
#+end_src

- Termination:
  + Visual Basic prevents an object from being destroyed while its procedures
    are being executed.

- =Is=: check object identity

* Reflection

- =CallByName(object, procname, calltype, [,arguments])=: late binding call

#+begin_src vba
Function GetProperties(obj As Object, ParamArray props() As Variant) As String()
    Dim i As Integer, result() As String
    On Error Resume Next
    ' Prepare the result array.
    ReDim result(LBound(props) To UBound(props)) As String
    ' Retrieve all properties in turn.
    For i = LBound(props) To UBound(props)
        result(i) = vbNullChar
        ' If the call fails, this item is skipped.
        result(i) = props(i) &; "=" &; CallByName(obj, props(i), vbGet)
    Next
    ' Filter out invalid lines.
    GetProperties = Filter(result(), vbNullChar, False)
End Function

' Assign a group of properties in one operation.
' Expects an array in the format returned by GetProperties
Sub SetProperties(obj As Object, props() As String)
    Dim i As Integer, temp() As String
    For i = LBound(props) To UBound(props)
        ' Get the Name-Value components.
        temp() = Split(props(i), "=")
        ' Assign the property.
        CallByName obj, temp(0), vbLet, temp(1)
    Next
End Sub
#+end_src

- =TypeOf ... Is ...=: test type. Inefficient

#+begin_src vba
' instead of using TypeOf'
Dim lst As ListBox, cbo As ComboBox
On Error Resume Next
Set lst = obj     ' The assignment that fails will leave
Set cbo = obj     ' the corresponding variable set to Nothing.
On Error Goto 0   ' Cancel error trapping.
#+end_src

- =TypeName()=: the name of an object's class in the form of a string.

- =ByRef= and =ByVal= for object variables: basically in the same way as =ref=
  and non-=ref= parameters in C#.

#+begin_src vba
Sub Reset(pers As CPerson)     ' ByRef can be omitted.
    Set pers = Nothing         ' This actually sets the original
End Sub                        ' variable to Nothing.

Sub Reset2(ByVal pers As CPerson)
    Set pers = Nothing         ' This code doesn't do anything.
End Sub
#+end_src

* Collection

Not only can a wrapped collection object provides type safety and other niceties,
the wrapper is itself a factory that encapsulates the object activation logic.
The collection keeps an account of all the created objects.

A contained object may keep a reference to its containing collection, which
inevitably introduces circular reference, which can not be easily solved by VBA
itself unless a weak reference type is available or the user would have to
manually break the cycle.

* Inheritance

Not natively supported.

** Through Delegation

Initialize the base object in the =Class_Initialize= handler and delegate
behaviors and property access to the base object. A second interface or the base
object can be accessed through a second variable.

Inheritance through delegation gives the subclass freedom to use the base
implementation or override the behavior.

* Polymorphism

VBA supports polymophisim either through late binding (=Object= type variable)
or through interfaces.

** Interfaces

There is no dedicated interface type in VBA. Each VBA class module defines an implicit
COM interface thus also acts as an *abstract class*.
Class modules can include one or more *secondary* interfaces.
An interface is defined as an *abstract* class with no executable code.
Interfaces never include =Event= declarations. A concrete class is an
interface itself and can be implemented by another class module, possibly with
inheritance through delegation.

- *Warning*: A class cannot be used as an interface class if the names of any of its public
    variable or method contain an underscore character.

- A variable of the interface class must be implemented with properties.

#+begin_src vba
' The IShape class module
Public Hidden As Boolean

Sub Draw(pic As Object)
    ' (Empty comment to prevent automatic deletion of this routine)
End Sub

Sub Move(stepX As Single, stepY As Single)
    '
End Sub

Sub Zoom(ZoomFactor As Single)
    '
End Sub
#+end_src

#+begin_src vba
Implements IShape

Public Property Let IShape_Hidden(ByVal rhs As Boolean)
'''
End Property

Public Property Get IShape_Hidden() As Boolean
'''
End Property

Sub IShape_Draw(pic As Object)
  '''
End Sub

Sub IShape_Move(stepX As Single, stepY As Single)
  '''
End Sub

Sub IShape_Zoom(ZoomFactor As Single)
  '''
End Sub
#+end_src

To access a secondary interface, declare a variable of such an interface type
and assign an object to it. To avoid constant declaration of interface
variables, define a =QI_MyInterface()= function to cast a variable object to
proper interface type.

#+begin_src vba
QI_IShape(rect).Move 10, 20

With QI_IShape(rect)
     .Move 10, 20
     .Zoom 1.2
End With
#+end_src

A class that implements a secondary interface comes with a secondary VTable
structure, which of course points to the procedures of that secondary interface.

* OLE Automation

Use as few 'dots' as possible and cache COM object references
to avoid expensive COM calls.

** Late Binding Creation Of OLE Objects

Declare a variable to the =Object= type forces late binding call on that variable.

- =CreateObject()=

- =GetObject()=
