#+TITLE: Vb Classic

In the era of [[https://en.wikipedia.org/wiki/Rapid_application_development][Rapid Application Development]]

1. Heavily integrated with COM/OLE, (=String= is OLE =BSTR= and arrays are =SAFEARRAY=)

2. Primarily used for Windows GUI apps

3. Use refcount for memory management

4. Compiled to P-code or native code

5. Supported on up to Windows 10

6. Poor support on OOP and limited threading capability

7. It is possible to reference any COM-visible objects in VB6, including those in CLR.

* Language Variants

1. VBA: for application scripting, still COM/OLE based

2. VBScript: COM-based Windows scripting language for automation and web page (succeeded by PowerShell)

3. GAMBAS: a FOSS variant mainly on Linux

* GUI Programming

** Form Lifecycle

1. =Initialize=: variables are initialized

2. =Load=: properties and controls are references. The windows and its child controls are created

3. =Resize=: visible or sized changed

4. =Activate=: ready to accept user input

5. =Deactivate=: end user switches to another form

6. =Paint=: the form refreshes itself

7. =QueryUnload=

8. =Unload=

9. =Terminate=: deallocate the memory for the Form

Forms expose a special property, the =Controls= collection, which contains all the controls that are currently loaded on the form itself.

* Basics

- Case-Insensitive

** Modules

- Form Module: basically class module with GUI controls

- Class Module: OOP-like

- BAS Module: C-like compilation unit

Module are made a of a /declaration section/ (types, constants and variables)
plus a collection of procedures.

** Variables

- /Global/: application long lifetime; application-wide scope
  + best practice: define all variables in a UDT and declare such a UDT in one
    place. =Public MyPublicVar As Long= in BAS modules.

- /Private/ module-level: =Dim= or =Private= statement in the declaration
  section of a module.

- /Public/ module-level (except in BAS modules where /Public/ variables are
  global): or called /property/; module-long lifetime.

- /Dynamic Local/: defined within a procedure; procedure-wide scope/lifetime.

- /Static Local/: procedure-wide scope; module-level lifetime.
  =Static InProgress As Boolean=; useful for preventing procedure reentry.

** Types

- =Integer= (16-bit) and =Long= (32-bit, the preferred type for integer values):
  =&= prefixed forces a literal integer into a =Long= value.
  + =&H1234=, =&O011064=

- =Boolean= (2-byte): =0= for =False= and =-1= for =True=

- =Byte=

- =Single= and =Double=

- =String= (=BSTR=):
  + =Dim VarLenStr As String= (variable-length);
    =Dim FixedLenStr As String * 40= fixed-length (not well-supported by VB's
    string functions and causes low performance);
  + =""""= for embedding a quote inside a string.
  + String constants such as =vbTab= and =vbCrLf= are available.

- =Date= (=DATE=, 8-bytes): =#12/3/2013#

- =Object=: stores references. Object variables are assigned using =Set=.
  Missing =Set= might lead to unexpected results (the value might be assigned to
  the object's default property). =Nothing= for null reference.

- =Variant= (=VARIANT= defined by OLE, 16 bytes with 2 bytes for typing and 14
  bytes for actual data; most types except =Decimal= use only the upper 8
  bytes): the default data type that can store any type of data. =Variant= is
  basically a dynamic type, also the /default type/ for VB if not specified.
  + A =Variant= variable can be =Empty= and checked using =IsEmpty()=; It can also
  be =Null=, useful for database programming.
  + =Variant= can be useful when returning a result of different types on some
    condition, especially as a =Result<T, E>= type since it can contains a =vbError=
    type, checked using =IsError=. Use =IsObject= to test for an object within a
    =Variant=.
  + Use =VarType= and =TypeName= to get the type information of a =Variant= variable.

- [[https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/decimal-data-type][Decimal]] (12-byte unsigned integer with a scaling factor): not declarable, used
  only as a =Variant= with =CDec=

- =Currency= (=CURRENCY=, 8-byte number in an integer format scaled down by
  10000, i.e. =2^63 / 10000=)

- /UDT/: basically a structure or record type.
  + Fixed-length strings are stored directly in a UDT while variable strings are stored as pointers.
  + Structures can contain substructures.

#+begin_src sql
Private Type EmployeeUDT
    Name As String
	DepartmentID As Long
    Salary As Currency
End Type

emp1 = emp2 ' copy one UDT to another
#+end_src

- /Arrays/: ordered sets of homogeneous items.
  + can be static or dynamic. Dynamic arrays can be first declared =Dim arr() As
    Type= then defined using =ReDim arr(N) As Type= or with only =ReDim=.
  + The lower index is assumed to be =0= by default or explicitly with
    =ReDim Customer(1 To 1000) As String=. Also created by =Array()=
  + To resize an array, use =ReDim= again. Only the last dimension can resized.
    To destroy an array, use the =Erase= statement.
  + Use =LBound=, =UBound= for bounds and length.
  + Array can be assigned to a =Variant= with =var = arr()= by physically
    copying. Array assignment only works if the target is a dynamic array.
     =b() = a()=
  + Byte Array: a string can be assigned to a byte array with all its Unicode
    characters converted to its proper binary representation. The opposite is
    also possible. =LenB=

#+begin_src sql
' Dynamically polymorphism, slow execution
Function ArraySum(arr As Variant) As Variant
    Dim i As Long, result As Variant
    For i = LBound(arr) To UBound(arr)
        result = result + arr(i)
    Next
    ArraySum = result
End Function
#+end_src

** Basic Keywords

- =Dim=: declare variable

- =Dictionary= belongs to an external library: Microsoft Scripting Runtime

- [[https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/with-statement][=With=]] statement: not related to Python's context manager.

#+begin_src sql
With Emp
    Print .Name
    Print .Salary
    With .Location
        Print .Address
        Print .City & "  " & .Zip & "  " & .State
    End With
End Type
#+end_src

** Event

- [[https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/modifiers/withevents][=WithEvents=]]:

** Quick I/O

=InputBox=

=MsgBox=

** Common Functions

=Len(String)=

=&=: string concatenation

=Mid=: get a substring

- =LBound=, =UBound=

- =Split= a string

- =Join= an array of strings

- =Filter= a string based on a criterion

- =Left=, =Right=: the leftmost/rightmost n chars

- =LCase=, =UCase=

- =Space=: n spaces

- =Replace= a part of a string with another string

- =StrReverse=

- =LTrim=, =RTrim=

- =Asc= a character

- =Chr= an ASCII code integer

** Programming Construct

*** Branch

- Logical operator with ===, =<>=; =And=, =Or=, =Xor=, =Not= bitwise operator
  (for boolean there's no difference)

- =If () Then ... ElseIf () Then ... Else ...=; multi-line branch statement
   requires a =End If=.
   + any non-zero value in =IF= is considered =True=
   + =IF= is not short-circuited

- =Select Case= supports short-circuited evaluation
  + Case subexpressions are evaluated only until they return True, after which
    all the remaining expressions on the same line are skipped.

#+begin_src sql
Select Case Mid$(Text, i, 1)
    Case "0" To "9"
        ' It's a digit.
    Case "A" To "Z", "a" To "z"
        ' It's a letter.
    Case ".", ",", " ", ";", ":", "?"
        ' It's a punctuation symbol or a space.
    Case Else
        ' It's something else.
End Select
#+end_src

- =GoTo= is there but not advised. Use sparingly.

**** Functions

All expressions are always evaluated which might lead to unexpected bugs.

- =IIF()=: basically =IF ... Else ... End If=

- =Choose()=: choose a candidate based on the index expression

- =Switch()=: a simple replacement for =Select Case=

*** Loop

There is no =continue= in VB, use =IF= with =GOTO=

#+begin_src sql
For Each item In Col
...
Next item

For i = 0 To N [Step Increment]
...
Next i
#+end_src

#+begin_src sql
While (expr) ' break is not available
...
Wend

' break out of the loop by `Exit Do`
Do While (expr) ''
...
Loop

Do
...
Loop Until (expr)
#+end_src

** Procedure/Function

- Public procedures of a public module can be called through COM. =Public= is
  the default scope attribute for procedures.

- All event procedures are =Private=

- =Friend= is project-level scope.

#+begin_src sql
Private/Public Sub SubName
...
End Sub

Private/Public Function FuncName
...
End Function
#+end_src

*** Parameters and Return Values

- Parameters can be pased =ByVal= or =ByRef= (by default even for basic types
  like =Long=, which can lead to undetected bugs). A =ByRef= =Variant= accepts
  arguments of any types.

- /Optional/ parameters: after all other arguments, checked by =IsMissing()=
  ( A =Missing= value is pushed onto the stack for an optional argument.
  =IsMissing= would not work if the the type is not =Variant= since the missing value is a
  =Err= value) and
  can be used with a default value =Optional color As Long = vbWhite=; A
  non-Variant optional parameter receives its default value if no default value
  is assigned (not missing).

- /Named/ arguments: ~NamedArg := paramVal~

- =ParamArray args() As Variant=: any number of arguments as a =Variant= array.


* Error Handling

Primitive with =GoTo= but better than C's =errno= check.

- =On Error Resume Next=: ignore any error

- =On Error Resume=: retry the erring line. Error is not cleared after the
  control returns to the calling code.

- =On Error Goto=: jump to the named label to handle any error; to exit from a
  error routine:
  + =Resume= to retry the line of code that caused the error.
  + =Resume Next= to resume execution at the next line after the one that caused
    the error
  + =Resume <label>=
  + =Err.Raise=: errs out again
  + =Exit Sub= or =Exit Function= with the calling code receiving a zero error code.


- =On Error Goto 0=: disable any previous =On Error=

If any error inside an event handler goes unhandled, the program terminates.
Error that go unhandled in event procedures terminates the program immediately.

#+begin_src basic
Err.Raise Number, [Source], [Description], [HelpFile], [HelpContext]
#+end_src

* VBA and VB Libraries

** Numbers

- =/= always converts its operands into =Double=; Use =\= for pure integer
  division.

- =^=: exponentiation.

- =MOD= works only for integers.

- Common math functions are available: =Abs=, =Sgn=, =Sqr=, =Exp=, =Log=

- =Int=: round to the lower integer, a ceiling function; =Fix=: truncates the decimal part; =Round=
  to the specified number of digits.

#+begin_src sql
Function Ceiling(number As Double) As Long
    Ceiling = -Int(-number)
End Functio
#+end_src

- =Val=; =Hex=, =Oct=

- =Randomize= sets the random seed; =Rnd= returns a the next random number
  between =[0, 1)=

** String Operations and Functions

- =&=: concatenation

- =Left$=, =Right$=, =Mid$=: substring; =Mid$= also returns a string slice,
  which can be assigned. =Mid$(Text, 3, 4) = "abcd";

- =Len=: string length;

- =LTrim$=, =RTrim$=, =Trim$=: discard unwanted trailing or leading blanks.

- =Asc=, =Chr$=: ASCII-string conversion

- =Space$=, =String$=: construct a string out of repeated characters.

- =StrComp=: case-insensitive string comparison

- =UCase$=, =LCase$=;

- =StrConv= multi-functionality string conversion
  + case conversion with =vbUpperCase=, =vbLowerCase=, =vbProperCase=
  + ANSI-Unicode conversion with =vbUnicode=, =vbFromUnicode=

- =Val=: string to decimal representation; locale-independent

- =CInt=, =CLng=, =CSng=, =CDbl=, =CCur=, =CDate=: locale-aware conversion from
  string

- =Str$=: converts a number into its representation, with a leading space if the
  number is positive.

- =InStr=, =InStrRev=: =IndexOf=, =IndexOfLast= substring position search

- =Like=: regex-like pattern matching =?= (any single character), =*= (zero or
  more), =#= (any single digit), =[A-Z]=, =[0-9]=

#+begin_src sql
value Like "[A-C]###"
value Like "[AEIOU][A-Z][A-Z]"
value Like "[!0-9]??*"
#+end_src

- =Replace=

- =strReverse=

- =Split=, =Join=

- =Filter=: return an array of items (not) containing a certain substring.

- =Format=: string format

** Date and Times

- Date literal =#8/15/1998 9:20:57 PM#=

- =DateSerial=, =TimeSerial=

#+begin_src sql
Function IsLeapYear(year As Integer) As Boolean
    ' Are February 29 and March 1 different dates?
    IsLeapYear = DateSerial(year, 2, 29) <> DateSerial(year, 3, 1)
End Function
#+end_src

- =Date=, =Time= property: the current date and time.

- =Now=, =Timer=: the current date and time.

- =DateValue=, =TimeValue=: returns the Date/Time component of the argument.
  + =Year=, =Month=, =Day=, =Hour=, =Minute=, =Second= returns the corresponding
    component
  + =DatePart=

- =Weekday=: locale-dependent; Use =Weekday(arg, vbMonday)= to force locale independence.

- Date Arithmetic
  + =+=: =Now + 2 + #12:00#=
  + =DateAdd=, =DateDiff=: addition/difference with the specified time unit.

- Date Format
  + =Format=, =FormatDateTime=, =MonthName=: useless unless for human eyes.

** Files

- =Name= (move); =Kill= (delete); =FileCopy=

- =GetAttr=, =SetAttr= [[https://learn.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants][Windows File Attributes]]

- =CurDir$=; =ChDrive=, =ChDir=: both commands must be used to change the
  current directory to another drive's.

- =MkDir=, =RmDir=; =Name= (rename only)

* OOP

- No parameterized constructors, initializer methods and factory methods are used.

- Properties can have arguments

- Public variables have default property implemented by the compiler.

* .NET Interop

**  Issues

- [[https://learn.microsoft.com/en-us/visualstudio/code-quality/ca1402?view=vs-2022&tabs=csharp][Method overloading]]

** Useful =mscorlib= classes

- =UTF8Encoding=, =ASCIIEncoding=

- =StringBuilder= works but overloading makes it hard to find the correct method name.

- =ArrayList=
  + - =For Each ... Next= works for =[DispId(-4)]=

- =Queue=, =HashTable=, =Stack=
