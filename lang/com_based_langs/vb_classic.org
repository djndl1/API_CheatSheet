#+TITLE: Vb Classic

In the era of [[https://en.wikipedia.org/wiki/Rapid_application_development][Rapid Application Development]]

1. Heavily integrated with COM/OLE, (=String= is OLE =BSTR= and arrays are =SAFEARRAY=)

2. Primarily used for Windows GUI apps

3. Use refcount for memory management

4. Compiled to P-code or native code

5. Supported on up to Windows 10

6. Poor support on OOP and limited threading capability

7. It is possible to reference any COM-visible objects in VB6, including those in CLR.

* Language Variants

1. VBA: for application scripting, still COM/OLE based

2. VBScript: COM-based Windows scripting language for automation and web page (succeeded by PowerShell)

3. GAMBAS: a FOSS variant mainly on Linux

* GUI Programming

** Form Lifecycle

1. =Initialize=: variables are initialized

2. =Load=: properties and controls are references. The windows and its child controls are created

3. =Resize=: visible or sized changed

4. =Activate=: ready to accept user input

5. =Deactivate=: end user switches to another form

6. =Paint=: the form refreshes itself

7. =QueryUnload=

8. =Unload=

9. =Terminate=: deallocate the memory for the Form

Forms expose a special property, the =Controls= collection, which contains all the controls that are currently loaded on the form itself.

* Basics

- Case-Insensitive

** Modules

- Form Module: basically class module with GUI controls

- Class Module: OOP-like

- BAS Module: C-like

** Variables

- /Global/: application long lifetime; application-wide scope
  + best practice: define all variables in a UDT and declare such a UDT in one
    place. =Public MyPublicVar As Long= in BAS modules.

- /Private/ module-level: =Dim= or =Private= statement in the declaration
  section of a module.

- /Public/ module-level (except in BAS modules where /Public/ variables are
  global): or called /property/; module-long lifetime.

- /Dynamic Local/: defined within a procedure; procedure-wide scope/lifetime.

- /Static Local/: procedure-wide scope; module-level lifetime.
  =Static InProgress As Boolean=; useful for preventing procedure reentry.

** Types

- =Integer= (16-bit) and =Long= (32-bit, the preferred type for integer values):
  =&= prefixed forces a literal integer into a =Long= value.

- =Boolean= (2-byte): =0= for =False= and =-1= for =True=

- =Byte=

- =Single= and =Double=

- =String= (=BSTR=):
  + =Dim VarLenStr As String= (variable-length);
    =Dim FixedLenStr As String * 40= fixed-length (not well-supported by VB's
    string functions and causes low performance);
  + =""""= for embedding a quote inside a string.
  + String constants such as =vbTab= and =vbCrLf= are available.

- =Date= (=DATE=, 8-bytes): =#12/3/2013#

- =Object=: stores references. Object variables are assigned using =Set=.
  Missing =Set= might lead to unexpected results (the value might be assigned to
  the object's default property). =Nothing= for null reference.

- =Variant= (=VARIANT= defined by OLE, 16 bytes with 2 bytes for typing and 14
  bytes for actual data; most types except =Decimal= use only the upper 8
  bytes): the default data type that can store any type of data. =Variant= is
  basically a dynamic type, also the /default type/ for VB if not specified.
  + A =Variant= variable can be =Empty= and checked using =IsEmpty()=; It can also
  be =Null=, useful for database programming.
  + =Variant= can be useful when returning a result of different types on some
    condition, especially as a =Result<T, E>= type since it can contains a =vbError=
    type, checked using =IsError=. Use =IsObject= to test for an object within a
    =Variant=.
  + Use =VarType= and =TypeName= to get the type information of a =Variant= variable.

- [[https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/decimal-data-type][Decimal]] (12-byte unsigned integer with a scaling factor): not declarable, used
  only as a =Variant= with =CDec=

- =Currency= (=CURRENCY=, 8-byte number in an integer format scaled down by
  10000, i.e. =2^63 / 10000=)

** Basic Keywords

- =Dim=: declare variable

- =Dictionary= belongs to an external library: Microsoft Scripting Runtime

- [[https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/with-statement][=With=]] statement: not related to Python's context manager.

** Event

- [[https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/modifiers/withevents][=WithEvents=]]:

** Quick I/O

=InputBox=

=MsgBox=

** Common Functions

=Len(String)=

=&=: string concatenation

=Mid=: get a substring

- =LBound=, =UBound=

- =Split= a string

- =Join= an array of strings

- =Filter= a string based on a criterion

- =Left=, =Right=: the leftmost/rightmost n chars

- =LCase=, =UCase=

- =Space=: n spaces

- =Replace= a part of a string with another string

- =StrReverse=

- =LTrim=, =RTrim=

- =Asc= a character

- =Chr= an ASCII code integer

** Programming Construct

- Logical operator with ===, =<>=; =And=, =Or=, =Xor=, =Not= bitwise operator
  (for boolean there's no difference)

=If () Then ... ElseIf () Then ... Else ...=; multi-line branch statement
requires a =End If=.

#+begin_src sql
For Each item In Col
...
Next item

For i = 0 To N
...
Next i
#+end_src

#+begin_src sql
While (expr)
...
Wend

Do While (expr)
...
Loop

Do Until (expr)
...
Loop
#+end_src

#+begin_src sql
Private/Public Sub SubName
...
End Sub

Private/Public Function FuncName
...
End Function
#+end_src



* Error Handling

- =On Error Resume Next=: ignore any error

- =On Error Resume=: retry the erring line

- =On Error Goto=: jump to the named label to handle any error

- =On Error Goto 0=: disable any previous =On Error=

If any error inside an event handler goes unhandled, the program terminates.

#+begin_src basic
Err.Raise Number, [Source], [Description], [HelpFile], [HelpContext]
#+end_src

* OOP

- No parameterized constructors, initializer methods and factory methods are used.

- Properties can have arguments

- Public variables have default property implemented by the compiler.

* .NET Interop

** Useful =mscorlib= classes

- =UTF8Encoding=, =ASCIIEncoding=

- =ArrayList=
