#+TITLE: Vb Classic

In the era of [[https://en.wikipedia.org/wiki/Rapid_application_development][Rapid Application Development]]

1. Heavily integrated with COM/OLE, (=String= is OLE =BSTR= and arrays are =SAFEARRAY=)

2. Primarily used for Windows GUI apps

3. Use refcount for memory management

4. Compiled to P-code or native code

5. Supported on up to Windows 10

6. Poor support on OOP and limited threading capability

7. It is possible to reference any COM-visible objects in VB6, including those in CLR.

* Language Variants

1. VBA: for application scripting, still COM/OLE based

2. VBScript: COM-based Windows scripting language for automation and web page (succeeded by PowerShell)

3. GAMBAS: a FOSS variant mainly on Linux

* GUI Programming

in VB6, controls can be classified into (1) /Standard Controls/, managed by the
Windows OS, and the (2) /Lightweight Controls/, handled by the VB runtime itself.

** Form Properties

- =Tag=: VB extender properties that is always available, no specific use,
  stores any object related to that control.

- =hWnd=: the internal handle used by Windows to identify a control, available
  only to standard Windows controls.

- =Enabled=, =Visible=: disabled controls don't react to user's actions.
  Invisible controls are automatically disabled. All mouse events for disabled or invisible controls are passed to the underlying container or to the form itself.

** Form Lifecycle

1. =Initialize=: triggered where variables are initialized; before the actual window and the
   controls are created

2. =Load=: triggered when properties and controls are referenced. The windows
   and its child controls are created. Graphical operations will not work.
   A form is visible after its =Show= method is called.

3. =Resize=: visible or sized changed

4. =Activate=: ready to accept user input

5. =Deactivate=: end user switches to another form

6. =Paint=: the form refreshes itself (fired only if =AutoRedraw= is =False=)

7. =QueryUnload=: =OnClosing=

#+begin_src sql
' refuse to unload
Private Sub Form_QueryUnload(Cancel As Integer, _
    UnloadMode As Integer)
    ' Don't let the user close this form.
    Select Case UnloadMode
        Case vbFormControlMenu, vbAppTaskManager
            Cancel = True
    End Select
End Sub
#+end_src

8. =Unload=: a last chance to prevent the closure of the form

#+begin_src sql
' This is a module-level variable.
Dim Saved As Boolean

Private Sub Form_Unload(Cancel As Integer)
    If Not Saved Then
        MsgBox "Please save data first!"
        Cancel = True
    End If
End Sub
#+end_src

9. =Terminate=: deallocate the memory for the Form

Forms expose a special property, the =Controls= collection, which contains all the controls that are currently loaded on the form itself.

** Form Events

- =Click=, =DblClick=: triggered not only by actual mouse clicks.

- =GetFocus=, =LostFocus=

- =Change=: its behavior is not consistent across VB controls. Not available for =CheckBox= and =OptionButton=, which fires a
  =Click= event when its content is changed.

- =KeyPress=, =KeyDown= (the key translated into ANSI numeric code), =KeyUp=: Only keys that correspond to control keys (Ctrl+x, BackSpace, Enter, and Escape) and printable characters activate the =KeyPress= event.

- =MouseDown=, =MouseUp=, =MouseMove=: mouse button state, Shift/Ctrl/Alt state
  and the cursor's location are passed.

** The =Controls= Collection

Container of all the controls currently loaded on the form itself.

* Basics

- Case-Insensitive

** Modules

- Form Module: basically class module with GUI controls

- Class Module: OOP-like

- BAS Module: C-like compilation unit

Module are made a of a /declaration section/ (types, constants and variables)
plus a collection of procedures.

** Variables

- /Global/: application long lifetime; application-wide scope
  + best practice: define all variables in a UDT and declare such a UDT in one
    place. =Public MyPublicVar As Long= in BAS modules.

- /Private/ module-level: =Dim= or =Private= statement in the declaration
  section of a module.

- /Public/ module-level (except in BAS modules where /Public/ variables are
  global): or called /property/; module-long lifetime.

- /Dynamic Local/: defined within a procedure; procedure-wide scope/lifetime.

- /Static Local/: procedure-wide scope; module-level lifetime.
  =Static InProgress As Boolean=; useful for preventing procedure reentry.

** Types

- =Integer= (16-bit) and =Long= (32-bit, the preferred type for integer values):
  =&= prefixed forces a literal integer into a =Long= value.
  + =&H1234=, =&O011064=

- =Boolean= (2-byte): =0= for =False= and =-1= for =True=

- =Byte=

- =Single= and =Double=

- =String= (=BSTR=):
  + =Dim VarLenStr As String= (variable-length);
    =Dim FixedLenStr As String * 40= fixed-length (not well-supported by VB's
    string functions and causes low performance);
  + =""""= for embedding a quote inside a string.
  + String constants such as =vbTab= and =vbCrLf= are available.

- =Date= (=DATE=, 8-bytes): =#12/3/2013#

- =Object=: stores references. Object variables are assigned using =Set=.
  Missing =Set= might lead to unexpected results (the value might be assigned to
  the object's default property). =Nothing= for null reference.

- =Variant= (=VARIANT= defined by OLE, 16 bytes with 2 bytes for typing and 14
  bytes for actual data; most types except =Decimal= use only the upper 8
  bytes): the default data type that can store any type of data. =Variant= is
  basically a dynamic type, also the /default type/ for VB if not specified.
  + A =Variant= variable can be =Empty= and checked using =IsEmpty()=; It can also
  be =Null=, useful for database programming.
  + =Variant= can be useful when returning a result of different types on some
    condition, especially as a =Result<T, E>= type since it can contains a =vbError=
    type, checked using =IsError=. Use =IsObject= to test for an object within a
    =Variant=.
  + Use =VarType= and =TypeName= to get the type information of a =Variant= variable.

- [[https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/decimal-data-type][Decimal]] (12-byte unsigned integer with a scaling factor): not declarable, used
  only as a =Variant= with =CDec=

- =Currency= (=CURRENCY=, 8-byte number in an integer format scaled down by
  10000, i.e. =2^63 / 10000=)

- /UDT/: basically a structure or record type.
  + Fixed-length strings are stored directly in a UDT while variable strings are stored as pointers.
  + Structures can contain substructures.

#+begin_src sql
Private Type EmployeeUDT
    Name As String
	DepartmentID As Long
    Salary As Currency
End Type

emp1 = emp2 ' copy one UDT to another
#+end_src

- /Arrays/: ordered sets of homogeneous items.
  + can be static or dynamic. Dynamic arrays can be first declared =Dim arr() As
    Type= then defined using =ReDim arr(N) As Type= or with only =ReDim=.
  + The lower index is assumed to be =0= by default or explicitly with
    =ReDim Customer(1 To 1000) As String=. Also created by =Array()=
  + To resize an array, use =ReDim= again. Only the last dimension can resized.
    To destroy an array, use the =Erase= statement.
  + Use =LBound=, =UBound= for bounds and length.
  + Array can be assigned to a =Variant= with =var = arr()= by physically
    copying. Array assignment only works if the target is a dynamic array.
     =b() = a()=
  + Byte Array: a string can be assigned to a byte array with all its Unicode
    characters converted to its proper binary representation. The opposite is
    also possible. =LenB=

#+begin_src sql
' Dynamically polymorphism, slow execution
Function ArraySum(arr As Variant) As Variant
    Dim i As Long, result As Variant
    For i = LBound(arr) To UBound(arr)
        result = result + arr(i)
    Next
    ArraySum = result
End Function
#+end_src

** Basic Keywords

- =Dim=: declare variable

- =Dictionary= belongs to an external library: Microsoft Scripting Runtime

- [[https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/with-statement][=With=]] statement: not related to Python's context manager.

#+begin_src sql
With Emp
    Print .Name
    Print .Salary
    With .Location
        Print .Address
        Print .City & "  " & .Zip & "  " & .State
    End With
End Type
#+end_src

** Event

- [[https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/modifiers/withevents][=WithEvents=]]:

** Quick I/O

=InputBox=

=MsgBox=

** Common Functions

=Len(String)=

=&=: string concatenation

=Mid=: get a substring

- =LBound=, =UBound=

- =Split= a string

- =Join= an array of strings

- =Filter= a string based on a criterion

- =Left=, =Right=: the leftmost/rightmost n chars

- =LCase=, =UCase=

- =Space=: n spaces

- =Replace= a part of a string with another string

- =StrReverse=

- =LTrim=, =RTrim=

- =Asc= a character

- =Chr= an ASCII code integer

** Programming Construct

*** Branch

- Logical operator with ===, =<>=; =And=, =Or=, =Xor=, =Not= bitwise operator
  (for boolean there's no difference)

- =If () Then ... ElseIf () Then ... Else ...=; multi-line branch statement
   requires a =End If=.
   + any non-zero value in =IF= is considered =True=
   + =IF= is not short-circuited

- =Select Case= supports short-circuited evaluation
  + Case subexpressions are evaluated only until they return True, after which
    all the remaining expressions on the same line are skipped.

#+begin_src sql
Select Case Mid$(Text, i, 1)
    Case "0" To "9"
        ' It's a digit.
    Case "A" To "Z", "a" To "z"
        ' It's a letter.
    Case ".", ",", " ", ";", ":", "?"
        ' It's a punctuation symbol or a space.
    Case Else
        ' It's something else.
End Select
#+end_src

- =GoTo= is there but not advised. Use sparingly.

**** Functions

All expressions are always evaluated which might lead to unexpected bugs.

- =IIF()=: basically =IF ... Else ... End If=

- =Choose()=: choose a candidate based on the index expression

- =Switch()=: a simple replacement for =Select Case=

*** Loop

There is no =continue= in VB, use =IF= with =GOTO=

#+begin_src sql
For Each item In Col
...
Next item

For i = 0 To N [Step Increment]
...
Next i
#+end_src

#+begin_src sql
While (expr) ' break is not available
...
Wend

' break out of the loop by `Exit Do`
Do While (expr) ''
...
Loop

Do
...
Loop Until (expr)
#+end_src

** Procedure/Function

- Public procedures of a public module can be called through COM. =Public= is
  the default scope attribute for procedures.

- All event procedures are =Private=

- =Friend= is project-level scope.

#+begin_src sql
Private/Public Sub SubName
...
End Sub

Private/Public Function FuncName
...
End Function
#+end_src

*** Parameters and Return Values

- Parameters can be pased =ByVal= or =ByRef= (by default even for basic types
  like =Long=, which can lead to undetected bugs). A =ByRef= =Variant= accepts
  arguments of any types.

- /Optional/ parameters: after all other arguments, checked by =IsMissing()=
  ( A =Missing= value is pushed onto the stack for an optional argument.
  =IsMissing= would not work if the the type is not =Variant= since the missing value is a
  =Err= value) and
  can be used with a default value =Optional color As Long = vbWhite=; A
  non-Variant optional parameter receives its default value if no default value
  is assigned (not missing).

- /Named/ arguments: ~NamedArg := paramVal~

- =ParamArray args() As Variant=: any number of arguments as a =Variant= array.


* Error Handling

Primitive with =GoTo= but better than C's =errno= check.

- =On Error Resume Next=: ignore any error

- =On Error Resume=: retry the erring line. Error is not cleared after the
  control returns to the calling code.

- =On Error Goto=: jump to the named label to handle any error; to exit from a
  error routine:
  + =Resume= to retry the line of code that caused the error.
  + =Resume Next= to resume execution at the next line after the one that caused
    the error
  + =Resume <label>=
  + =Err.Raise=: errs out again
  + =Exit Sub= or =Exit Function= with the calling code receiving a zero error code.


- =On Error Goto 0=: disable any previous =On Error=

If any error inside an event handler goes unhandled, the program terminates.
Error that go unhandled in event procedures terminates the program immediately.

#+begin_src basic
Err.Raise Number, [Source], [Description], [HelpFile], [HelpContext]
#+end_src

* VBA and VB Libraries

** Numbers

- =/= always converts its operands into =Double=; Use =\= for pure integer
  division.

- =^=: exponentiation.

- =MOD= works only for integers.

- Common math functions are available: =Abs=, =Sgn=, =Sqr=, =Exp=, =Log=

- =Int=: round to the lower integer, a ceiling function; =Fix=: truncates the decimal part; =Round=
  to the specified number of digits.

#+begin_src sql
Function Ceiling(number As Double) As Long
    Ceiling = -Int(-number)
End Functio
#+end_src

- =Val=; =Hex=, =Oct=

- =Randomize= sets the random seed; =Rnd= returns a the next random number
  between =[0, 1)=

** String Operations and Functions

- =&=: concatenation

- =Left$=, =Right$=, =Mid$=: substring; =Mid$= also returns a string slice,
  which can be assigned. =Mid$(Text, 3, 4) = "abcd";

- =Len=: string length;

- =LTrim$=, =RTrim$=, =Trim$=: discard unwanted trailing or leading blanks.

- =Asc=, =Chr$=: ASCII-string conversion

- =Space$=, =String$=: construct a string out of repeated characters.

- =StrComp=: case-insensitive string comparison

- =UCase$=, =LCase$=;

- =StrConv= multi-functionality string conversion
  + case conversion with =vbUpperCase=, =vbLowerCase=, =vbProperCase=
  + ANSI-Unicode conversion with =vbUnicode=, =vbFromUnicode=

- =Val=: string to decimal representation; locale-independent

- =CInt=, =CLng=, =CSng=, =CDbl=, =CCur=, =CDate=: locale-aware conversion from
  string

- =Str$=: converts a number into its representation, with a leading space if the
  number is positive.

- =InStr=, =InStrRev=: =IndexOf=, =IndexOfLast= substring position search

- =Like=: regex-like pattern matching =?= (any single character), =*= (zero or
  more), =#= (any single digit), =[A-Z]=, =[0-9]=

#+begin_src sql
value Like "[A-C]###"
value Like "[AEIOU][A-Z][A-Z]"
value Like "[!0-9]??*"
#+end_src

- =Replace=

- =strReverse=

- =Split=, =Join=

- =Filter=: return an array of items (not) containing a certain substring.

- =Format=: string format

** Date and Times

- Date literal =#8/15/1998 9:20:57 PM#=

- =DateSerial=, =TimeSerial=

#+begin_src sql
Function IsLeapYear(year As Integer) As Boolean
    ' Are February 29 and March 1 different dates?
    IsLeapYear = DateSerial(year, 2, 29) <> DateSerial(year, 3, 1)
End Function
#+end_src

- =Date=, =Time= property: the current date and time.

- =Now=, =Timer=: the current date and time.

- =DateValue=, =TimeValue=: returns the Date/Time component of the argument.
  + =Year=, =Month=, =Day=, =Hour=, =Minute=, =Second= returns the corresponding
    component
  + =DatePart=

- =Weekday=: locale-dependent; Use =Weekday(arg, vbMonday)= to force locale independence.

- Date Arithmetic
  + =+=: =Now + 2 + #12:00#=
  + =DateAdd=, =DateDiff=: addition/difference with the specified time unit.

- Date Format
  + =Format=, =FormatDateTime=, =MonthName=: useless unless for human eyes.

** Files

- =Name= (move); =Kill= (delete); =FileCopy=

- =GetAttr=, =SetAttr= [[https://learn.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants][Windows File Attributes]]

- =CurDir$=; =ChDrive=, =ChDir=: both commands must be used to change the
  current directory to another drive's.

- =MkDir=, =RmDir=; =Name= (rename only)

** Interoperation With the System

- =App=: the current app's
  + =ExeName=, =Path=
  + =PrevInstance=: if there's another instance already running

- =Shell=: asynchronously starts a process; returns the PID of the new process.

#+begin_src sql
Private Declare Function WaitForSingleObject Lib "kernel32" _
    (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
Private Declare Function OpenProcess Lib "kernel32" (ByVal dwAccess As _
    Long, ByVal fInherit As Integer, ByVal hObject As Long) As Long
Private Declare Function CloseHandle Lib "kernel32" _
    (ByVal hObject As Long) As Long

' Wait for a number of milliseconds, and return the running status of a
' process. If argument is omitted, wait until the process terminates.
Function WaitForProcess(taskId As Long, Optional msecs As Long = -1) _
    As Boolean
    Dim procHandle As Long
    ' Get the process handle.
    procHandle = OpenProcess(&H100000, True, taskId)
    ' Check for its signaled status; return to caller.
    WaitForProcess = WaitForSingleObject(procHandle, msecs) <> -1
    ' Close the handle.
    CloseHandle procHandle
End Function
#+end_src

* OOP

- No parameterized constructors, initializer methods and factory methods are used.

- Properties can have arguments

- Public variables have default property implemented by the compiler.

** Properties

#+begin_src sql
Private m_BirthDate As Date

Property Get BirthDate() As Date
    BirthDate = m_BirthDate
End Property
Property Let BirthDate(ByVal newValue As Date)
    If newValue >= Now Then Err.Raise 1001, , "Future Birth Date !"
    m_BirthDate = newValue
End Property
#+end_src

A property can have an argument:

#+begin_src sql
Private m_Notes(1 To 10) As String

Property Get Notes(Index As Integer) As String
    Notes = m_Notes (Index)
End Property
Property Let Notes(Index As Integer, ByVal newValue As String)
    ' Check for subscript out of range error.
    If Index < LBound(m_Notes) Or Index > UBound(m_Notes) Then Err.Raise 9
    m_Notes(Index) = newValue
End Property
#+end_src

Every =Public= member variables are accessed from outside the class through a pair of hidden
procedures, which causes the following code invalid

#+begin_src sql
Sub ToCentimeters (value As Single)
    ' Value is received by reference, therefore it can be changed.
    value = value * 2.54
End Sub

ToCentimeters pers.Height                ' Doesn't work!
#+end_src

* Database Programming

- ODBC
  + Most data access techniques in VB can use ODBC drivers as intermediate
    layers.
  + A connection may or may not use the configured DSN (either stored in the
    registry or in a file). An ODBC connection can
    be DSN-less with all connection details specified in the connection string.

- Data Access Object (DAO): an OO interface to Microsoft Jet (Access) and ODBC.

- Remote Data Object (RDO): improved upon DAO and designed around ODBC

- OLE DB: based on COM
  + MSDAAQL: a bridge from OLE DB to ODBC drivers.

- ActiveX Data Object (ADO): the high-level interface to OLE DB

** ADO Programming

*** Object Model

The three core classes are not tightly related.

- =Connection=: =ADODB.Connection=
  + =.Open()=: open a connection
  + =.Execute()=
  + =.BeginTrans()=, =.CommitTrans()=, =.RollbackTrans()=
  + =.OpenSchema()=: for metadata

- =Command=

- =RecordSet=: =ADODB.RecordSet=
  + a =RecordSet= can be created independent of a certain =Connection= and can use a
    =Connection= explicitly or implicitly.
  + One can retrieve a =Recordset= from a database, close the connection,
    modify the data in the =Recordset=, and finally reestablish the connection
    to send all the updates to the server.
  + =.Source=: the name of the table, the SQL text, the SP name or the
    =CommandText= of a =Command=
  + =.Open()=, =.ActiveConnection=, =.ActiveCommand=
  + Cursor: a set of records that represent the results of query, may contain
    the actual data (client-side, for optimistic update) or just pointers to records in the database
    (forward-only server-side, better performance)
    + =.CursorLocation=: =2-adUseServer= or =3-adUseClient=
    + =.CursorType=
    + =.MoveFirst()=, =.MoveNext()=
  + =.MaxRecords=: a limit to the number of records returned in the
      =RecordSet=
  + =.CacheSize=
  + =.Fields=: the columns of the current record.


* .NET Interop

**  Issues

- [[https://learn.microsoft.com/en-us/visualstudio/code-quality/ca1402?view=vs-2022&tabs=csharp][Method overloading]]

** Useful =mscorlib= classes

- =UTF8Encoding=, =ASCIIEncoding=

- =StringBuilder= works but overloading makes it hard to find the correct method name.

- =ArrayList=
  + - =For Each ... Next= works for =[DispId(-4)]=

- =Queue=, =HashTable=, =Stack=
