#+title: Python 2

Python 2.7 has reached EOL in 2020 and removed in some linux distros (Debian,
alpine) as of 2024.

* Major Difference

** Print as a Function since Python 3

=print= is exotic and an exception to Python's design. It puts up great barrier for
switching to
other output functions and implementation evolution.

Use =import __future__ import print_function= in Python 2.7.

** Better Unicode Support with =str=

In Python 3, =str= holds Unicode text; =bytes= and =bytearray= hold bytes.
In Python 2, =str= (aliased as =bytes=) for byte string and =unicode= is real Unicode text string.
For python 2 string literals, its encoding depends on the current default
encoding (ASCII, at least in Python 2.7). A byte string in a certain encoding is implicitly converted to Unicode
when performing operations with Unicode strings, which may or may not raise errors.
The most absurd and confusing example is ="foo".encode('utf-8')=. ="foo"= is a
non-Unicode string. It is first converted to a Unicode string and then encoded
as UTF-8. In Python 2, a codec may convert between two byte encoding schemes.

- Python 3 no longer has encoding-agnostic strings. Any text should be Unicode strings.
  - unicode escape string: =u"\uXXXX"= is supported in both but mainly a legacy
    from Python 2. Python 3 does not need such prefixes to support Unicode
    escape string. It's implicit unless prefixed with =b=.
  - =from __future__ import unicode_literals= turns literal strings into unicode.
  - In both cases, the source code encoding comment =#-*- coding: xxx= instructs
    the interpreter to treat string literals as encoded in the specified
    encoding.
    However, the actual result depends on the actual encoding.

- Python 3 removed text encodings between bytes and bytes, =.encode()= on bytes
  and =.decode()= on Unicode strings.

- Bytes can no longer implicitly converted to Unicode strings. Non-ASCII
  characters are not allowed in byte strings.

** =input= is now =raw_input=

=input= in Python 3 Is more type-safe

** =reduce= moved into =functools=

** A Separate Integer Division Operator =//= in Python 3

=/= is now float division.

** Removed Features

- Old-style classes (The only classes until Python 2.2): defined without a
  new-style parent class. of =instance= type, independent of the other parts of
  the type system. New-style classes are just another types in the type hierarchy.
  + =class NewClass(object)= is required for new-style classes in Python 2.
  + =super()= (a Callable class) added for new-style classes to allow more flexible access to parent attributes/methods.
  + descriptors:

- string exceptions and implicit relative imports

* Compatibility Libraries

- =enum34=: brings the =enum= module in 3.4 to early versions

- =functools32=

- =futures=: =concurrent.futures= to Python 2

- various =backports.*= packages and packages named the same as in the standard libraries.

For more, see [[https://wiki.python.org/moin/StandardLibraryBackports][Standard Library Backports]]
