#+TITLE: Code_practice

* [[https://peps.python.org/pep-0008/][PEP8]]

- 4 spaces identation

- when using implicit line joining, either vertically align elements or using a haning indent (can be more than 4 spaces) with the first element on the line after the beginning brace/bracket/parenthesis.

- 80 character line. Prefer line continuation inside parentheses, brackets and braces to a backslash.

- break a line before binary operators.

- Top level function and class definitions are separated with two blank lines, methods inside a class with one blank line.

- Always use UTF-8

- imports
  + module imports should be on separate lines.
  + module imports should be grouped: stdlib first, related third party second, local imports finally
  + use absolute imports unless it's too verbose
  + wildcard imports should be avoided.

- use double quote for triple-quoted strings.

- a trailing comma after a single token (an element of a list or an argument of a function) is encouraged.

- whitespace
  + avoid whitespace inside parentheses, brackets or braces
  + avoid trailing whitespace anywhere
  + avoid spaces in keyword arguments unless after a type hint

** Comments

- Comments should be complete sentences.
  + use inline comments sparingly

** Documentation

- Write [[>][docstrings]] for all public modules, functions, classes and methods

- string literal lines can act as documentation or comments

Multiline docstrings

- *script docstring*: usage of the script

- *module docstring*: list the exported classes, exceptions and functions, with a one-line summary for each.
  + *package docstring*: list subpackages and modules also.

- *function/method docstring*: summarize the behavior and documents its arguments, return values, side effects, exception raised and restrictions on when it can be called.

- *class docstring*: behavior, public methods and instance variables.

#+begin_src python
def my_func():
    """this is my function

       more details go here
    """
#+end_src


** Nameing Convention

- use ASCII compatible identifiers.

- module name: short, all-lowercase names

- package name: short all-lowercase names, underscores are discouraged.

- class name: CapWord. Callable classes may use functions' naming convention.
  + Exception name: use suffix ~Error~ for error exceptions.

- type variable: CapWord with short names, with ~_contra~ or ~_co~ to indicate variance.

- Function names and variable names: lowercase separated by underscores.

- ~self~ for instance methods and ~cls~ for class methods.

- constants are all capital letters with underscores separating words.

** Access Control

- public attributes without a underscore prefix
  + simple public attributes should not have accessors or property.

- use double underscore prefix for pure private (not even used by subclasses)

- Documented interfaces are considered public unless explicitly stated to be internal

- modules should explicitly declare the names in their public API using the ~__all__~ attribute.

- internal interfaces should be prefixed with a single leading underscore.

* PEP-257: Docstring

A string literal =__doc__= occurs as the first statement in a module, function, class or
method definition.

As for where docstrings should be placed:

#+begin_quote
All modules should normally have docstrings, and all functions and classes
exported by a module should also have docstrings. Public methods (including the
__init__ constructor) should also have docstrings. A package may be documented
in the module docstring of the __init__.py file in the package directory.
...
but two types of extra docstrings may be extracted by software tools:
    String literals occurring immediately after a simple assignment at the top level of a module, class, or __init__ method are called “attribute docstrings”.
    String literals occurring immediately after another docstring are called
    “additional docstrings”.
#+end_quote

Always use *triple double quotes* around docstrings.

For oneline docstrings:

#+begin_quote
The docstring is a phrase ending in a period. It prescribes the function or
method's effect as a command.
The one-line docstring should NOT be a “signature” reiterating the
function/method parameters (which can be obtained by introspection).
...
This type of docstring is only appropriate for C functions (such as built-ins),
where introspection is not possible. However, the nature of the return value
cannot be determined by introspection, so it should be mentioned.
#+end_quote

For multiline docstrings:

#+begin_quote
Multi-line docstrings consist of a summary line just like a one-line docstring,
followed by a blank line, followed by a more elaborate description. The summary
line may be used by automatic indexing tools; it is important that it fits on
one line and is separated from the rest of the docstring by a blank line. The
summary line may be on the same line as the opening quotes or on the next line.
The entire docstring is indented the same as the quotes at its first line (see
example below).
#+end_quote

How various objects should be documented:

#+begin_quote
The docstring of a script (a stand-alone program) should be usable as its
“usage” message, printed when the script is invoked with incorrect or missing
arguments (or perhaps with a “-h” option, for “help”). Such a docstring should
document the script’s function and command line syntax, environment variables,
and files.
...
The docstring for a module should generally list the classes, exceptions and
functions (and any other objects) that are exported by the module, with a
one-line summary of each. (These summaries generally give less detail than the
summary line in the object’s docstring.) The docstring for a package (i.e., the
docstring of the package’s __init__.py module) should also list the modules and
subpackages exported by the package.
...
The docstring for a function or method should summarize its behavior and
document its arguments, return value(s), side effects, exceptions raised, and
restrictions on when it can be called (all if applicable). Optional arguments
should be indicated. It should be documented whether keyword arguments are part
of the interface.
...
The docstring for a class should summarize its behavior and list the public
methods and instance variables. If the class is intended to be subclassed, and
has an additional interface for subclasses, this interface should be listed
separately (in the docstring). The class constructor should be documented in the
docstring for its __init__ method. Individual methods should be documented by
their own docstring.
#+end_quote

For subclassing and overriden methods:

#+begin_quote
If a class subclasses another class and its behavior is mostly inherited from
that class, its docstring should mention this and summarize the differences. Use
the verb “override” to indicate that a subclass method replaces a superclass
method and does not call the superclass method; use the verb “extend” to
indicate that a subclass method calls the superclass method (in addition to its
own behavior).
#+end_quote

Unless the entire docstring fits on a line, place the closing quotes on a line by themselves.
