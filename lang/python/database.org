#+TITLE: Database

* [[https://peps.python.org/pep-0249][DBAPI]]

The =Connection= object represents a database connection and the =Cursor= class
is not just a cursor and it performs various other database operations.

- ~Connection~: created by the ~.connect()~ method
  + closeable
  + support transactions; Transactions may be autocommitted, always call
    =.commit()= after operations.
  + create a ~cursor~ to perform database operations.

- ~cursor~: a database cursor used to perform database operations; the basic
  cursor is forward-only.
  + closeable
  + cursors are not isolated from each other.
  + has ~.description~ of columns and ~.rowcount~ of affected rows.
  + ~callproc()~, ~.execute()~ query or command, ~executemany()~ a query or command with a set of parameters.
  + ~fetch*()~ may return a variety of data structures (tuple, list, dict, namedtuple or some
    custom class).
  + some databases support multiple result sets ~.nextset()~
  + ~cursor~ is not required to support the iterator protocol: use ~fetch*()~
    for max compatibility

- parameter styles:
  + =pymysql=: format or pyformat (=%(named)s= only)
  + =cx_Oracle=: named
  + =pymssql=: pyformat
  + =pyodbc=: qmark
  + =sqlite3=: qmark, named, numeric

- database data types converter
  + ~Date()~, ~Time()~, ~Timestamp()~, ~Binary()~, ~DateFromTicks()~, ~TimeFromTicks()~, ~TimestampFromTicks()~ creates various objects mapping to their corresponding database types.
  + ~STRING~, ~BINARY~, ~NUMBER~, ~DATETIME~, ~ROWID~ type codes are provided
  + database null is represented by ~None~

- ~Error~: of ~StandardError~
  + ~DatabaseError~
    + ~InternalError~, ~OperationalError~, ~ProgrammingError~, ~IntegrityError~, ~DataError~, ~NotSupportedError~
  + ~InterfaceError~

* SQLAlchemy

** Core: SQLAlchemy Expression Language, A Backend-Neutral SQL in Python style

Interfacing with the database is done through =sqlalchemy.engine.Engine= (=create_engine=) and =sqlalchemy.engine.Connection= (typically =engine.connect()=).

*** =Engine=

The starting point of any SQLAlchemy app. An Engine references both a =Dialect= and a =Pool= (default to =QueuePool= of size five), which together interpret the DBAPIâ€™s module functions as well as the behavior of the database.

=create_engine()= once per particular database URL, held globally for the lifetime of a single application process, most efficient when created just once at the module level of an application. The basic function is to provide access to a =Connection= as a connection pool manager, which can then invoke SQL statements. Also, it provides internal caching of per-database resources. It is possible to explicitly =dispose= an =Engine= if

1. no longer planned to access the database

2. multiprocessing using =fork()= since database connections generally do not travel across process boundaries.

Connections that are being used are not discarded when the engine is discarded or GC-ed. These connections just return to its connection pool, which will be ultimately GC-ed. It is recommended to dispose an =Engine= only after all connections are checked in (back to the pool) or otherwise deassociated from their pool.

=create_mock_engine()= creates a mock engine for echoing DDL. This can be used to get DDL SQL strings.

** =URL= class

Pass this instead of a python string to the database and manually parse or modify the URL string. Create an =URL= class using =URL.create()=

** =Connection= class

A proxy object for an actual DBAPI connection. Connections are typically pooled for reuse.
