#+title: Basics

* Overview

Cython is Python with optional static data types. Comparable to C++/CLI, it is
native code under the Python runtime with Python-like syntax.

- transcompiled to C but executed within the Python runtime with its interface
  as the same as in Python

- Code which manipulates Python values and C values can be freely intermixed

- Refcount maintenance and error checking of Python operations is automatic

- Python error handling system is also available.

* Building

- =pyx= cython source files are first compiled to C source files and then built
  as a shared library.

- the library is then imported into a Python session.

- The most common way to build cython code is a setuptool =setup.py= (~python
  setup.py build_ext --inplace~); other ways
  include =cythonize=, =Pyximport=, jupyter notebooks or manually transcompiling
  with =cython= to C and then compiling into a library.

* First Example

#+include: "../../CodeOfLanguages/cython_tutorial/setup.py" src python

* Static Typing

Cython supports =cdef= syntax or pure Python type annotation/hint syntax (recommended)
The =cython= module includes C types for declaration in Python syntax.

** =cdef= Declarations

#+begin_src python
cdef int i, j, k
cdef float f, g[42], *h

cdef struct Grail:
	int age
    float volume

cdef union Food:
    char *spam
    float *eggs

cdef enum CheeseType:
    cheddar, edam,
    camembert

cdef enum CheeseState:
    hard = 1
    soft = 2
    runny = 3

ctypedef int* IntPtr


# a C function with a Python wrapper
cpdef long cfunc(long l):
	return 2 * l

#+end_src

*** Types

All standard C types are supported.

- A C tuple =ctuple= is available for Cython, which is compiled down to C structures.

**** Pointers

- normal C syntax or =cython.p_typename=, =cython.pp_typename=, or constructed
  with =cython.pointer()=.

- array syntax is the same as in C.

** Functions

- /pure Python function/ =def=: take Python objects as parameters and return Python
 objects (weakly typed);
 + When a C type is declared as a parameter of a Python function, the passed value
   is automatically converted to a C value (for numeric values only, otherwise a
   compile-time error).

- /C function/ =cdef=, =@cython.cfunc=: takes either Python objects or C values as parameters
  and can return either Python objects or C values.

A parameter without typing is assumed to be a Python object and refcounted
automatically. =object= is used for explicit Python object declaration.

A function must be a Python function to be called from pure Python code.
=cpdef= or decoration =@ccall= defines a C function (using the faster C calling
convention) with a Python wrapper
and can be overridden by another Python function.

Both kinds of functions can be declared with a C-style declaration syntax, or
declared as type-annotated Python-style function with appropriate declarations.

*** Arguments

- optional arguments are allowed in implementation files =.pyx=.

- keyword-only arguments (arguments after a =*= parameter and before a =**=
  parameter)

*** Error Propagation

A C function is not able to raise an exception: it has to return an error code.

Python functions return an error value along with its return value.
A C function or a =@cpdef=​/​=@ccall= function may be declared with
an exception return value =@ctyhon.exceptval= for it as a contract with the
caller.
If any exception is raised inside this function, this declared return value is
returned and the caller should proceed to propagate that exception. The except
clause is for propagating Python exceptions that have already been raised.

The caller is expected to raise an error on its own after failing a pure C function.

** Profiling for Typing Choice

Pass =-a=  to =cython=

Certain variables need no typing as their types may be deduced based on assignments.
