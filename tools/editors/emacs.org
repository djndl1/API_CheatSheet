#+title: Emacs


- *keymaps*: Emacs binds keys to named commands, a special type of Lisp function.

- =C-h= to invoke help

* File Handling

- the minibuffer supports =$= to read an envvar.

- =C-x C-f=: =find-file=; =C-x C-r=: =find-file-read-only=; =C-x C-v=:
  =find-alternate-file= (kills the current one and find another); =C-x 4 f=: =find-file-other-window=;
  =C-x 5 f=: =find-file-other-frame=; =find-file-literally= (treat the file as a file of ASCII).

- =C-x C-s=: =save-buffer= (the current one), =C-x s=: =save-some-buffers=;
  =C-x C-w=: =write-file= (SaveAs); =M-~=: mark as not modified to avoid saving.

- =insert-file=, =write-region=: read into/write text region to

  Emacs is able to read/write files in a compressed format or in an archive.

** Backup Files

Emacs saves the file the first time it's loaded into the buffer as a backup.

TODO

** Directory

- =C-x -C-d=: =list-directory=;

- =C-u C-x C-d=: a more verbose directory listing

- =make-directory=, =delete-directory=

*** =Dired=

- =C-x d=; =dired-listing-switches=

- Navigation: =SPC=, =DEL=, =j=, =M-s f C-s=

- Deletion: =d= (=dired-flag-file-deletion=), =u= (=dired-unmark=), =DEL=
  (=dired-unmark-backward=), =x= (=dired-do-flagged-delete=)

- Opening: =o=, =C-o=, =v= (view the file), =^= (move up the directory)
** Comparing Files

- =diff=, with =diff-switches=; =ediff=: a sophisticated diff mode.

- =diff-buffer-with-file= (and =magit-diff-buffer-file=): compares the buffer with its file.

- =compare-windows=

=diff-mode= shows a patch, the difference between two files. Changes in a patch
are grouped into *hunks* (contiguous chunks of text that contains one or more
changed lines). Each hunk starts with a *hunk header* that specifies the old and
new line numbers at which the hunk occurs.

TODO

* Editing

** Insertion


- =C-j=: newline (useful in minibuffer)

- =C-q= to insert any non-graphic characters.

- =C-x 8 RET=: inserts unicode characters.

- =C-o=: insert a blank line after (=C-x C-o=) delete blank lines.

** Point (Cursor) Navigation

- =M-g M-g=: =goto-line=

- =M-g TAB=: move to column

- To navigate a line visually, set =line-move-visual= to =t=

** Cursor location

- =line-number-mode=, =column-number-mode=, =hl-line-mode= (highlight), =display-line-mode=

- =what-line=, =C-x ==

- =count-words=, =M-== (=count-words-regioin=)

** Numeric arguments

- =digit-argument=, =negative-argument=, =universal-argument=: specifies arguments for the next command (not necessarily a repetition). To force a repetition, use =C-x z= after the command.

  To use arguments with a named command, specify the argument before running =M-x= with the command.

** Minibuffer

The area under the modeline, used also by the echo area.

*** Minibuffer Completion

=TAB=, =SPC=, =RET=, =?=, use with =M-v= (switch to the completion list)

*** Minibuffer History

- =previous-history-element=, =next-history-element=, =list-command-history=

- =C-x ESC ESC=: reexecute a recent minibuffer command

* Help

- =C-h=

- =C-h a=: searches for commands

- =C-h b=: describe bindings

- =C-h d=: search in documentation for keywords

- =C-h i=: the GNU Info manual

- =C-h f=: describe functions

- =C-h C-f= the Emacs FAQ

- =C-h p=: lists available Emacs packages

* Region, Mark

- *Mark*: the initially starting end of the selected region.

- *Mark Ring*: each buffer remembers previous locations of the mark in the *mark ring*. Setting a mark and then releasing it saves the mark in the mark ring.
  + =C-u C-SPC=: move the cursor back to the previous mark.
  + A global mark ring exists alongside the buffers' ring. =C-x C-SPC= jumps to the buffer and position of the latest entry in the global ring (saved at the same time as in a buffer's ring).

- =C-SPC=, =C-@=: set the mark at point, enter the mark mode

- =C-x C-x= (=exchange-point-and-mark=): switch between the cursor and the mark

- =SHIFT=-selection together with certain cursor motion commands: =S-M-f=

- =M-@=: move mark to the end of the next word, =C-M-@=: mark to the end of following balanced expression.

- =C-x h=: =mark-whole-buffer=; =C-x C-p= (=mark-page=)

** Operating on the Region

- =C-w=: =kill-region=, =M-w=: =kill-ring-save=.

- =M-%=: =query-replace=, query whether to replace and replace if yes.

- =C-x TAB=: indent

* Killing And Moving Text

- *killing*: erasing text and saving it into the kill ring.

- *yanking*: pasting the text from the kill ring back into the buffer.

Killing also copies text to the system's clipboard.

** Deletion

- Delete blanks: =M-\= (delete whitespaces around point), =M-SPC= (delete all but =just-one-space=), =M-^=: move the current line up by deleting the previous newline, while =C-x C-o=: deletes the next newline of the current line.

** Killing

- =C-k=: =kill-line= (kill to the next line), works with arguments

- =C-S-backspace=: =kill-whole-line=, works with arguments.

- =C-w=: =kill-region=; =M-w=; =M-d=: =kill-word=; =M-BACKSPACE=: =backward-kill-word=;

- =C-M-k=: =kill-sexp=

- =M-z char=: =zap-to-char= (kill to the next occurrence of the character).

** Yanking

Emacs respects the system's clipboard.

- =C-y= (with arguments earlier kills are inserted), =M-y= (=yank-pop=, choose from the kill ring).

- =C-M-w= + kill command: kill the text and append/prepend it to the previous kill entry.

- =mouse-yank-primary=: yanks the primary selection under X. The secondary selection of X is rarely used.

- =append-to-buffer=, =prepend-to-buffer=, =copy-to-buffer= (destroy and copy), =insert-buffer=, =append-to-file=

** Rectangles

There are two ways to do rectangle operations.

- The Rectangle commands, starting with =C-x r=: =C-x r k=, =C-x r M-w=, etc.

- Enter the rectangle mark mode with =C-x SPC= and use normal commands.

* Register

- *Register*: positions, text, rectangles, numbers, windows configurations, a file name are saved for later use.

- *Bookmark*: records files and positions.

** Saving Positions

- =C-x r SPC a=: =point-to-register= record the position of point and the current buffer in register =a=

- =C-x r j a=: =jump-to-register= =a=

** Saving Text

- =C-x r s r=: =copy-to-register=; =append-to-register=, =prepend-to-register=

- =C-x r i r=: =insert-register=

** Saving Rectangles

- =C-x r r r=: =copy-rectangle-to-register=

- =C-x r i r=: =insert-register=

** Bookmarks

- =C-x r m RET=:set the bookmark for the visited file at point.

- =C-x r m bookmark RET=: =bookmark-set=

- =C-x r b bookmark RET=: =bookmark-jump=

- =C-x r l=: =list-bookmarks=

- =bookmark-save=: save all the current bookmarks in the default bookmark file.

* Controlling the Display

- =scroll-down-command=, =scroll-up-command=, =scroll-down=, =scroll-up= scrolls text, not the window, opposite to what modern editors do.

- =recenter=, =C-l= (=recenter-to-bottom=, with arguments, this scroll the page to put the point at a certain line in the window, =C-u C-l= recenters), =C-M-l= (=reposition=).

- =view-mode=: =SPC= and =S-SPC= to scroll

- =follow-mode=: scroll two buffers that shows the same buffer together

- =C-x <= (=scroll-left=), =C-x >= (=scroll-right=)

- Narrowing: =C-x n n= (=narrrow-to-region=), =C-x n w= (=widen=), =C-x n p= (=narrow-to-page=), =C-x n d= (=narrow-to-defun=). To get the current point after narrowing, use =C-x ==.

** Faces

*Faces*: different text styles. Each face can specify various /face attributes/: font, height, weight, slant, foreground and background color.
=list-faces-display= displays all faces.

TODO

* Searching and Replacement

- =C-s=, =C-r=: =isearch-forward=, =isearch-backward=, ends with a =RET=. After enter the search mode, =C-w= (=isearch-yank-word=or-char=), =M-s C-e= (=isearch-yank-line=), =C-y=, =M-y= and many isearch yanking commands yank text into the search minibuffer.

 To return to where the search starts (saved in the mark ring), =C-u C-SPC=. =C-s C-s=/=C-r C-r= starts the previous search again. =C-s M-n=/=C-s M-p= chooses from the search ring. =M-e= to enter the minibuffer to modify the search string.

* Buffers and Windows

** Buffers

- =C-x b=, =C-x 4 b=, =C-x 5 b= (separate frame)

- =C-x C-b=: =list-buffers=

- =C-x C-q=: =read-only-mode=

- =C-x k=: =kill-buffer=; =kill-matching-buffers=; =clean-buffer-list=

- =buffer-menu=; =buffer-menu-other-window=

** Windows

- =C-x 2=, =C-x 3=: split horizontally/vertically

- =C-x o=: =other-window=; =C-M-v=: =scroll-other-window=

- =C-x 4=-family commands display buffers in another window

- =C-x 0=: =delete-window=; =C-x 1=: =delete-other-window=;

- =C-x ~=; =C-x }=; =C-x {=; =C-x -=; =C-x +=

* International Support

=view-hello-file= shows various characters that Emacs supports.

- =current-language-environment=: combination of various language-related and character
  coding settings including a coding system, character sets and input methods.

** Input

- =insert-char=: insert unicode characters.

- various input methods.
  + =describe-input-method=
  + =toggle-input-method=
  + =set-input-method=
  + =quail-show-key=

** Displayed Characters

- =describe-character=

- =what-cursor-position=

** Character Coding System

Emacs internally uses UTF-8 to handle string.

When reading a file, Emacs tries to recognize its coding system (and succeeds
most of the time).

- =buffer-file-coding-system=: the default coding system to use on saving.

- =describe-coding-system=

- =list-coding-systems=

- =set-buffer-file-coding-system= (save as, for output), =revert-buffer-with-coding-system=
  (reopen as, for input)

- =recode-region=: convert character coding of a region from one to another

=unix=, =dos= and =mac= indicates EOL marker schemes.

=raw-text= show charaters as ASCII characters and byte values.
=no-conversion= does nothing to convert bytes to characters. Both set
=enable-multibyte-characters= to =nil=.

** Fontsets

The entire range of scripts requires /a collection of many fonts/ (fontset),
defined by Emacs itself.

** Charsets

Different concept from a coding system. Emacs has a preference for fonts
depending on charsets.

- =list-character-sets=

- =list-charset-chars=

** Further Reading

[[https://nullprogram.com/blog/2014/06/13/][Emacs Unicode Pitfalls]]

* Major and Minor Modes

- *Major Mode*: specialized facilities for working on a specialized file type. Major modes are mutually exclusive.
  + Three groups:
    - Normal text, plain or markup
    - Various programming languages
    - special buffers such as shell, =Dired=, =Message=.
  + =C-h m= describes the current mode.
  + Each major mode defines a mode hook, a list of Lisp functions to run each time the mode is enabled in a buffer.

- *Minor Mode*: optional features not necessarily specific to a type of file or buffer.
  + Minor modes can be buffer-local or global.
  + Some useful minor modes:
    - =display-line-numbers=
    - visual line-mode.
    - line number mode, enabled by default
    - menu bar mode
    - scroll bar mode

Emacs determines the major mode by first finding a =; -*- mode: my-mode ;-*-= string in the buffer, then by =#!=, then by matching the start of the text, then matching the file name and finally falling back to another mode.

* Normal Text Editing

- =M-t=: =transpose-words=, exchange two words at both sides of the point.

- =M-a=, =M-e=, =M-k=, =C-x DEL=: sentence editing commands.

- Case conversion
  + =M-l=, =M-u=
  + =M-c=
  + =C-x C-l=, =C-x C-u=

- =M-{=, =M-}=, =M-h=: paragraph commands

- =auto-fill-mode=: automatically breaks the line at spaces when necessary (filling the text)
  + =M-q=: =fill-paragraph=
  + =C-x f=: set the fill column
  + =fill-region=
  + =M-o M-s= Center a line

* Source Code Editing

- =prog-mode-hook= is run before the PL's major mode.

- *defun*: a major definition at top level in the buffer such as a function.
  Many PL modes assume by default that any opening delimiter found at the left
  margin is the start of a top-level definition (*defun*)
  + =beginning-of-defun=, =end-of-defun=, =mark-defun=

- *Imenu*: list major definitions in a buffer

- =which-function-mode=: show in which function the point is.

** Indentation

Emacs is responsible for reindenting the source code buffer.

- =TAB=: =indent-for-tab-command=, =C-u TAB=: shift an entire parenthetical grouping

- =C-M-q=: Reindent all the lines within a parenthetical grouping.

- =c-set-style=, =c-default-style= for various major modes.

** Balanced Expressions

- =C-M-f/b/k/t/@/SPC=: move, kill, transpose, mark based on sexp.

- =C-M n/p/u/d=: parenthetical grouping navigation: next grouping, previous grouping, uplevel, downlevel

- =electric-pair-mode=: easy insertion of matching delimiters.

** Comments

- =M-;=: =comment-dwim=; =C-x C-;=: =comment-line=, =C-u M-;=: =comment-kill=;

** Find Identifier References

- *identifier*: a syntactical subunit of the program: a function, a subroutine, a method, a class, a data type, a macro.

- *xref*: the unified interface for dealing with identifiers. The backend for the major mode is responsible for gathering the information of identifiers: either using builtin means or through an external program (=etags=).

- =M-.= =xref-find-definition=; =xref-find-apropos=, =xref-find-defintions-other-window=; =M-,=: =xref-go-back=

- =M-?=: =xref-find-references=

- =xref-query-replace-in-results=

- =C-M-i=: =complete-symbol=

** Programming Documentation Lookup

- =C-h S=: =info-lookup-symbol= to view the Info doc for a symbol used in the program.

- =man=, =woman=

- =C-h f=, =C-h v= for elisp.

** Other Features

- =hs-minor-mode=: hideshow a block, =C-c @= with various related command. But we also have =fold.el=.

- the =semantic= package: language-aware editing commands based on source code parsers.

- =prettify-symbols-mode=: replace certain strings with more attractive versions for display purposes. Not really for programming.

- =flymake-mode=: a linter for many PLs.

** For C-Family Languages

- =C-M-a=, =C-M-e=, =M-a=, =M-e=

  TODO

** Compilation

=compile=, =recompile=

** Debugging

- *GUD* (Grand Unified Debugger): an Emacs interface to a wide variety of symbolic debuggers.

- =gdb=, =gud-gdb=

- =C-x C-a=-series of commands to control the debugger.

* Configuration and Custimization

- =customize=: an interactive mechanism to configure emacs

** Init File

An =init.el= at =~/.emasc.el=, =~/.emacs.d/init.el= or
=~/.config/emacs/.init.el=.
=user-emacs-directory= is set to indicate which
directory is used.

=init.el= consists of one or more Elisp expressions. An =early-init.el= is an
init file that is read before package initialization.

** Variables

Elisp variables are for internal record keeping but also user customization.

- =describe-variable=: show the variable's value and documentation

- =set-variable=: change the value of a customizable variable. Use =setq= for
  any variable.

*** Hooks

A variable holding a list of functions that are called on some well-defined
occasion.

- /normal hooks/ =-hook=: functions without arguments are run in turn in the
  order they appear in the hook list.

- /abnormal hooks/ =-functions=:

Use =add-hook= to add a hook function to a hook variable.

#+begin_src elisp
(add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Locals.html][Buffer-Local (Per-Buffer) Variables]]

After setting a variable to local, any assignment would be local.
To set the global value, use =setq-default= and =default-value= access the
value.

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Locals.html][File-Local Variable]]

Variables that are automatically applied to a file.

#+begin_src elisp
-*- mode: org; var: value; ... -*- ;; at the first line
#+end_src

Or =add-file-local-variable-prop-line=.
Or near the end of the file with a local variables list (within a comment block
if necessary)

#+begin_src elisp
Local Variables:
mode: c
comment-column: 0
End
#+end_src

Some special variables are defined

- =mode=: the specified major mode (use =eval= for minor modes, not recommended
  though since this forces other uses to use the same minor modes).

- =eval=: evaluates the specified Lisp expression

- =coding=: the character coding system

- =unibyte=: if =t=, load or compile an Elisp file in unibyte mode (texts are
  viewed as pure bytes instead of character).

File variables may be unsafe and emacs prompts the user to accept these variables.

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Directory-Local Variables]]

For customization in a directory.

#+begin_src elisp
;; basically an alist of alists
;; alist with mode or a directory name as the the key and an alist of variable-value or mode-variable_alist as the value
;; the more specific modes take priority
((mode-name-or-nil-for-all-modes . ((variable-name-one . variable-one-value)
                                    (variable-name-two . variable-two-value)))
 (mode-two . ((variable-name-three . variable-one-value)
              (subdirs . nil))) ; a special keyword that indicates the setting does not apply to subdirectories
 ("directory" . (nil . ((variable-n-name . variable-n-value))))) ; applies only to "directory"
#+end_src

=coding=, =eval=, =unibyte=, =mode= are also accepts as directory-local
variables.

** Key Bindings

- /key binding/: a mapping between a key and a command.

- /key sequence/: a sequence of input events that have a meaning (from the
  binding) as a unit.

- /keymaps/: data strctures that store the key binding between key sequences and
  command functions.
  + /the global keymap/: always in effect. =global-set-key=, =global-unset-key=
  + /local keymaps/: each major or minor mode can have its own keymap which
    overrides the global definitions of some keys. The definitions for a prefix
    in local keymaps and the global keymap are combined. =local-set-key=,
    =local-unset-key=, =define-key=
  + the minibuffer has its own set of local keymaps.
  + interpreting a key sequence of multiple events involves a chain of keymaps:
    the first keymap gives a definition for the first event, which is another
    keymap, which is used to look up the second event in the sequence, and so
    on. A keymap definition may be a function that returns the map.
  + Emacs supports modifier keys other than /control/ and /meta/, including
    /Super/, /Hyper/ and /Alt/, not defined by default though.
  + Emacs can treat control characters and corresponding keys differently but
    normally they are automatically mapped to each other.
  + disable a command instead of undefine a mapping.

#+begin_src elisp
(global-set-key (kbd "C-c y") 'clipboard-yank)
#+end_src

* Emacs Lisp Packages

- =list-packages=: =h=, =?= =RET= etc. This menu can be operated on.

** Installation

- =package-install=: packages are downloaded from =package-archive=s

Emacs searches =package-user-dir= and =package-directory-list= for installed packages.

* Packages

** TRAMP: Transparent Remote Access Multiple Protocol

=/method:user@host:/path/to/file=

#+begin_src
/smb:user%domain@host:/path/to/file # windows SAMBA
/ssh:user@host#port:/path/to/file # SSH with a custom port
/sudo: # use another user's identity for a while
/su: # as another user
#+end_src

Supports ssh, telnet, samba, GVFS, FUSE, Android adb

- *inline methods*: use the same login connection to transfer file contents
  + ssh, telnet, su, sudo, plink

- *external methods*: operate over multiple channels
  + rcp, scp, rsync, fcp, ftp, smb
  + GVFS: atp, dav(s), gdrive, mtp, nextcloud, sftp
  + FUSE: sshfs
  + docker, kubernetes, magit, hdfs,vagrant

- Some useful options
  + =tramp-remote-path=

** CC Mode

- Basic options
  + =c-basic-offset=: indentation offset
  + =c-default-style=: the basic style of indentation

- =C-c .=: =c-set-style=

- =C-c :=: =c-scope-operator=

- =C-c C-z=: =c-display-defun-name=

- =C-c C-e=: =c-macro-expand=

** Emacs Vim Mode

*** Viper

Implemented as a collection of minor modes.

- =C-z=: enter/exit Emacs state.

** flycheck

- =C-c ! n/p= (=flycheck-previous/next-error=): navigate through errors

- =C-c ! l= (=flycheck-list-errors=)

** Ivy

- =ivy=: provides a basic framework and UI for listing/search/filtering/completion while
  typing in more details
  + =ivy-read=

- =swiper=: search

- =counsel=: provides some useful command based on ivy and more abstraction
  + =counsel-find-file=
  + =counsel-M-x=
  + =counsel-describe-function=
  + =counsel-describe-variable=
  + =counsel-find-library=
  + =counsel-git=, =counsel-git-grep=, =counsel-ag=, =counsel-locate=

** Treemacs

Managing directories as workspaces

- *workspace*: multiple projects (folders) forms a single workspace.

- =treemacs-advanced-helpful-hydra=

** Projectile

A project interaction library for easy project management and navigation.
  + searching/replace in the directory

- *project*: a folder containing some special file (a VCS marker or a project
  descriptor file).
  + marker: =.projectile=, VCS directories, some project description file.

- =Lead-key p=

- =projectile-find-file=

- =projectile-switch-project=

- =lead-key p s=: =search-project=

- =projectile-find-other-file=: find related file (e.g. source - header)

* Language Server Protocol

** =lsp-mode=

- code completion:
  + =completion-at-point=

- code actions on the modeline: refactor, format, rename

- hovers (=lsp-ui=)

- code outline =imenu=, =helm-imenu=

- code navigation =xref=, =lsp-treemacs=, =lsp-ui=
  + =lsp-find-definition=
  + =lsp-find-references=

- code lens

- breadcrumbs on headline, the hierarchy information of the current cursor.

** =lsp-ui=

- =lsp-ui-sideline=: various information on the right line

- =lsp-ui-peek=: peek defintions, references. similar to that of VSCode.

- =lsp-ui-doc=: show docs

- =lsp-ui-imenu=: show imenu entries
  + =lsp-ui-imenu-auto-refresh=

** =lsp-treemacs=

- =lsp-tremacs-sync-mode=: set to 1

- =lsp-treemacs-errors-list=: show errors at the bottom (like in VSCode)

- =lsp-treemacs-symbols=: show symbols, outline on the left.

- =lsp-treemacs-references/implementations=: show references/implementations at
  the bottom (like in Visual Studio).

** =lsp-ivy=

- =lsp-ivy-workspace-symbol=

- =lsp-ivy-global-workspace-symbol=

  Show symbols in ivy's interactive completion interface.

** =dap-mode=

- =dap-debug=: use a debug template to start the debugging

- =dap-debug-edit-template=: prepare a template declaration inside a temporary buffer.
