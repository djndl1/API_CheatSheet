* Basic Operations

** Status-Aware

- =C-g=: show the location in a file and the file status

** Motion

- ~e~: move to the end of the current word

- ~^f~ / ~^b~: scroll up/down a screen

- ~^d~ / ~^u~: scroll up/down half screen

- ~^e~ / ~^y~: scroll up/down one line

- ~zENTER~ / ~z.~ / ~z-~: move current line to top/center/bottom of screen and scroll

- ~H~ / ~M~ / ~L~: move home/middle/last line on screen

- ~n|~: move to column n

- ~(~ / ~)~, ~{~ / ~}~, ~[[~ / ~]]~: move to beginning of current/next sentence/paragraph/section

- =%=: move to the matching parenthesis

- Commands that change text can be combined with ~/~ and ~?~

- ~f~ / ~F~ / ~t~ / ~T~ / ~;~ /~,~

- ~G~ / ~``~: go to/back

** Change Text

Format: [Change] [Count] [Motion]

- =o= / =O=: insert a newline below/above and enter the insert mode.

- =a=: append after the cursor, =i= before the cursor; =A=: append to the current line.

- ~d~: delete
  + ~D~: delete to the end of the line = ~d$~

- ~ra~: replace the current char with ~a~, no need to enter the insert mode;
  ~R~: the replace mode that replaces everything in its way, basically the INSERT key in CUA.

- ~c~: change, a combination of delete followed by insert. ~ce~, ~cw~
  - ~cc~: change the entire line
  - ~C~: = ~c$~

- =~=: changing case

- ~ZZ~ / ~:wq~

- ~:e!~: returns to the last saved version of the file

- ~:w!~: overwrite the existing file

- ~s~: substitute a certain number of text object, i.e. delete and insert

- ~y~ (yank), ~p~, ~P~ (put after/before)

- ~.~: repeat the former command

- ~Y~: = ~yy~

- ~R~: replace mode, overstrike the current line

- ~xp~: transpose the current and the next character

- ~A~/~I~: append to the end/begging of the line

- ~J~: join

- ~-~ / ~+~: to the first char of the previous/next line

** Search/Replace

- =:s/thee/the/=, optionally with =g= (globally in the line)

- =#,#s/old/new/g=, =%s/old/new/g= (the whole buffer=, =%s/old/new/gc= (prompt whether to substitute or not)

** Undo/Redo

- ~u~: undo; ~U~: undo all on a line, ~C-r~: redo

** Set Option

- =:set=
  + =ic= (ignore case), =hls= (hlsearch), =is= (incsearch), =noic=, =inv= to the option inverts the option.

* Advanced Operations

~y~ / ~d~ can be used with a-z named buffers that are specifically available for copying and moving text. A-Z appends text to these buffers.

#+begin_src
"dyy
"a7yy

"dP
"ap
#+end_src

- ~mx~ / ~'x~ / ~`x~ / ~``~

* Basic Concepts

~vi~ has tow modes:

- command mode:

- insert mode:

The general form of ~vi~ commands is 

#+begin_src 
(command)(number)(text object)
(number)(command)(text object)
#+end_src

=vi= saves the last nine deleted line in nine numbered deletion buffers.

* External Commands

- =!shell_command=

- =:r FILENAME=, =:r !ls=: read into the current buffer

* ex commands and the ex mode

Originally, =vi= was the visual mode of the =ex= editor, an improved line editor
from and a superset of =ed=. Modern =ex= runs a cleared terminal, unlike =ed=,
which runs directly in the current view of the terminal.

=ex= has buffers named =a= through =z=.
The =ex= editor has five modes:

- *command mode* :: =:= prompt
  + =address command ! parameters count flags=, all parts are optional. The
    degenerate case (empty command) prints the next line in the file. Here
    =flags= are =p=, =l= or =#=, executed after the main command.
  + Most commands names are English words with prefix abbreviations. Most commands
    accept prefix addresses specifying the lines in the file upon which they are
    to have effect. A few (e.g. =delete=) may take a trailing count specifying the
    number of lines to be involved or other parameters after the command name.
  + For commands that takes a range address, the count parameter limits the
    command to the lines starting at the line of the range, counting the =count=
    number of lines.
  + commands are commented out by a double quote ="=.
  + multiple commands on a single line are separated by =|=

- *text input mode* :: gathers input lines and places them in the file; the
  =append=, =insert= and =change= commands use text input mode. A =.= line exits
  the mode.

- *open modes* :: displays one line at a time

- *visual mode*, *text insertion mode* :: vi's modes

** Command Addressing

- =.= :: the current line

- =n= :: the nth line

- =$= :: the last line

- =%= :: the entire buffer, equal to =1,$=

- =+n=, =-n= :: an offset relative to the line specified before it

- =/re/=, =?re?= :: scan forward or backward respectively for a line containing
  a regex, possibly with some commands to operate on these lines. The search wraps around the end of the buffer. Without the trailing
  =/= or =?=, the command simply prints the next matching line using the regex. =//= or =??= uses the last regex.

- ='"= :: the previous current line is marked by ="=.

- Null address specification defaults to the current line, =1,p= prints the
  first line through the current line.

* Pattern Matching

slashes can be replaced by colons as delimiters.
 
- ~\( \)~: saves the pattern enclosed between into a special holding space or a hold buffer.
  
#+begin_src 
:%s/\(abcd\)\1/alphabet-soup/
# changes `abcdabcd` into `alphbaet-soup`
#+end_src

- ~\< \>~: matches characters at the beginning or at the end of a word

- ~~~: matches whatever regex was used in the last search, only available in a regular search

- ~\( \)~: saves the pattern enclosed between into a special holding space

#+begin_src 
:s/\(abcd\)\1/alphabet-soup/
# changes abcdabcd to alphabet-soup
#+end_src

- ~\< \>~: matches characters at the beginning or at the end of a word

- ~~~: matches whatever regex was used in the last search.

- character classes, collating symbols, equivalence classes

#+begin_src 
[[.ch.]] # a multicharacter sequence that should be treated as a unit
[[=e=]] # match any of e, e with acute, e with 
#+end_src 

- ~\n~: replaced with text matched the nth pattern previously saved by ~\(~ and ~\)~

- ~&~: replaced with the entire text matched by the search problem

- ~~~: the string found is replaced with the replacement text specified in the last substitute command. The search pattern doesn't need to be the same.

#+begin_src 
:s/thier/their/
:s/thier/~/
#+end_src

- ~\u~ / ~\l~: causes the next character in the replacement string to be changed to uppercase or lowercase. ~\U~ \ ~\L~ \ ~\e~ \ ~\E~: all following characters are converted to uppercase or lowercase until the end of the replacement string or until ~\e~ / ~\E~.

#+begin_src 
:%s/yes, doctor/\uyes, \udoctor/
:%s/Fortran/\UFortran/
#+end_src 

#+begin_src 
:%s/child\( ,.;:!?\)/children\1/g
:%s/\<child\>/children/g
#+end_src 

#+begin_src 
:g /SYNTAX/.,/DESCRIPTION/-1 move /PARAMTERS/-1
#+end_src 

** Some Pattern Matching Examples
 
- delete all blank lines plus any lines that contain only whitespace

#+begin_src 
:g/^[ tab]*$/d
#+end_src

- delete all leading spaces

#+begin_src 
:%s/^  *\(.*\)/\1/
#+end_src

- insert a ~>  ~ at the start of every line in a file

#+begin_src 
:%s/^/>  /
#+end_src

- reverse the order of lines in a file

#+begin_src 
:g/.*/mo0
#+end_src

- repeat a command

#+begin_src 
# copy lines 12-17 to the end of the file ten times
:1,10g/^/ 12,17t$
#+end_src

* Advanced Usage

#+begin_src
:set option
:set nooption
#+end_src

~:set all~ displays all options.

#+begin_src 
:1,30!sort # sort 1,30 using `sort`
#+end_src

- ~map x sequence~: a macros for command mode; ~unmap x~; ~map~: list mappings

#+TODO

* VIM 

** Command line options

- ~-b~: in binary mode

- ~-d~: diff mode

- ~-E~: improved ex mode, with extended regex

- ~-F~ / ~-A~: Farsi or Arabic mode

- ~view~: vim in read-only mode

- ~vimdiff~: diff mode

- ~ex~: ex mode, useful in scripts

** Extended Regex

- ~\|~: indicates alternation

- ~\+~

- ~\=~: matches zero or one of the preceding regex


- {-(n),(m)}: non-greed matching

** Multiwindows behavior

- ~-o~/~-oNumber~

- ~:split~, ~Ctrl-Ws~: split the window horizontally

- ~:vnew~ / ~:vsplit~, ~Ctrl-Wv~: vertically split the window

- ~:new~, ~Ctrl-Wn~: new window

- ~:close~, ~Ctrl-Wc~: close the current window; ~:only~: close all but the current window

- ~Ctrl-W~ + ~+, -~: increase/decrease the current windows, ~=~: resize all windows to equal size. + ~<, >~: decrease/increase, + ~|~: resizes the current window to the widest size possible

- ~Ctrl-W~ + ~h,j,k,l~, ~t~ (top), ~b~ (bottom), ~p~ (previous)

- ~Ctrl-W~ + ~r~: rotate windows, + ~x~: exchange two windows in a row or column

- ~Ctrl-W~ + ~K, J, H, L, T (tab)~: move the current window, full height

- ~Ctrl-W~ + ~q~: quit a window; + ~c~: close the current window

- ~Ctrl-W~ + ~o~: maximize a window

* Vimscripts

#+TODO
