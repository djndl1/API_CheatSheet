Line-oriented text editor used to create, display, modify and otherwise
manipulate text files both interactively and via shell scripts. Line editing
works similarly to Unix shell operations, where a comand is given and some input
is typed
or some output is displayed.

All ed commands operate on whole lines or ranges of lines.

*ed* supports two mode:

- *command*: commands are read from the stdin and executed to manipulate the
  contents of the editor buffer.
  + basic command structure: =[ADDRESS [, ADDRESS]]COMMAND[PARAMETERS]=, where
    the address pair may be specified by a regex pattern.

- *input*: with a input command such as =a=, =i=, =c=, ed enters input mode, the
  primary means of adding text to a file. The standard input is written directly
  to the buffer editor buffer and then terminated by a single period =.= on a
  line.

Since ed operates on lines, there's a reason for commands like =s/old/new/p= to exist
as one cannot easily modify an individual word.

* Line Addressing

'ed' has a current line address =.= that is used by commands
if addresses are not explicitly specified. By default, it's set to the last line
of the file. =0= represents "before the first line".

- *address range* format: =a,b=, =a;b= (the current address is first set to =a=,
  useful when starting at a certain line)
  + Address omission: =,addr= is =1,addr=; =;addr= is =.;addr=; =addr,= is =addr,addr=, =addr;= is =addr;=.
  + =$=: the last line; =.= the current line
  + Offset: =+N=, =-N=: the n-th next/previous line; Single =+=,
    =-= is =+1= and =-1=. Addresses may be followed by one or more address offsets.
  + =,=: all lines (a single =,= is different from =,p=), =;=: the current to the last
  + =/RE/=, =?RE?=: the next/previous line that contains the regex.
  + ='x=: go to the line marked by the letter =x=


* Commands

Most commands accept a print suffix (=p=, =l=, =n=) to print the last line
affected by the command.

- ~p~ (print) :: print, may be append to most commands;

- ~l~ (list) :: print lines with special characters escaped.

- ~n~ (number) :: prints with line numbers

- ~(.)a~ :: append

- ~(.,.)c~ :: change line(s) in the buffer

- ~(.)i~ :: insert at a line before the addressed line, that is, insert a line at
  the specified line number and push the original line down.

- ~.~ :: leaves the input mode

- ~(.,.)d~ :: delete line(s)

- ~e filename~ :: edit a file and sets the default filename;

- ~E file~ :: discard unwritten changes and edit a new file

- ~f filename~ :: set the default filename to =filename=; if no filename is
  specified, it prints the current filename.

- =q= :: quit with warning; =Q= forcefully quit without saving

- ~($)r filename~ :: read file into the current buffer after the addressed line

- =(.,.+1)j= :: joins the addressed lines, replacing them by a single line
  containing their joined text.

- ~($)=~ :: the line number of the addressed line.

- =h= :: prints an explanation of the last error.

- ~(.,.)m(.)~ :: move lines to a position, cut and paste to

- ~(.,.)t(.)~ :: copies the addressed lines to after the specified destination address

- =(.,.)y= :: copies (yanks) the addressed lines to the cut buffer.

- =(.)x= :: puts the contents of the cut buffer to after the addressed line.
  + the cut buffer is overwritten by =c=, =d=, =j=, =s=, =y=

- =(.+1)zn= :: scroll (print and move) n lines if =n= is specified.

- ~(1,$)g/re/command-list~ :: global mode. executes one or more commands on all
  the lines in a range (the buffer) that match some specified string. Use ~G~ for interactive commands. Use =v= or =V= for lines not matched.

- ~(.,.)s/re/replacement/~ :: substitute text in the first matching line;
  postfixes can be appended;
  + =/= delimiter may be replaced by any character other than space, newline and
    the special characters used by the =s= command.
  + =&= in the replacement text represents the matched text. =\m= in the
    replacement is replaced by
    the mth backreference expression of the matched text, if any, otherwise an
    empty string. =%= uses the replacement from the last substitution.
  + =g= postfix: replace all matched lines
  + a number =n= postfix: replace the n-th matched instance
  + =l=, =n=, =p= postfixes: print the replaced
  + without the =/re/replacement/= part, it repeats the last substitution

- context searching ~/../~ :: we can do both the search for the desired line and a substitution all at once like context searches are interchangeable with line numbers

  #+begin_src
/their/s/their/the/p
g/peling/s//pelling/gp # the // part is the last search pattern, namely peling
  #+end_src

- =u= :: undo any modification of the buffer and restore the current address.

- =!cmd= :: runs shell commands inside =ed= and displays the output. =!!= repeats
  the previous command.

- =(.)kx= :: mark a line with a lower case letter =x=.

- =(1,$)w [filename]/!shell_command= :: write a range (the entire buffer) to
  =filename=, the default filename or the shell command's stdin. Use =W= to
  append instead of overwrite.
