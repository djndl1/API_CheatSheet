Line-oriented text editor used to create, display, modify and otherwise
manipulate text files both interactively and via shell scripts. Line editing
works similarly to Unix shell operations, where a comand is given and some input
is typed
or some output is displayed.

All ed commands operate on whole lines or ranges of lines.

*ed* supports two mode:

- *command*: commands are read from the stdin and executed to manipulate the
  contents of the editor buffer.
  + basic command structure: =[ADDRESS [, ADDRESS]]COMMAND[PARAMETERS]=, where
    the address pair may be specified by a regex pattern.

- *input*: with a input command such as =a=, =i=, =c=, ed enters input mode, the
  primary means of adding text to a file. The standard input is written directly
  to the buffer editor buffer and then terminated by a single period =.= on a
  line.

Since ed operates on lines, there's a reason for commands like =s/old/new/p= to exist
as one cannot easily modify an individual word.

* Line Addressing

'ed' has a current line address =.= that is used by commands
if addresses are not explicitly specified. By default, it's set to the last line
of the file. =0= represents "before the first line".

- *address range* format: =a,b=, =a;b= (the current address is first set to =a=,
  useful when starting at a certain line)
  + Address omission: =,addr= is =1,addr=; =;addr= is =.;addr=; =addr,= is =addr,addr=, =addr;= is =addr;=.
  + =$=: the last line; =.= the current line
  + Offset: =+N=, =-N=: the n-th next/previous line; Single =+=,
    =-= is =+1= and =-1=. Addresses may be followed by one or more address offsets.
  + =,=: all lines, =;=: the current to the last
  + =/RE/=, =?RE?=: the next/previous line that contains the regex.
  + ='x=: go to the line marked by the letter =x=


* Commands

- ~p~: print, may be append to most commands; ~l~: print lines with special characters escaped.
  ~n~: prints with line numbers

- ~a~: append, ~.~: end

- ~c~: change line(s)

- ~i~: insert at a line

- ~d~: delete line(s)

- ~e~: edit a file

- ~f~: show file info

- ~r~: read file into the current buffer

- ~.,.+3p~: print the next three lines

- ~.=~: the value of dot

- ~start, end, s/change this/to this/~: ~g~ means global

- context searching ~/../~: we can do both the search for the desired line and a substitution all at once like context searches are interchangeable with line numbers

#+begin_src
/their/s/their/the/p
#+end_src

- ~(.,.)m(.)~: move lines to a position, cut and paste to

- ~(1,$)g/re/command-list~: executes one or more commands on all the lines in the buffer that match some specified string. Use ~G~ for interactive commands. Use =v= or =V= for lines not matched.

- ~(.,.)s/re/replacement/~: replace text; prefixes can be appended; =&= in the replacement text represents the matched text.
  + =g=: replace all the matched
  + a number: replace the n-th matched
  + =l=, =n=, =p=: print the replaced

- ~(.,.)t(.)~: copies the addressed lines to after the specified destination address

- =u=: undo

#+begin_src sed
g/peling/s//pelling/gp
#+end_src

- ~v~: opposite of ~g~

- ~&~: used on the right-hand part of a substitute command where it means "whatever was matched on the left-hand side"

- =!=: runs shell commands inside =ed= and displays the output. Use =r= to read
  the output
