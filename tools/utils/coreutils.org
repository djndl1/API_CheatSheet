#+title: Coreutils

* =ls=

- =-1= :: one line per file

- =-t= :: sort by time in descending order, by default modification time (mtime).

- =-u= :: use access time (atime), =-c= use create time (ctime)

- =-r= :: reverse the order

* =pr=

A paginator that make text into forms suitable for paper pages, possibly in
multiple columns. By default 66 lines per page. Not a replacement for =troff= or
=nroff=. For real printing, consider =lp= and =lpr=.

* =wc=

count lines, words, characters or bytes of a file.

* =sort=

Lines are compared by specified by fields/keys (=-k=), or the entire line if
none. Equal lines are ordered according to the entire line unless stable sort =-s=
(=--stable=) is specified, which retains the original order. Output may be saved
to a file =-o=.

=sort= by defaults sorts concatenated files, otherwise checks if the files are
sorted (=-c=, =-C=), or merges already-sorted files without sorting them (=-m=).

** Key Definition

A key is a segment of a line, specified as the part between two endpoints
(inclusive) =-k POS1[,POS2]=. The endpoint is specified in the format of
=EndpointFieldNumber.EndpointCharacterNumber.OrderingOption=. The end of line is
used if the end is not specified. The field end is used if the character number
of the second endpoint is not specified. The count starts at 1 not
0, which denotes the last one.

Separators are specified by =-t=, by default unintuitively the empty string between a
non-blank character and a blank character, not blank characters.

Multiple key definitions of different ordering options are supported, used
in the order on the command line

** Order

By default in ascending order, =-r= makes it descending. =-s= enables stable
sort by retaining the original order of equal lines.

** Comparison Rules

By default, keys
are compared using the collating sequence of =LC_COLLATE=. All these sort
options including =-r= may be used as options within the key definition to
override the global ordering for that key. All modifiers excpet =-b= apply to
the associated field, regardless of whether the modifier character is attached
to the field-start or the field-end part of the key specifier.

As a last resort, any equal results are sorted by using the the entire keys
unless stable sort is used.

- leading blanks may be ignored =-b=

- =-f= ignores case

- =-i= ignores nonprinting characters

- /dictionary sort/ (=-d=): only letters are considered

- /numeric sort/ =-n=: sort by numeric keys (the line is assumed to start with a
  number field). Empty digit strings are considered zero (and then trailing
  non-digit characters are sorted as a last resort upon equal results). Affected by =LC_NUMERIC=.

  #+begin_quote
1. Lines that begin numerically are sorted by numeric value (smaller numbers come first)
2. Trailing characters on numeric lines do not affect the numeric portion,
   but the trailing characters are sorted alphanumerically if the numeric portion is the same.
3. Lines that begin non-numerically are sorted as if they were zero, and then by rule 2.
  #+end_quote

- /general numric sort/ =-g=: the number is taken as a double-precision
  floating-point number.

- /human numeric sort/ =-h=: understands SI suffixes.

- /version sort/, or /natural sort/: =-V= sort first by character and then by numeric, based Debian's
  package version sort. There is
  no standardized rules across various programming contexts.
  + strings are split into text, digits, text, digits ..., and then compared
    respectively. Empty numeric parts are seen as zero. ASCII letters precede
    other bytes in text substrings; =~= precedes all including empty strings.
  + text characters are compared byte by text, ignoring locales.

- /Month sort/ =-M=: sort by month name abbreiviation, affected by =LC_TIME=

- /Random sort/ =-R=: a random permutation of the input by hashing the input
  keys and then sorting the hash values. Lines with equal hash values are sorted together.

** Input

From command line or files. Zero-terminated filenames are supported with =--files0-from=FILE=.

** Output

- unique output: =-u= output only the first of a sequence of equal lines (in the original order)

- zero-terminated instead of newline-terminated: =-z=

- compressed output with an external compression program: =--compress-program=PROG=

** Performance

- =-S SIZE= controls sort buffer size.

- =--parallel=N= threaded sort

** Examples

#+begin_src shell
# Decorate-Sort-Undecorate: add a length field, sort by length, remove the length field
awk '{print length, $0}' /etc/passwd | sort -n | cut -f2- -d' '
#+end_src
